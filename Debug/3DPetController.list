
3DPetController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a8c  08009948  08009948  00019948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3d4  0800c3d4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c3d4  0800c3d4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c3d4  0800c3d4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3d4  0800c3d4  0001c3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3d8  0800c3d8  0001c3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800c3dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003270  2000001c  0800c3f8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000328c  0800c3f8  0002328c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d5f  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a22  00000000  00000000  00045dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  0004a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001948  00000000  00000000  0004c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000785b  00000000  00000000  0004dbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dbb3  00000000  00000000  0005544b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe650  00000000  00000000  00072ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017164e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007148  00000000  00000000  001716a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009930 	.word	0x08009930

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08009930 	.word	0x08009930

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <_ZN9RectangleC1Emmmm>:
//--------
class Rectangle
{
	public:
		Rectangle(): _x(0), _y(0), _width(0), _height(0) {}
		Rectangle(uint32_t x, uint32_t y, uint32_t w, uint32_t h): _x(x), _y(y), _width(w), _height(h) {}
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
 80001ec:	603b      	str	r3, [r7, #0]
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	68ba      	ldr	r2, [r7, #8]
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	687a      	ldr	r2, [r7, #4]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	683a      	ldr	r2, [r7, #0]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	69ba      	ldr	r2, [r7, #24]
 8000204:	60da      	str	r2, [r3, #12]
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	4618      	mov	r0, r3
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000218:	f000 fd61 	bl	8000cde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021c:	f000 f842 	bl	80002a4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000220:	f000 f912 	bl	8000448 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000224:	f000 f8f2 	bl	800040c <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8000228:	f000 f89e 	bl	8000368 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800022c:	f004 fe6a 	bl	8004f04 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueMessages */
  queueMessagesHandle = osMessageQueueNew (5, sizeof(Message_TypeDef), &queueMessages_attributes);
 8000230:	4a11      	ldr	r2, [pc, #68]	; (8000278 <main+0x64>)
 8000232:	2108      	movs	r1, #8
 8000234:	2005      	movs	r0, #5
 8000236:	f004 ff5c 	bl	80050f2 <osMessageQueueNew>
 800023a:	4603      	mov	r3, r0
 800023c:	4a0f      	ldr	r2, [pc, #60]	; (800027c <main+0x68>)
 800023e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000240:	4a0f      	ldr	r2, [pc, #60]	; (8000280 <main+0x6c>)
 8000242:	2100      	movs	r1, #0
 8000244:	480f      	ldr	r0, [pc, #60]	; (8000284 <main+0x70>)
 8000246:	f004 fea7 	bl	8004f98 <osThreadNew>
 800024a:	4603      	mov	r3, r0
 800024c:	4a0e      	ldr	r2, [pc, #56]	; (8000288 <main+0x74>)
 800024e:	6013      	str	r3, [r2, #0]

  /* creation of display */
  displayHandle = osThreadNew(StartDisplay, NULL, &display_attributes);
 8000250:	4a0e      	ldr	r2, [pc, #56]	; (800028c <main+0x78>)
 8000252:	2100      	movs	r1, #0
 8000254:	480e      	ldr	r0, [pc, #56]	; (8000290 <main+0x7c>)
 8000256:	f004 fe9f 	bl	8004f98 <osThreadNew>
 800025a:	4603      	mov	r3, r0
 800025c:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <main+0x80>)
 800025e:	6013      	str	r3, [r2, #0]

  /* creation of buttonScan */
  buttonScanHandle = osThreadNew(StartButtonScan, NULL, &buttonScan_attributes);
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <main+0x84>)
 8000262:	2100      	movs	r1, #0
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <main+0x88>)
 8000266:	f004 fe97 	bl	8004f98 <osThreadNew>
 800026a:	4603      	mov	r3, r0
 800026c:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <main+0x8c>)
 800026e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000270:	f004 fe6c 	bl	8004f4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000274:	e7fe      	b.n	8000274 <main+0x60>
 8000276:	bf00      	nop
 8000278:	08009a44 	.word	0x08009a44
 800027c:	200000d8 	.word	0x200000d8
 8000280:	080099d8 	.word	0x080099d8
 8000284:	080004b9 	.word	0x080004b9
 8000288:	200000cc 	.word	0x200000cc
 800028c:	080099fc 	.word	0x080099fc
 8000290:	080004c9 	.word	0x080004c9
 8000294:	200000d0 	.word	0x200000d0
 8000298:	08009a20 	.word	0x08009a20
 800029c:	0800069d 	.word	0x0800069d
 80002a0:	200000d4 	.word	0x200000d4

080002a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b096      	sub	sp, #88	; 0x58
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	2244      	movs	r2, #68	; 0x44
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f009 fb2c 	bl	8009910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	463b      	mov	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002ca:	f002 ffeb 	bl	80032a4 <HAL_PWREx_ControlVoltageScaling>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	bf14      	ite	ne
 80002d4:	2301      	movne	r3, #1
 80002d6:	2300      	moveq	r3, #0
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80002de:	f000 fb59 	bl	8000994 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002e2:	2310      	movs	r3, #16
 80002e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002e6:	2301      	movs	r3, #1
 80002e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ee:	2360      	movs	r3, #96	; 0x60
 80002f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002f6:	2301      	movs	r3, #1
 80002f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002fa:	2301      	movs	r3, #1
 80002fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002fe:	2328      	movs	r3, #40	; 0x28
 8000300:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000302:	2307      	movs	r3, #7
 8000304:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000306:	2302      	movs	r3, #2
 8000308:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800030a:	2302      	movs	r3, #2
 800030c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	4618      	mov	r0, r3
 8000314:	f003 f81c 	bl	8003350 <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	bf14      	ite	ne
 800031e:	2301      	movne	r3, #1
 8000320:	2300      	moveq	r3, #0
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000328:	f000 fb34 	bl	8000994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2303      	movs	r3, #3
 8000332:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000340:	463b      	mov	r3, r7
 8000342:	2104      	movs	r1, #4
 8000344:	4618      	mov	r0, r3
 8000346:	f003 fbe9 	bl	8003b1c <HAL_RCC_ClockConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	bf14      	ite	ne
 8000350:	2301      	movne	r3, #1
 8000352:	2300      	moveq	r3, #0
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800035a:	f000 fb1b 	bl	8000994 <Error_Handler>
  }
}
 800035e:	bf00      	nop
 8000360:	3758      	adds	r7, #88	; 0x58
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800036c:	4b24      	ldr	r3, [pc, #144]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 800036e:	4a25      	ldr	r2, [pc, #148]	; (8000404 <_ZL12MX_I2C1_Initv+0x9c>)
 8000370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F33;
 8000372:	4b23      	ldr	r3, [pc, #140]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 8000374:	4a24      	ldr	r2, [pc, #144]	; (8000408 <_ZL12MX_I2C1_Initv+0xa0>)
 8000376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037e:	4b20      	ldr	r3, [pc, #128]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 8000380:	2201      	movs	r2, #1
 8000382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000384:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800038a:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 8000398:	2200      	movs	r2, #0
 800039a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a2:	4817      	ldr	r0, [pc, #92]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 80003a4:	f001 f9be 	bl	8001724 <HAL_I2C_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	bf14      	ite	ne
 80003ae:	2301      	movne	r3, #1
 80003b0:	2300      	moveq	r3, #0
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80003b8:	f000 faec 	bl	8000994 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003bc:	2100      	movs	r1, #0
 80003be:	4810      	ldr	r0, [pc, #64]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 80003c0:	f002 feaa 	bl	8003118 <HAL_I2CEx_ConfigAnalogFilter>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	bf14      	ite	ne
 80003ca:	2301      	movne	r3, #1
 80003cc:	2300      	moveq	r3, #0
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80003d4:	f000 fade 	bl	8000994 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003d8:	2100      	movs	r1, #0
 80003da:	4809      	ldr	r0, [pc, #36]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 80003dc:	f002 fee7 	bl	80031ae <HAL_I2CEx_ConfigDigitalFilter>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	bf14      	ite	ne
 80003e6:	2301      	movne	r3, #1
 80003e8:	2300      	moveq	r3, #0
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80003f0:	f000 fad0 	bl	8000994 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80003f4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80003f8:	f002 ff26 	bl	8003248 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000038 	.word	0x20000038
 8000404:	40005400 	.word	0x40005400
 8000408:	00300f33 	.word	0x00300f33

0800040c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <_ZL11MX_DMA_Initv+0x38>)
 8000414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000416:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <_ZL11MX_DMA_Initv+0x38>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6493      	str	r3, [r2, #72]	; 0x48
 800041e:	4b09      	ldr	r3, [pc, #36]	; (8000444 <_ZL11MX_DMA_Initv+0x38>)
 8000420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	2105      	movs	r1, #5
 800042e:	2010      	movs	r0, #16
 8000430:	f000 fd46 	bl	8000ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000434:	2010      	movs	r0, #16
 8000436:	f000 fd5f 	bl	8000ef8 <HAL_NVIC_EnableIRQ>

}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <_ZL12MX_GPIO_Initv+0x68>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4a13      	ldr	r2, [pc, #76]	; (80004b0 <_ZL12MX_GPIO_Initv+0x68>)
 8000464:	f043 0302 	orr.w	r3, r3, #2
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <_ZL12MX_GPIO_Initv+0x68>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0302 	and.w	r3, r3, #2
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <_ZL12MX_GPIO_Initv+0x68>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <_ZL12MX_GPIO_Initv+0x68>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <_ZL12MX_GPIO_Initv+0x68>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : BUTTON_LEFT_Pin BUTTON_RIGHT_Pin BUTTON_DOWN_Pin BUTTON_UP_Pin
                           BUTTON_SELECT_Pin */
  GPIO_InitStruct.Pin = BUTTON_LEFT_Pin|BUTTON_RIGHT_Pin|BUTTON_DOWN_Pin|BUTTON_UP_Pin
 800048e:	f24e 0306 	movw	r3, #57350	; 0xe006
 8000492:	60fb      	str	r3, [r7, #12]
                          |BUTTON_SELECT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000494:	2300      	movs	r3, #0
 8000496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049c:	f107 030c 	add.w	r3, r7, #12
 80004a0:	4619      	mov	r1, r3
 80004a2:	4804      	ldr	r0, [pc, #16]	; (80004b4 <_ZL12MX_GPIO_Initv+0x6c>)
 80004a4:	f000 ff7c 	bl	80013a0 <HAL_GPIO_Init>

}
 80004a8:	bf00      	nop
 80004aa:	3720      	adds	r7, #32
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000400 	.word	0x48000400

080004b8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f004 fdfb 	bl	80050bc <osDelay>
 80004c6:	e7fb      	b.n	80004c0 <_Z16StartDefaultTaskPv+0x8>

080004c8 <_Z12StartDisplayPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplay */
void StartDisplay(void *argument)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b0e0      	sub	sp, #384	; 0x180
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDisplay */
	ssd1306_Init(&hi2c1);
 80004d2:	486b      	ldr	r0, [pc, #428]	; (8000680 <_Z12StartDisplayPv+0x1b8>)
 80004d4:	f008 fa32 	bl	800893c <_Z12ssd1306_InitP19__I2C_HandleTypeDef>
	Rectangle rectMain(0, 0, SSD1306_WIDTH, SSD1306_HEIGHT);
 80004d8:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 80004dc:	2340      	movs	r3, #64	; 0x40
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	f7ff fe7b 	bl	80001e0 <_ZN9RectangleC1Emmmm>
	Rectangle rectButton(0, 0, SSD1306_WIDTH, 32);
 80004ea:	f507 70a2 	add.w	r0, r7, #324	; 0x144
 80004ee:	2320      	movs	r3, #32
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	2200      	movs	r2, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	f7ff fe72 	bl	80001e0 <_ZN9RectangleC1Emmmm>
	menu::Button buttonHeating("НАГРЕВ", rectButton, FontVerdana_16x16);
 80004fc:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8000500:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000504:	2300      	movs	r3, #0
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	4b5e      	ldr	r3, [pc, #376]	; (8000684 <_Z12StartDisplayPv+0x1bc>)
 800050a:	495f      	ldr	r1, [pc, #380]	; (8000688 <_Z12StartDisplayPv+0x1c0>)
 800050c:	f008 f8f0 	bl	80086f0 <_ZN4menu6ButtonC1EPKcRK9RectangleRK6font_tPFvvE>
	menu::Button buttonMotor("ДВИГАТЕЛЬ", rectButton, FontVerdana_16x16);
 8000510:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8000514:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8000518:	2300      	movs	r3, #0
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	4b59      	ldr	r3, [pc, #356]	; (8000684 <_Z12StartDisplayPv+0x1bc>)
 800051e:	495b      	ldr	r1, [pc, #364]	; (800068c <_Z12StartDisplayPv+0x1c4>)
 8000520:	f008 f8e6 	bl	80086f0 <_ZN4menu6ButtonC1EPKcRK9RectangleRK6font_tPFvvE>
	menu::Button buttonItem1("Пункт 1", rectButton, FontVerdana_16x16);
 8000524:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8000528:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800052c:	2300      	movs	r3, #0
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	4b54      	ldr	r3, [pc, #336]	; (8000684 <_Z12StartDisplayPv+0x1bc>)
 8000532:	4957      	ldr	r1, [pc, #348]	; (8000690 <_Z12StartDisplayPv+0x1c8>)
 8000534:	f008 f8dc 	bl	80086f0 <_ZN4menu6ButtonC1EPKcRK9RectangleRK6font_tPFvvE>
	menu::Button buttonItem2("Пункт 2", rectButton, FontVerdana_16x16);
 8000538:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 800053c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000540:	2300      	movs	r3, #0
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	4b4f      	ldr	r3, [pc, #316]	; (8000684 <_Z12StartDisplayPv+0x1bc>)
 8000546:	4953      	ldr	r1, [pc, #332]	; (8000694 <_Z12StartDisplayPv+0x1cc>)
 8000548:	f008 f8d2 	bl	80086f0 <_ZN4menu6ButtonC1EPKcRK9RectangleRK6font_tPFvvE>
	buttonHeating.is_toggle = buttonMotor.is_toggle = true;
 800054c:	2301      	movs	r3, #1
 800054e:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8000552:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8000556:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
	buttonMotor.focus = true;
 800055a:	2301      	movs	r3, #1
 800055c:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	menu::Control *controls[] = { &buttonHeating, &buttonMotor, &buttonItem1, &buttonItem2 };
 8000560:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000564:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800056e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000578:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000582:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000586:	60da      	str	r2, [r3, #12]
	menu::Screen screenMain(rectMain, nullptr, nullptr, controls, 4);
 8000588:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 800058c:	f107 0010 	add.w	r0, r7, #16
 8000590:	2304      	movs	r3, #4
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	2200      	movs	r2, #0
 800059e:	f007 fdd4 	bl	800814a <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh>
	Message_TypeDef message;
	osStatus_t status;
	/* Infinite loop */
	for(;;)
	{
		uint8_t msg_count = osMessageQueueGetCount(queueMessagesHandle);
 80005a2:	4b3d      	ldr	r3, [pc, #244]	; (8000698 <_Z12StartDisplayPv+0x1d0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 fed4 	bl	8005354 <osMessageQueueGetCount>
 80005ac:	4603      	mov	r3, r0
 80005ae:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
		if(msg_count > 0)
 80005b2:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d058      	beq.n	800066c <_Z12StartDisplayPv+0x1a4>
		{
			for(uint8_t i = 0; i < msg_count; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 80005c0:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 80005c4:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d24f      	bcs.n	800066c <_Z12StartDisplayPv+0x1a4>
			{
				status = osMessageQueueGet(queueMessagesHandle, &message, 0U, 0);
 80005cc:	4b32      	ldr	r3, [pc, #200]	; (8000698 <_Z12StartDisplayPv+0x1d0>)
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	f107 0108 	add.w	r1, r7, #8
 80005d4:	2300      	movs	r3, #0
 80005d6:	2200      	movs	r2, #0
 80005d8:	f004 fe5e 	bl	8005298 <osMessageQueueGet>
 80005dc:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
				if(status == osOK)
 80005e0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d13b      	bne.n	8000660 <_Z12StartDisplayPv+0x198>
				{
					switch(message.id)
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d136      	bne.n	8000660 <_Z12StartDisplayPv+0x198>
					{
						case ID_BUTTON:
						{
							uint32_t id_buttons = *((uint32_t*)message.param);
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

							if(id_buttons > 0)
 80005fe:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000602:	2b00      	cmp	r3, #0
 8000604:	d02b      	beq.n	800065e <_Z12StartDisplayPv+0x196>
							{
								for(uint8_t bit_pos = 0; bit_pos < 32; bit_pos++)
 8000606:	2300      	movs	r3, #0
 8000608:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 800060c:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8000610:	2b1f      	cmp	r3, #31
 8000612:	d824      	bhi.n	800065e <_Z12StartDisplayPv+0x196>
								{
									uint8_t bit = (1 << bit_pos);
 8000614:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8000618:	2201      	movs	r2, #1
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
									if(id_buttons & bit)
 8000622:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 8000626:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800062a:	4013      	ands	r3, r2
 800062c:	2b00      	cmp	r3, #0
 800062e:	d010      	beq.n	8000652 <_Z12StartDisplayPv+0x18a>
									{
										screenMain.onClick((menu::key_t)bit);
 8000630:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f007 fe89 	bl	8008352 <_ZN4menu6Screen7onClickENS_5key_tE>
										id_buttons &= ~bit;
 8000640:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000644:	43db      	mvns	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800064c:	4013      	ands	r3, r2
 800064e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
								for(uint8_t bit_pos = 0; bit_pos < 32; bit_pos++)
 8000652:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8000656:	3301      	adds	r3, #1
 8000658:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 800065c:	e7d6      	b.n	800060c <_Z12StartDisplayPv+0x144>
//									if(id_buttons == 0)
//										break;
								}
							}
						}
						break;
 800065e:	bf00      	nop
			for(uint8_t i = 0; i < msg_count; i++)
 8000660:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8000664:	3301      	adds	r3, #1
 8000666:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 800066a:	e7a9      	b.n	80005c0 <_Z12StartDisplayPv+0xf8>
					}
				}
			}
		}

		screenMain.draw();
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	4618      	mov	r0, r3
 8000672:	f007 fdbf 	bl	80081f4 <_ZN4menu6Screen4drawEv>
		osDelay(50);
 8000676:	2032      	movs	r0, #50	; 0x32
 8000678:	f004 fd20 	bl	80050bc <osDelay>
	}
 800067c:	e791      	b.n	80005a2 <_Z12StartDisplayPv+0xda>
 800067e:	bf00      	nop
 8000680:	20000038 	.word	0x20000038
 8000684:	20000014 	.word	0x20000014
 8000688:	08009978 	.word	0x08009978
 800068c:	08009988 	.word	0x08009988
 8000690:	0800999c 	.word	0x0800999c
 8000694:	080099ac 	.word	0x080099ac
 8000698:	200000d8 	.word	0x200000d8

0800069c <_Z15StartButtonScanPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonScan */
void StartButtonScan(void *argument)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0d8      	sub	sp, #352	; 0x160
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartButtonScan */
	key::key_set_t set_left =
 80006a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
 80006b6:	615a      	str	r2, [r3, #20]
 80006b8:	4baa      	ldr	r3, [pc, #680]	; (8000964 <_Z15StartButtonScanPv+0x2c8>)
 80006ba:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80006be:	2302      	movs	r3, #2
 80006c0:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
 80006c4:	2302      	movs	r3, #2
 80006c6:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
		menu::BUTTON_LEFT,
		GPIO_PIN_RESET,
		key::PRESSED_STATE,
		key::Keyboard::period,
		false
	};
 80006ca:	4ba7      	ldr	r3, [pc, #668]	; (8000968 <_Z15StartButtonScanPv+0x2cc>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	key::key_set_t set_right =
 80006d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
 80006e2:	615a      	str	r2, [r3, #20]
 80006e4:	4b9f      	ldr	r3, [pc, #636]	; (8000964 <_Z15StartButtonScanPv+0x2c8>)
 80006e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80006ea:	2304      	movs	r3, #4
 80006ec:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
 80006f0:	2301      	movs	r3, #1
 80006f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80006f6:	2302      	movs	r3, #2
 80006f8:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		menu::BUTTON_RIGHT,
		GPIO_PIN_RESET,
		key::PRESSED_STATE,
		key::Keyboard::period,
		false
	};
 80006fc:	4b9a      	ldr	r3, [pc, #616]	; (8000968 <_Z15StartButtonScanPv+0x2cc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	key::key_set_t set_up =
 8000704:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]
 8000716:	4b93      	ldr	r3, [pc, #588]	; (8000964 <_Z15StartButtonScanPv+0x2c8>)
 8000718:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800071c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000720:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
 8000724:	2302      	movs	r3, #2
 8000726:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800072a:	2302      	movs	r3, #2
 800072c:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
		menu::BUTTON_UP,
		GPIO_PIN_RESET,
		key::PRESSED_STATE,
		key::Keyboard::period,
		false
	};
 8000730:	4b8d      	ldr	r3, [pc, #564]	; (8000968 <_Z15StartButtonScanPv+0x2cc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	key::key_set_t set_down =
 8000738:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
 8000748:	615a      	str	r2, [r3, #20]
 800074a:	4b86      	ldr	r3, [pc, #536]	; (8000964 <_Z15StartButtonScanPv+0x2c8>)
 800074c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000754:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 8000758:	2304      	movs	r3, #4
 800075a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800075e:	2302      	movs	r3, #2
 8000760:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
		menu::BUTTON_DOWN,
		GPIO_PIN_RESET,
		key::PRESSED_STATE,
		key::Keyboard::period,
		false
	};
 8000764:	4b80      	ldr	r3, [pc, #512]	; (8000968 <_Z15StartButtonScanPv+0x2cc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	key::key_set_t set_select =
 800076c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
 800077e:	4b79      	ldr	r3, [pc, #484]	; (8000964 <_Z15StartButtonScanPv+0x2c8>)
 8000780:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000788:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 800078c:	2308      	movs	r3, #8
 800078e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000792:	2302      	movs	r3, #2
 8000794:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
 8000798:	2301      	movs	r3, #1
 800079a:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
		menu::BUTTON_SELECT,
		GPIO_PIN_RESET,
		key::PRESSED_STATE,
		key::Keyboard::period,
		true
	};
 800079e:	4b72      	ldr	r3, [pc, #456]	; (8000968 <_Z15StartButtonScanPv+0x2cc>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	key::Key button_left(set_left);
 80007a6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80007aa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f007 fb3b 	bl	8007e2c <_ZN3key3KeyC1ERKNS_9key_set_tE>
	key::Key button_right(set_right);
 80007b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80007ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f007 fb33 	bl	8007e2c <_ZN3key3KeyC1ERKNS_9key_set_tE>
	key::Key button_up(set_up);
 80007c6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80007ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fb2b 	bl	8007e2c <_ZN3key3KeyC1ERKNS_9key_set_tE>
	key::Key button_down(set_down);
 80007d6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80007da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f007 fb23 	bl	8007e2c <_ZN3key3KeyC1ERKNS_9key_set_tE>
	key::Key button_select(set_select);
 80007e6:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80007ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f007 fb1b 	bl	8007e2c <_ZN3key3KeyC1ERKNS_9key_set_tE>
	key::Key *buttons[] = { &button_left, &button_right, &button_select, &button_up, &button_down };
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000826:	611a      	str	r2, [r3, #16]
	key::Keyboard keyboard(buttons, 5);
 8000828:	f107 0120 	add.w	r1, r7, #32
 800082c:	f107 0318 	add.w	r3, r7, #24
 8000830:	2205      	movs	r2, #5
 8000832:	4618      	mov	r0, r3
 8000834:	f007 fb75 	bl	8007f22 <_ZN3key8KeyboardC1EPPNS_3KeyEj>
	Message_TypeDef message;
	uint32_t active_buttons;
	/* Infinite loop */
	for(;;)
	{
		active_buttons = 0;
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
		keyboard.scan();
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	4618      	mov	r0, r3
 8000846:	f007 fb7f 	bl	8007f48 <_ZN3key8Keyboard4scanEv>
		if(button_left.is_active)
 800084a:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800084e:	2b00      	cmp	r3, #0
 8000850:	d011      	beq.n	8000876 <_Z15StartButtonScanPv+0x1da>
		{
			active_buttons |= button_left.id();
 8000852:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000856:	4618      	mov	r0, r3
 8000858:	f007 fb07 	bl	8007e6a <_ZNK3key3Key2idEv>
 800085c:	4602      	mov	r2, r0
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	431a      	orrs	r2, r3
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	601a      	str	r2, [r3, #0]
			button_left.reset();
 800086c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000870:	4618      	mov	r0, r3
 8000872:	f007 fb2b 	bl	8007ecc <_ZN3key3Key5resetEv>
		}
		if(button_right.is_active)
 8000876:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d011      	beq.n	80008a2 <_Z15StartButtonScanPv+0x206>
		{
			active_buttons |= button_right.id();
 800087e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000882:	4618      	mov	r0, r3
 8000884:	f007 faf1 	bl	8007e6a <_ZNK3key3Key2idEv>
 8000888:	4602      	mov	r2, r0
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	431a      	orrs	r2, r3
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	601a      	str	r2, [r3, #0]
			button_right.reset();
 8000898:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800089c:	4618      	mov	r0, r3
 800089e:	f007 fb15 	bl	8007ecc <_ZN3key3Key5resetEv>
		}
		if(button_up.is_active)
 80008a2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d011      	beq.n	80008ce <_Z15StartButtonScanPv+0x232>
		{
			active_buttons |= button_up.id();
 80008aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008ae:	4618      	mov	r0, r3
 80008b0:	f007 fadb 	bl	8007e6a <_ZNK3key3Key2idEv>
 80008b4:	4602      	mov	r2, r0
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	431a      	orrs	r2, r3
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	601a      	str	r2, [r3, #0]
			button_up.reset();
 80008c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008c8:	4618      	mov	r0, r3
 80008ca:	f007 faff 	bl	8007ecc <_ZN3key3Key5resetEv>
		}
		if(button_down.is_active)
 80008ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d011      	beq.n	80008fc <_Z15StartButtonScanPv+0x260>
		{
			active_buttons |= button_down.id();
 80008d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008dc:	4618      	mov	r0, r3
 80008de:	f007 fac4 	bl	8007e6a <_ZNK3key3Key2idEv>
 80008e2:	4602      	mov	r2, r0
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	431a      	orrs	r2, r3
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	601a      	str	r2, [r3, #0]
			button_down.reset();
 80008f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008f6:	4618      	mov	r0, r3
 80008f8:	f007 fae8 	bl	8007ecc <_ZN3key3Key5resetEv>
		}
		if(button_select.is_active)
 80008fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d011      	beq.n	800092a <_Z15StartButtonScanPv+0x28e>
		{
			active_buttons |= button_select.id();
 8000906:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800090a:	4618      	mov	r0, r3
 800090c:	f007 faad 	bl	8007e6a <_ZNK3key3Key2idEv>
 8000910:	4602      	mov	r2, r0
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	431a      	orrs	r2, r3
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	601a      	str	r2, [r3, #0]
			button_select.reset();
 8000920:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000924:	4618      	mov	r0, r3
 8000926:	f007 fad1 	bl	8007ecc <_ZN3key3Key5resetEv>
		}

		if(active_buttons != 0)
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d010      	beq.n	8000956 <_Z15StartButtonScanPv+0x2ba>
		{
			message.id = ID_BUTTON;
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
			message.param = (void*)&active_buttons;
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	f107 020c 	add.w	r2, r7, #12
 8000944:	605a      	str	r2, [r3, #4]
			osMessageQueuePut(queueMessagesHandle, &message, 0U, 0);
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <_Z15StartButtonScanPv+0x2d0>)
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	f107 0110 	add.w	r1, r7, #16
 800094e:	2300      	movs	r3, #0
 8000950:	2200      	movs	r2, #0
 8000952:	f004 fc41 	bl	80051d8 <osMessageQueuePut>
		}

		osDelay(keyboard.period);
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <_Z15StartButtonScanPv+0x2cc>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f004 fbae 	bl	80050bc <osDelay>
		active_buttons = 0;
 8000960:	e76a      	b.n	8000838 <_Z15StartButtonScanPv+0x19c>
 8000962:	bf00      	nop
 8000964:	48000400 	.word	0x48000400
 8000968:	20000010 	.word	0x20000010
 800096c:	200000d8 	.word	0x200000d8

08000970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000982:	f000 f9c5 	bl	8000d10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40014800 	.word	0x40014800

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_MspInit+0x4c>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_MspInit+0x4c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6613      	str	r3, [r2, #96]	; 0x60
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_MspInit+0x4c>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_MspInit+0x4c>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_MspInit+0x4c>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	210f      	movs	r1, #15
 80009da:	f06f 0001 	mvn.w	r0, #1
 80009de:	f000 fa6f 	bl	8000ec0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0ac      	sub	sp, #176	; 0xb0
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2288      	movs	r2, #136	; 0x88
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f008 ff7d 	bl	8009910 <memset>
  if(hi2c->Instance==I2C1)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a39      	ldr	r2, [pc, #228]	; (8000b00 <HAL_I2C_MspInit+0x110>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d16b      	bne.n	8000af8 <HAL_I2C_MspInit+0x108>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a20:	2340      	movs	r3, #64	; 0x40
 8000a22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f003 fa97 	bl	8003f60 <HAL_RCCEx_PeriphCLKConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a38:	f7ff ffac 	bl	8000994 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <HAL_I2C_MspInit+0x114>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a40:	4a30      	ldr	r2, [pc, #192]	; (8000b04 <HAL_I2C_MspInit+0x114>)
 8000a42:	f043 0302 	orr.w	r3, r3, #2
 8000a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a48:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <HAL_I2C_MspInit+0x114>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a54:	23c0      	movs	r3, #192	; 0xc0
 8000a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5a:	2312      	movs	r3, #18
 8000a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a76:	4619      	mov	r1, r3
 8000a78:	4823      	ldr	r0, [pc, #140]	; (8000b08 <HAL_I2C_MspInit+0x118>)
 8000a7a:	f000 fc91 	bl	80013a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <HAL_I2C_MspInit+0x114>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	4a20      	ldr	r2, [pc, #128]	; (8000b04 <HAL_I2C_MspInit+0x114>)
 8000a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a88:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <HAL_I2C_MspInit+0x114>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <HAL_I2C_MspInit+0x11c>)
 8000a98:	4a1d      	ldr	r2, [pc, #116]	; (8000b10 <HAL_I2C_MspInit+0x120>)
 8000a9a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <HAL_I2C_MspInit+0x11c>)
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <HAL_I2C_MspInit+0x11c>)
 8000aa4:	2210      	movs	r2, #16
 8000aa6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <HAL_I2C_MspInit+0x11c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_I2C_MspInit+0x11c>)
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_I2C_MspInit+0x11c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HAL_I2C_MspInit+0x11c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_I2C_MspInit+0x11c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_I2C_MspInit+0x11c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000acc:	480f      	ldr	r0, [pc, #60]	; (8000b0c <HAL_I2C_MspInit+0x11c>)
 8000ace:	f000 fa21 	bl	8000f14 <HAL_DMA_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_I2C_MspInit+0xec>
    {
      Error_Handler();
 8000ad8:	f7ff ff5c 	bl	8000994 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <HAL_I2C_MspInit+0x11c>)
 8000ae0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_I2C_MspInit+0x11c>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2105      	movs	r1, #5
 8000aec:	201f      	movs	r0, #31
 8000aee:	f000 f9e7 	bl	8000ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000af2:	201f      	movs	r0, #31
 8000af4:	f000 fa00 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af8:	bf00      	nop
 8000afa:	37b0      	adds	r7, #176	; 0xb0
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40005400 	.word	0x40005400
 8000b04:	40021000 	.word	0x40021000
 8000b08:	48000400 	.word	0x48000400
 8000b0c:	20000084 	.word	0x20000084
 8000b10:	4002006c 	.word	0x4002006c

08000b14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	201a      	movs	r0, #26
 8000b2a:	f000 f9c9 	bl	8000ec0 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000b2e:	201a      	movs	r0, #26
 8000b30:	f000 f9e2 	bl	8000ef8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <HAL_InitTick+0x9c>)
 8000b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b38:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <HAL_InitTick+0x9c>)
 8000b3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b3e:	6613      	str	r3, [r2, #96]	; 0x60
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <HAL_InitTick+0x9c>)
 8000b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b4c:	f107 0210 	add.w	r2, r7, #16
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f003 f970 	bl	8003e3c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b5c:	f003 f958 	bl	8003e10 <HAL_RCC_GetPCLK2Freq>
 8000b60:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <HAL_InitTick+0xa0>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	0c9b      	lsrs	r3, r3, #18
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <HAL_InitTick+0xa8>)
 8000b74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b82:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b92:	f003 fea1 	bl	80048d8 <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d104      	bne.n	8000ba6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000b9c:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b9e:	f003 fefd 	bl	800499c <HAL_TIM_Base_Start_IT>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3730      	adds	r7, #48	; 0x30
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	431bde83 	.word	0x431bde83
 8000bb8:	200031fc 	.word	0x200031fc
 8000bbc:	40014800 	.word	0x40014800

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <DMA1_Channel6_IRQHandler+0x10>)
 8000bf2:	f000 fae8 	bl	80011c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000084 	.word	0x20000084

08000c00 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000c06:	f003 ff39 	bl	8004a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200031fc 	.word	0x200031fc

08000c14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <I2C1_EV_IRQHandler+0x10>)
 8000c1a:	f001 f810 	bl	8001c3e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000038 	.word	0x20000038

08000c28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <SystemInit+0x5c>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <SystemInit+0x5c>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <SystemInit+0x60>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <SystemInit+0x60>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <SystemInit+0x60>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <SystemInit+0x60>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <SystemInit+0x60>)
 8000c54:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c58:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c5c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <SystemInit+0x60>)
 8000c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c64:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <SystemInit+0x60>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <SystemInit+0x60>)
 8000c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SystemInit+0x60>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00
 8000c88:	40021000 	.word	0x40021000

08000c8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c90:	f7ff ffca 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c96:	e003      	b.n	8000ca0 <LoopCopyDataInit>

08000c98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c9e:	3104      	adds	r1, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ca0:	480a      	ldr	r0, [pc, #40]	; (8000ccc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ca4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ca6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ca8:	d3f6      	bcc.n	8000c98 <CopyDataInit>
	ldr	r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cac:	e002      	b.n	8000cb4 <LoopFillZerobss>

08000cae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cb0:	f842 3b04 	str.w	r3, [r2], #4

08000cb4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <LoopForever+0x16>)
	cmp	r2, r3
 8000cb6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cb8:	d3f9      	bcc.n	8000cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cba:	f008 fdf7 	bl	80098ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cbe:	f7ff faa9 	bl	8000214 <main>

08000cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc2:	e7fe      	b.n	8000cc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000cc8:	0800c3dc 	.word	0x0800c3dc
	ldr	r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cd0:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8000cd4:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8000cd8:	2000328c 	.word	0x2000328c

08000cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_2_IRQHandler>

08000cde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f8de 	bl	8000eaa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f7ff ff10 	bl	8000b14 <HAL_InitTick>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	e001      	b.n	8000d04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d00:	f7ff fe4e 	bl	80009a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d04:	79fb      	ldrb	r3, [r7, #7]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20003248 	.word	0x20003248

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20003248 	.word	0x20003248

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff4c 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed2:	f7ff ff61 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000ed6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	6978      	ldr	r0, [r7, #20]
 8000ede:	f7ff ffb1 	bl	8000e44 <NVIC_EncodePriority>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff80 	bl	8000df0 <__NVIC_SetPriority>
}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff54 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e098      	b.n	8001058 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <HAL_DMA_Init+0x150>)
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d80f      	bhi.n	8000f52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b4b      	ldr	r3, [pc, #300]	; (8001068 <HAL_DMA_Init+0x154>)
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	; (800106c <HAL_DMA_Init+0x158>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	091b      	lsrs	r3, r3, #4
 8000f44:	009a      	lsls	r2, r3, #2
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a48      	ldr	r2, [pc, #288]	; (8001070 <HAL_DMA_Init+0x15c>)
 8000f4e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f50:	e00e      	b.n	8000f70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b46      	ldr	r3, [pc, #280]	; (8001074 <HAL_DMA_Init+0x160>)
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a43      	ldr	r2, [pc, #268]	; (800106c <HAL_DMA_Init+0x158>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	091b      	lsrs	r3, r3, #4
 8000f64:	009a      	lsls	r2, r3, #2
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a42      	ldr	r2, [pc, #264]	; (8001078 <HAL_DMA_Init+0x164>)
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2202      	movs	r2, #2
 8000f74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fca:	d039      	beq.n	8001040 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a27      	ldr	r2, [pc, #156]	; (8001070 <HAL_DMA_Init+0x15c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d11a      	bne.n	800100c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <HAL_DMA_Init+0x168>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f003 031c 	and.w	r3, r3, #28
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4924      	ldr	r1, [pc, #144]	; (800107c <HAL_DMA_Init+0x168>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_DMA_Init+0x168>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6859      	ldr	r1, [r3, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffc:	f003 031c 	and.w	r3, r3, #28
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	491d      	ldr	r1, [pc, #116]	; (800107c <HAL_DMA_Init+0x168>)
 8001006:	4313      	orrs	r3, r2
 8001008:	600b      	str	r3, [r1, #0]
 800100a:	e019      	b.n	8001040 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_DMA_Init+0x16c>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001014:	f003 031c 	and.w	r3, r3, #28
 8001018:	210f      	movs	r1, #15
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	4917      	ldr	r1, [pc, #92]	; (8001080 <HAL_DMA_Init+0x16c>)
 8001022:	4013      	ands	r3, r2
 8001024:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_DMA_Init+0x16c>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6859      	ldr	r1, [r3, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f003 031c 	and.w	r3, r3, #28
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	4911      	ldr	r1, [pc, #68]	; (8001080 <HAL_DMA_Init+0x16c>)
 800103c:	4313      	orrs	r3, r2
 800103e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40020407 	.word	0x40020407
 8001068:	bffdfff8 	.word	0xbffdfff8
 800106c:	cccccccd 	.word	0xcccccccd
 8001070:	40020000 	.word	0x40020000
 8001074:	bffdfbf8 	.word	0xbffdfbf8
 8001078:	40020400 	.word	0x40020400
 800107c:	400200a8 	.word	0x400200a8
 8001080:	400204a8 	.word	0x400204a8

08001084 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800109c:	2b01      	cmp	r3, #1
 800109e:	d101      	bne.n	80010a4 <HAL_DMA_Start_IT+0x20>
 80010a0:	2302      	movs	r3, #2
 80010a2:	e04b      	b.n	800113c <HAL_DMA_Start_IT+0xb8>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d13a      	bne.n	800112e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2202      	movs	r2, #2
 80010bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2200      	movs	r2, #0
 80010c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0201 	bic.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 f92f 	bl	8001340 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 020e 	orr.w	r2, r2, #14
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e00f      	b.n	800111c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0204 	bic.w	r2, r2, #4
 800110a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 020a 	orr.w	r2, r2, #10
 800111a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0201 	orr.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	e005      	b.n	800113a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001136:	2302      	movs	r3, #2
 8001138:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800113a:	7dfb      	ldrb	r3, [r7, #23]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d005      	beq.n	8001168 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2204      	movs	r2, #4
 8001160:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	e029      	b.n	80011bc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 020e 	bic.w	r2, r2, #14
 8001176:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0201 	bic.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f003 021c 	and.w	r2, r3, #28
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	4798      	blx	r3
    }
  }
  return status;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f003 031c 	and.w	r3, r3, #28
 80011e6:	2204      	movs	r2, #4
 80011e8:	409a      	lsls	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d026      	beq.n	8001240 <HAL_DMA_IRQHandler+0x7a>
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d021      	beq.n	8001240 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	2b00      	cmp	r3, #0
 8001208:	d107      	bne.n	800121a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0204 	bic.w	r2, r2, #4
 8001218:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f003 021c 	and.w	r2, r3, #28
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	2104      	movs	r1, #4
 8001228:	fa01 f202 	lsl.w	r2, r1, r2
 800122c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	2b00      	cmp	r3, #0
 8001234:	d071      	beq.n	800131a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800123e:	e06c      	b.n	800131a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	f003 031c 	and.w	r3, r3, #28
 8001248:	2202      	movs	r2, #2
 800124a:	409a      	lsls	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d02e      	beq.n	80012b2 <HAL_DMA_IRQHandler+0xec>
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d029      	beq.n	80012b2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10b      	bne.n	8001284 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 020a 	bic.w	r2, r2, #10
 800127a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	f003 021c 	and.w	r2, r3, #28
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	2102      	movs	r1, #2
 8001292:	fa01 f202 	lsl.w	r2, r1, r2
 8001296:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d038      	beq.n	800131a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80012b0:	e033      	b.n	800131a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f003 031c 	and.w	r3, r3, #28
 80012ba:	2208      	movs	r2, #8
 80012bc:	409a      	lsls	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d02a      	beq.n	800131c <HAL_DMA_IRQHandler+0x156>
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d025      	beq.n	800131c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 020e 	bic.w	r2, r2, #14
 80012de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	f003 021c 	and.w	r2, r3, #28
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130e:	2b00      	cmp	r3, #0
 8001310:	d004      	beq.n	800131c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800131a:	bf00      	nop
 800131c:	bf00      	nop
}
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001332:	b2db      	uxtb	r3, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f003 021c 	and.w	r2, r3, #28
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	2101      	movs	r1, #1
 800135c:	fa01 f202 	lsl.w	r2, r1, r2
 8001360:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b10      	cmp	r3, #16
 8001370:	d108      	bne.n	8001384 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001382:	e007      	b.n	8001394 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	60da      	str	r2, [r3, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ae:	e17f      	b.n	80016b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2101      	movs	r1, #1
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	4013      	ands	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8171 	beq.w	80016aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d00b      	beq.n	80013e8 <HAL_GPIO_Init+0x48>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d007      	beq.n	80013e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013dc:	2b11      	cmp	r3, #17
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b12      	cmp	r3, #18
 80013e6:	d130      	bne.n	800144a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800141e:	2201      	movs	r2, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	f003 0201 	and.w	r2, r3, #1
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b03      	cmp	r3, #3
 8001454:	d118      	bne.n	8001488 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800145c:	2201      	movs	r2, #1
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	08db      	lsrs	r3, r3, #3
 8001472:	f003 0201 	and.w	r2, r3, #1
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x128>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b12      	cmp	r3, #18
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	6939      	ldr	r1, [r7, #16]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80ac 	beq.w	80016aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <HAL_GPIO_Init+0x330>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	4a5e      	ldr	r2, [pc, #376]	; (80016d0 <HAL_GPIO_Init+0x330>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6613      	str	r3, [r2, #96]	; 0x60
 800155e:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <HAL_GPIO_Init+0x330>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800156a:	4a5a      	ldr	r2, [pc, #360]	; (80016d4 <HAL_GPIO_Init+0x334>)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001594:	d025      	beq.n	80015e2 <HAL_GPIO_Init+0x242>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4f      	ldr	r2, [pc, #316]	; (80016d8 <HAL_GPIO_Init+0x338>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01f      	beq.n	80015de <HAL_GPIO_Init+0x23e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4e      	ldr	r2, [pc, #312]	; (80016dc <HAL_GPIO_Init+0x33c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_GPIO_Init+0x23a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4d      	ldr	r2, [pc, #308]	; (80016e0 <HAL_GPIO_Init+0x340>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x236>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4c      	ldr	r2, [pc, #304]	; (80016e4 <HAL_GPIO_Init+0x344>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x232>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4b      	ldr	r2, [pc, #300]	; (80016e8 <HAL_GPIO_Init+0x348>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x22e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4a      	ldr	r2, [pc, #296]	; (80016ec <HAL_GPIO_Init+0x34c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x22a>
 80015c6:	2306      	movs	r3, #6
 80015c8:	e00c      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015ca:	2307      	movs	r3, #7
 80015cc:	e00a      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015ce:	2305      	movs	r3, #5
 80015d0:	e008      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e004      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015e2:	2300      	movs	r3, #0
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	4093      	lsls	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015f4:	4937      	ldr	r1, [pc, #220]	; (80016d4 <HAL_GPIO_Init+0x334>)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_GPIO_Init+0x350>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001626:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <HAL_GPIO_Init+0x350>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <HAL_GPIO_Init+0x350>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001650:	4a27      	ldr	r2, [pc, #156]	; (80016f0 <HAL_GPIO_Init+0x350>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <HAL_GPIO_Init+0x350>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800167a:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <HAL_GPIO_Init+0x350>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_GPIO_Init+0x350>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016a4:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <HAL_GPIO_Init+0x350>)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f47f ae78 	bne.w	80013b0 <HAL_GPIO_Init+0x10>
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000
 80016d8:	48000400 	.word	0x48000400
 80016dc:	48000800 	.word	0x48000800
 80016e0:	48000c00 	.word	0x48000c00
 80016e4:	48001000 	.word	0x48001000
 80016e8:	48001400 	.word	0x48001400
 80016ec:	48001800 	.word	0x48001800
 80016f0:	40010400 	.word	0x40010400

080016f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	887b      	ldrh	r3, [r7, #2]
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e001      	b.n	8001716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e081      	b.n	800183a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff f950 	bl	80009f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2224      	movs	r2, #36	; 0x24
 8001754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001774:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001784:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	e006      	b.n	80017ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d104      	bne.n	80017be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	ea42 0103 	orr.w	r1, r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	021a      	lsls	r2, r3, #8
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69d9      	ldr	r1, [r3, #28]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1a      	ldr	r2, [r3, #32]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2220      	movs	r2, #32
 8001826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4603      	mov	r3, r0
 8001854:	817b      	strh	r3, [r7, #10]
 8001856:	460b      	mov	r3, r1
 8001858:	813b      	strh	r3, [r7, #8]
 800185a:	4613      	mov	r3, r2
 800185c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b20      	cmp	r3, #32
 8001868:	f040 80d5 	bne.w	8001a16 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 800186c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <HAL_I2C_Mem_Write_DMA+0x34>
 8001872:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001874:	2b00      	cmp	r3, #0
 8001876:	d105      	bne.n	8001884 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0c9      	b.n	8001a18 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800188e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001892:	d101      	bne.n	8001898 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8001894:	2302      	movs	r3, #2
 8001896:	e0bf      	b.n	8001a18 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_I2C_Mem_Write_DMA+0x62>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e0b8      	b.n	8001a18 <HAL_I2C_Mem_Write_DMA+0x1d4>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018ae:	f7ff fa43 	bl	8000d38 <HAL_GetTick>
 80018b2:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2221      	movs	r2, #33	; 0x21
 80018b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2240      	movs	r2, #64	; 0x40
 80018c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80018d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4a51      	ldr	r2, [pc, #324]	; (8001a24 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 80018e0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2bff      	cmp	r3, #255	; 0xff
 80018ea:	d906      	bls.n	80018fa <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	22ff      	movs	r2, #255	; 0xff
 80018f0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80018f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	e007      	b.n	800190a <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001904:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001908:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800190a:	88f8      	ldrh	r0, [r7, #6]
 800190c:	893a      	ldrh	r2, [r7, #8]
 800190e:	8979      	ldrh	r1, [r7, #10]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	2319      	movs	r3, #25
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	4603      	mov	r3, r0
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 fcec 	bl	80022f8 <I2C_RequestMemoryWrite>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e072      	b.n	8001a18 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001936:	2b00      	cmp	r3, #0
 8001938:	d020      	beq.n	800197c <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193e:	4a3a      	ldr	r2, [pc, #232]	; (8001a28 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	4a39      	ldr	r2, [pc, #228]	; (8001a2c <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8001948:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194e:	2200      	movs	r2, #0
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001956:	2200      	movs	r2, #0
 8001958:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800195e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3328      	adds	r3, #40	; 0x28
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196c:	f7ff fb8a 	bl	8001084 <HAL_DMA_Start_IT>
 8001970:	4603      	mov	r3, r0
 8001972:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d139      	bne.n	80019ee <HAL_I2C_Mem_Write_DMA+0x1aa>
 800197a:	e013      	b.n	80019a4 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e039      	b.n	8001a18 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	8979      	ldrh	r1, [r7, #10]
 80019ac:	2300      	movs	r3, #0
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f001 fac0 	bl	8002f38 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80019d2:	2110      	movs	r1, #16
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f001 fadd 	bl	8002f94 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019e8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e014      	b.n	8001a18 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f043 0210 	orr.w	r2, r3, #16
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8001a16:	2302      	movs	r3, #2
  }
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	ffff0000 	.word	0xffff0000
 8001a24:	08001f51 	.word	0x08001f51
 8001a28:	08002c6b 	.word	0x08002c6b
 8001a2c:	08002d01 	.word	0x08002d01

08001a30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	f040 80f1 	bne.w	8001c34 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a60:	d101      	bne.n	8001a66 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001a62:	2302      	movs	r3, #2
 8001a64:	e0e7      	b.n	8001c36 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_I2C_IsDeviceReady+0x44>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e0e0      	b.n	8001c36 <HAL_I2C_IsDeviceReady+0x206>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d107      	bne.n	8001aa2 <HAL_I2C_IsDeviceReady+0x72>
 8001a92:	897b      	ldrh	r3, [r7, #10]
 8001a94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001aa0:	e004      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x7c>
 8001aa2:	897b      	ldrh	r3, [r7, #10]
 8001aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aa8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001ab2:	f7ff f941 	bl	8000d38 <HAL_GetTick>
 8001ab6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	bf0c      	ite	eq
 8001ac6:	2301      	moveq	r3, #1
 8001ac8:	2300      	movne	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b10      	cmp	r3, #16
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ae4:	e034      	b.n	8001b50 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d01a      	beq.n	8001b24 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001aee:	f7ff f923 	bl	8000d38 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d302      	bcc.n	8001b04 <HAL_I2C_IsDeviceReady+0xd4>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10f      	bne.n	8001b24 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b10:	f043 0220 	orr.w	r2, r3, #32
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e088      	b.n	8001c36 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	bf0c      	ite	eq
 8001b32:	2301      	moveq	r3, #1
 8001b34:	2300      	movne	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b50:	7ffb      	ldrb	r3, [r7, #31]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <HAL_I2C_IsDeviceReady+0x12c>
 8001b56:	7fbb      	ldrb	r3, [r7, #30]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0c4      	beq.n	8001ae6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	d01a      	beq.n	8001ba0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2200      	movs	r2, #0
 8001b72:	2120      	movs	r1, #32
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f001 f8f8 	bl	8002d6a <I2C_WaitOnFlagUntilTimeout>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e058      	b.n	8001c36 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e04a      	b.n	8001c36 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2120      	movs	r1, #32
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f001 f8dd 	bl	8002d6a <I2C_WaitOnFlagUntilTimeout>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e03d      	b.n	8001c36 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d118      	bne.n	8001c04 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001be0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2200      	movs	r2, #0
 8001bea:	2120      	movs	r1, #32
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f001 f8bc 	bl	8002d6a <I2C_WaitOnFlagUntilTimeout>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e01c      	b.n	8001c36 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2220      	movs	r2, #32
 8001c02:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	f63f af3b 	bhi.w	8001a8a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
  }
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3720      	adds	r7, #32
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	4798      	blx	r3
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70fb      	strb	r3, [r7, #3]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d3c:	b2db      	uxtb	r3, r3
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <I2C_Slave_ISR_IT+0x24>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e0ec      	b.n	8001f48 <I2C_Slave_ISR_IT+0x1fe>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <I2C_Slave_ISR_IT+0x4c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001d8e:	6939      	ldr	r1, [r7, #16]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fcef 	bl	8002774 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d04d      	beq.n	8001e3e <I2C_Slave_ISR_IT+0xf4>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d047      	beq.n	8001e3e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d128      	bne.n	8001e0a <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b28      	cmp	r3, #40	; 0x28
 8001dc2:	d108      	bne.n	8001dd6 <I2C_Slave_ISR_IT+0x8c>
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dca:	d104      	bne.n	8001dd6 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001dcc:	6939      	ldr	r1, [r7, #16]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 fdda 	bl	8002988 <I2C_ITListenCplt>
 8001dd4:	e032      	b.n	8001e3c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b29      	cmp	r3, #41	; 0x29
 8001de0:	d10e      	bne.n	8001e00 <I2C_Slave_ISR_IT+0xb6>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001de8:	d00a      	beq.n	8001e00 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2210      	movs	r2, #16
 8001df0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 ff15 	bl	8002c22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 fb92 	bl	8002522 <I2C_ITSlaveSeqCplt>
 8001dfe:	e01d      	b.n	8001e3c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2210      	movs	r2, #16
 8001e06:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001e08:	e096      	b.n	8001f38 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2210      	movs	r2, #16
 8001e10:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f043 0204 	orr.w	r2, r3, #4
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <I2C_Slave_ISR_IT+0xe4>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2a:	f040 8085 	bne.w	8001f38 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4619      	mov	r1, r3
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fdfd 	bl	8002a34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001e3a:	e07d      	b.n	8001f38 <I2C_Slave_ISR_IT+0x1ee>
 8001e3c:	e07c      	b.n	8001f38 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d030      	beq.n	8001eac <I2C_Slave_ISR_IT+0x162>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d02a      	beq.n	8001eac <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d018      	beq.n	8001e92 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d14f      	bne.n	8001f3c <I2C_Slave_ISR_IT+0x1f2>
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ea2:	d04b      	beq.n	8001f3c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 fb3c 	bl	8002522 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001eaa:	e047      	b.n	8001f3c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	08db      	lsrs	r3, r3, #3
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	08db      	lsrs	r3, r3, #3
 8001ebc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001ec4:	6939      	ldr	r1, [r7, #16]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fa6a 	bl	80023a0 <I2C_ITAddrCplt>
 8001ecc:	e037      	b.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d031      	beq.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	085b      	lsrs	r3, r3, #1
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d02b      	beq.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d018      	beq.n	8001f22 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8001f20:	e00d      	b.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f28:	d002      	beq.n	8001f30 <I2C_Slave_ISR_IT+0x1e6>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d106      	bne.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 faf6 	bl	8002522 <I2C_ITSlaveSeqCplt>
 8001f36:	e002      	b.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001f38:	bf00      	nop
 8001f3a:	e000      	b.n	8001f3e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001f3c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <I2C_Master_ISR_DMA+0x1a>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e0e1      	b.n	800212e <I2C_Master_ISR_DMA+0x1de>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d017      	beq.n	8001fae <I2C_Master_ISR_DMA+0x5e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d011      	beq.n	8001fae <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2210      	movs	r2, #16
 8001f90:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f043 0204 	orr.w	r2, r3, #4
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001f9e:	2120      	movs	r1, #32
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fff7 	bl	8002f94 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 fe3b 	bl	8002c22 <I2C_Flush_TXDR>
 8001fac:	e0ba      	b.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	09db      	lsrs	r3, r3, #7
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d072      	beq.n	80020a0 <I2C_Master_ISR_DMA+0x150>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	099b      	lsrs	r3, r3, #6
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d06c      	beq.n	80020a0 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d04e      	beq.n	800207e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fec:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2bff      	cmp	r3, #255	; 0xff
 8001ff6:	d906      	bls.n	8002006 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	22ff      	movs	r2, #255	; 0xff
 8001ffc:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001ffe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	e010      	b.n	8002028 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002018:	d003      	beq.n	8002022 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e002      	b.n	8002028 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002026:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202c:	b2da      	uxtb	r2, r3
 800202e:	8a79      	ldrh	r1, [r7, #18]
 8002030:	2300      	movs	r3, #0
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 ff7e 	bl	8002f38 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b22      	cmp	r3, #34	; 0x22
 8002058:	d108      	bne.n	800206c <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002068:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800206a:	e05b      	b.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800207a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800207c:	e052      	b.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800208c:	d003      	beq.n	8002096 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fa0a 	bl	80024a8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002094:	e046      	b.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002096:	2140      	movs	r1, #64	; 0x40
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 fccb 	bl	8002a34 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800209e:	e041      	b.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d029      	beq.n	8002100 <I2C_Master_ISR_DMA+0x1b0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	099b      	lsrs	r3, r3, #6
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d023      	beq.n	8002100 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d119      	bne.n	80020f6 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020d0:	d027      	beq.n	8002122 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020da:	d108      	bne.n	80020ee <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ea:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80020ec:	e019      	b.n	8002122 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f9da 	bl	80024a8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80020f4:	e015      	b.n	8002122 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80020f6:	2140      	movs	r1, #64	; 0x40
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 fc9b 	bl	8002a34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80020fe:	e010      	b.n	8002122 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fa60 	bl	80025e0 <I2C_ITMasterCplt>
 8002120:	e000      	b.n	8002124 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002122:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b088      	sub	sp, #32
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <I2C_Slave_ISR_DMA+0x24>
 8002156:	2302      	movs	r3, #2
 8002158:	e0c9      	b.n	80022ee <I2C_Slave_ISR_DMA+0x1b8>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <I2C_Slave_ISR_DMA+0x4c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	095b      	lsrs	r3, r3, #5
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 faf9 	bl	8002774 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 809a 	beq.w	80022c4 <I2C_Slave_ISR_DMA+0x18e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 8093 	beq.w	80022c4 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0b9b      	lsrs	r3, r3, #14
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d105      	bne.n	80021b6 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0bdb      	lsrs	r3, r3, #15
 80021ae:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d07f      	beq.n	80022b6 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00d      	beq.n	80021da <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0bdb      	lsrs	r3, r3, #15
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80021d6:	2301      	movs	r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0b9b      	lsrs	r3, r3, #14
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80021fa:	2301      	movs	r3, #1
 80021fc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d128      	bne.n	8002256 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b28      	cmp	r3, #40	; 0x28
 800220e:	d108      	bne.n	8002222 <I2C_Slave_ISR_DMA+0xec>
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002216:	d104      	bne.n	8002222 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fbb4 	bl	8002988 <I2C_ITListenCplt>
 8002220:	e048      	b.n	80022b4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b29      	cmp	r3, #41	; 0x29
 800222c:	d10e      	bne.n	800224c <I2C_Slave_ISR_DMA+0x116>
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002234:	d00a      	beq.n	800224c <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2210      	movs	r2, #16
 800223c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 fcef 	bl	8002c22 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f96c 	bl	8002522 <I2C_ITSlaveSeqCplt>
 800224a:	e033      	b.n	80022b4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2210      	movs	r2, #16
 8002252:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002254:	e034      	b.n	80022c0 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2210      	movs	r2, #16
 800225c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f043 0204 	orr.w	r2, r3, #4
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002270:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <I2C_Slave_ISR_DMA+0x14a>
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800227e:	d11f      	bne.n	80022c0 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002280:	7dfb      	ldrb	r3, [r7, #23]
 8002282:	2b21      	cmp	r3, #33	; 0x21
 8002284:	d002      	beq.n	800228c <I2C_Slave_ISR_DMA+0x156>
 8002286:	7dfb      	ldrb	r3, [r7, #23]
 8002288:	2b29      	cmp	r3, #41	; 0x29
 800228a:	d103      	bne.n	8002294 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2221      	movs	r2, #33	; 0x21
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
 8002292:	e008      	b.n	80022a6 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002294:	7dfb      	ldrb	r3, [r7, #23]
 8002296:	2b22      	cmp	r3, #34	; 0x22
 8002298:	d002      	beq.n	80022a0 <I2C_Slave_ISR_DMA+0x16a>
 800229a:	7dfb      	ldrb	r3, [r7, #23]
 800229c:	2b2a      	cmp	r3, #42	; 0x2a
 800229e:	d102      	bne.n	80022a6 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2222      	movs	r2, #34	; 0x22
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4619      	mov	r1, r3
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fbc1 	bl	8002a34 <I2C_ITError>
      if (treatdmanack == 1U)
 80022b2:	e005      	b.n	80022c0 <I2C_Slave_ISR_DMA+0x18a>
 80022b4:	e004      	b.n	80022c0 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2210      	movs	r2, #16
 80022bc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80022be:	e011      	b.n	80022e4 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80022c0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80022c2:	e00f      	b.n	80022e4 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	08db      	lsrs	r3, r3, #3
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d009      	beq.n	80022e4 <I2C_Slave_ISR_DMA+0x1ae>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	08db      	lsrs	r3, r3, #3
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f85e 	bl	80023a0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	4608      	mov	r0, r1
 8002302:	4611      	mov	r1, r2
 8002304:	461a      	mov	r2, r3
 8002306:	4603      	mov	r3, r0
 8002308:	817b      	strh	r3, [r7, #10]
 800230a:	460b      	mov	r3, r1
 800230c:	813b      	strh	r3, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	8979      	ldrh	r1, [r7, #10]
 8002318:	4b20      	ldr	r3, [pc, #128]	; (800239c <I2C_RequestMemoryWrite+0xa4>)
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fe09 	bl	8002f38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	69b9      	ldr	r1, [r7, #24]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fd5d 	bl	8002dea <I2C_WaitOnTXISFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e02c      	b.n	8002394 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002340:	893b      	ldrh	r3, [r7, #8]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
 800234a:	e015      	b.n	8002378 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800234c:	893b      	ldrh	r3, [r7, #8]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	b29b      	uxth	r3, r3
 8002352:	b2da      	uxtb	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	69b9      	ldr	r1, [r7, #24]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fd43 	bl	8002dea <I2C_WaitOnTXISFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e012      	b.n	8002394 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800236e:	893b      	ldrh	r3, [r7, #8]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2200      	movs	r2, #0
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fcf1 	bl	8002d6a <I2C_WaitOnFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	80002000 	.word	0x80002000

080023a0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023b6:	2b28      	cmp	r3, #40	; 0x28
 80023b8:	d16a      	bne.n	8002490 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80023d8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80023f4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d138      	bne.n	8002470 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80023fe:	897b      	ldrh	r3, [r7, #10]
 8002400:	09db      	lsrs	r3, r3, #7
 8002402:	b29a      	uxth	r2, r3
 8002404:	89bb      	ldrh	r3, [r7, #12]
 8002406:	4053      	eors	r3, r2
 8002408:	b29b      	uxth	r3, r3
 800240a:	f003 0306 	and.w	r3, r3, #6
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11c      	bne.n	800244c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002412:	897b      	ldrh	r3, [r7, #10]
 8002414:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002424:	2b02      	cmp	r3, #2
 8002426:	d13b      	bne.n	80024a0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2208      	movs	r2, #8
 8002434:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800243e:	89ba      	ldrh	r2, [r7, #12]
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	4619      	mov	r1, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff fc3c 	bl	8001cc2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800244a:	e029      	b.n	80024a0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800244c:	893b      	ldrh	r3, [r7, #8]
 800244e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fe01 	bl	800305c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002462:	89ba      	ldrh	r2, [r7, #12]
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff fc2a 	bl	8001cc2 <HAL_I2C_AddrCallback>
}
 800246e:	e017      	b.n	80024a0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002470:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fdf1 	bl	800305c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002482:	89ba      	ldrh	r2, [r7, #12]
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff fc1a 	bl	8001cc2 <HAL_I2C_AddrCallback>
}
 800248e:	e007      	b.n	80024a0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2208      	movs	r2, #8
 8002496:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b21      	cmp	r3, #33	; 0x21
 80024c2:	d115      	bne.n	80024f0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2211      	movs	r2, #17
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024d8:	2101      	movs	r1, #1
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fdbe 	bl	800305c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff fbc2 	bl	8001c72 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80024ee:	e014      	b.n	800251a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2212      	movs	r2, #18
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002504:	2102      	movs	r1, #2
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fda8 	bl	800305c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff fbb6 	bl	8001c86 <HAL_I2C_MasterRxCpltCallback>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	0b9b      	lsrs	r3, r3, #14
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e00d      	b.n	8002574 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	0bdb      	lsrs	r3, r3, #15
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002572:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b29      	cmp	r3, #41	; 0x29
 800257e:	d112      	bne.n	80025a6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2228      	movs	r2, #40	; 0x28
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2221      	movs	r2, #33	; 0x21
 800258c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800258e:	2101      	movs	r1, #1
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fd63 	bl	800305c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fb7b 	bl	8001c9a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80025a4:	e017      	b.n	80025d6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b2a      	cmp	r3, #42	; 0x2a
 80025b0:	d111      	bne.n	80025d6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2228      	movs	r2, #40	; 0x28
 80025b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2222      	movs	r2, #34	; 0x22
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025c0:	2102      	movs	r1, #2
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fd4a 	bl	800305c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff fb6c 	bl	8001cae <HAL_I2C_SlaveRxCpltCallback>
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2220      	movs	r2, #32
 80025f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b21      	cmp	r3, #33	; 0x21
 8002600:	d107      	bne.n	8002612 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002602:	2101      	movs	r1, #1
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fd29 	bl	800305c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2211      	movs	r2, #17
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
 8002610:	e00c      	b.n	800262c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b22      	cmp	r3, #34	; 0x22
 800261c:	d106      	bne.n	800262c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800261e:	2102      	movs	r1, #2
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fd1b 	bl	800305c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2212      	movs	r2, #18
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6859      	ldr	r1, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b4d      	ldr	r3, [pc, #308]	; (800276c <I2C_ITMasterCplt+0x18c>)
 8002638:	400b      	ands	r3, r1
 800263a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4a      	ldr	r2, [pc, #296]	; (8002770 <I2C_ITMasterCplt+0x190>)
 8002646:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2210      	movs	r2, #16
 800265a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	f043 0204 	orr.w	r2, r3, #4
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b60      	cmp	r3, #96	; 0x60
 8002672:	d10b      	bne.n	800268c <I2C_ITMasterCplt+0xac>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	b2db      	uxtb	r3, r3
 8002688:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800268a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fac8 	bl	8002c22 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b60      	cmp	r3, #96	; 0x60
 80026a2:	d002      	beq.n	80026aa <I2C_ITMasterCplt+0xca>
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d006      	beq.n	80026b8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4619      	mov	r1, r3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f9bf 	bl	8002a34 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80026b6:	e054      	b.n	8002762 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b21      	cmp	r3, #33	; 0x21
 80026c2:	d124      	bne.n	800270e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b40      	cmp	r3, #64	; 0x40
 80026dc:	d10b      	bne.n	80026f6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f007 f8d2 	bl	8009898 <HAL_I2C_MemTxCpltCallback>
}
 80026f4:	e035      	b.n	8002762 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff fab3 	bl	8001c72 <HAL_I2C_MasterTxCpltCallback>
}
 800270c:	e029      	b.n	8002762 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b22      	cmp	r3, #34	; 0x22
 8002718:	d123      	bne.n	8002762 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d10b      	bne.n	800274c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fad4 	bl	8001cf2 <HAL_I2C_MemRxCpltCallback>
}
 800274a:	e00a      	b.n	8002762 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff fa92 	bl	8001c86 <HAL_I2C_MasterRxCpltCallback>
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	fe00e800 	.word	0xfe00e800
 8002770:	ffff0000 	.word	0xffff0000

08002774 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002790:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2220      	movs	r2, #32
 8002798:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	2b21      	cmp	r3, #33	; 0x21
 800279e:	d002      	beq.n	80027a6 <I2C_ITSlaveCplt+0x32>
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b29      	cmp	r3, #41	; 0x29
 80027a4:	d108      	bne.n	80027b8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80027a6:	f248 0101 	movw	r1, #32769	; 0x8001
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fc56 	bl	800305c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2221      	movs	r2, #33	; 0x21
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
 80027b6:	e00d      	b.n	80027d4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b22      	cmp	r3, #34	; 0x22
 80027bc:	d002      	beq.n	80027c4 <I2C_ITSlaveCplt+0x50>
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	2b2a      	cmp	r3, #42	; 0x2a
 80027c2:	d107      	bne.n	80027d4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80027c4:	f248 0102 	movw	r1, #32770	; 0x8002
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fc47 	bl	800305c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2222      	movs	r2, #34	; 0x22
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027e2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4b64      	ldr	r3, [pc, #400]	; (8002980 <I2C_ITSlaveCplt+0x20c>)
 80027f0:	400b      	ands	r3, r1
 80027f2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fa14 	bl	8002c22 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	0b9b      	lsrs	r3, r3, #14
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d013      	beq.n	800282e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002814:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	2b00      	cmp	r3, #0
 800281c:	d020      	beq.n	8002860 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800282c:	e018      	b.n	8002860 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	0bdb      	lsrs	r3, r3, #15
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d012      	beq.n	8002860 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002848:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	b29a      	uxth	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f023 0304 	bic.w	r3, r3, #4
 8002872:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00c      	beq.n	80028ae <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	f043 0204 	orr.w	r2, r3, #4
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d010      	beq.n	80028fc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4619      	mov	r1, r3
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f8a7 	bl	8002a34 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b28      	cmp	r3, #40	; 0x28
 80028f0:	d141      	bne.n	8002976 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80028f2:	6979      	ldr	r1, [r7, #20]
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f847 	bl	8002988 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028fa:	e03c      	b.n	8002976 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002904:	d014      	beq.n	8002930 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff fe0b 	bl	8002522 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <I2C_ITSlaveCplt+0x210>)
 8002910:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff f9d8 	bl	8001cde <HAL_I2C_ListenCpltCallback>
}
 800292e:	e022      	b.n	8002976 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b22      	cmp	r3, #34	; 0x22
 800293a:	d10e      	bne.n	800295a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff f9ab 	bl	8001cae <HAL_I2C_SlaveRxCpltCallback>
}
 8002958:	e00d      	b.n	8002976 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff f992 	bl	8001c9a <HAL_I2C_SlaveTxCpltCallback>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	fe00e800 	.word	0xfe00e800
 8002984:	ffff0000 	.word	0xffff0000

08002988 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a26      	ldr	r2, [pc, #152]	; (8002a30 <I2C_ITListenCplt+0xa8>)
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d022      	beq.n	8002a06 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f043 0204 	orr.w	r2, r3, #4
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a06:	f248 0103 	movw	r1, #32771	; 0x8003
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fb26 	bl	800305c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2210      	movs	r2, #16
 8002a16:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff f95c 	bl	8001cde <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	ffff0000 	.word	0xffff0000

08002a34 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a5d      	ldr	r2, [pc, #372]	; (8002bc8 <I2C_ITError+0x194>)
 8002a52:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2b28      	cmp	r3, #40	; 0x28
 8002a6a:	d005      	beq.n	8002a78 <I2C_ITError+0x44>
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b29      	cmp	r3, #41	; 0x29
 8002a70:	d002      	beq.n	8002a78 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b2a      	cmp	r3, #42	; 0x2a
 8002a76:	d10b      	bne.n	8002a90 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a78:	2103      	movs	r1, #3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 faee 	bl	800305c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2228      	movs	r2, #40	; 0x28
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a50      	ldr	r2, [pc, #320]	; (8002bcc <I2C_ITError+0x198>)
 8002a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a8e:	e011      	b.n	8002ab4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a90:	f248 0103 	movw	r1, #32771	; 0x8003
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fae1 	bl	800305c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b60      	cmp	r3, #96	; 0x60
 8002aa4:	d003      	beq.n	8002aae <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d039      	beq.n	8002b36 <I2C_ITError+0x102>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b11      	cmp	r3, #17
 8002ac6:	d002      	beq.n	8002ace <I2C_ITError+0x9a>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b21      	cmp	r3, #33	; 0x21
 8002acc:	d133      	bne.n	8002b36 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002adc:	d107      	bne.n	8002aee <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002aec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fc16 	bl	8001324 <HAL_DMA_GetState>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d017      	beq.n	8002b2e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	4a33      	ldr	r2, [pc, #204]	; (8002bd0 <I2C_ITError+0x19c>)
 8002b04:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe fb16 	bl	8001144 <HAL_DMA_Abort_IT>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d04d      	beq.n	8002bba <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b2c:	e045      	b.n	8002bba <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f850 	bl	8002bd4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b34:	e041      	b.n	8002bba <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d039      	beq.n	8002bb2 <I2C_ITError+0x17e>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b12      	cmp	r3, #18
 8002b42:	d002      	beq.n	8002b4a <I2C_ITError+0x116>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b22      	cmp	r3, #34	; 0x22
 8002b48:	d133      	bne.n	8002bb2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b58:	d107      	bne.n	8002b6a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b68:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fbd8 	bl	8001324 <HAL_DMA_GetState>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d017      	beq.n	8002baa <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <I2C_ITError+0x19c>)
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fad8 	bl	8001144 <HAL_DMA_Abort_IT>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d011      	beq.n	8002bbe <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ba8:	e009      	b.n	8002bbe <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f812 	bl	8002bd4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bb0:	e005      	b.n	8002bbe <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f80e 	bl	8002bd4 <I2C_TreatErrorCallback>
  }
}
 8002bb8:	e002      	b.n	8002bc0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bba:	bf00      	nop
 8002bbc:	e000      	b.n	8002bc0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bbe:	bf00      	nop
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	ffff0000 	.word	0xffff0000
 8002bcc:	08001d4b 	.word	0x08001d4b
 8002bd0:	08002d2f 	.word	0x08002d2f

08002bd4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b60      	cmp	r3, #96	; 0x60
 8002be6:	d10e      	bne.n	8002c06 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff f88b 	bl	8001d1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c04:	e009      	b.n	8002c1a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff f876 	bl	8001d06 <HAL_I2C_ErrorCallback>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d103      	bne.n	8002c40 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d007      	beq.n	8002c5e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0201 	orr.w	r2, r2, #1
 8002c5c:	619a      	str	r2, [r3, #24]
  }
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c86:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d104      	bne.n	8002c9c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002c92:	2120      	movs	r1, #32
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f97d 	bl	8002f94 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002c9a:	e02d      	b.n	8002cf8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8002ca4:	441a      	add	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2bff      	cmp	r3, #255	; 0xff
 8002cb2:	d903      	bls.n	8002cbc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	22ff      	movs	r2, #255	; 0xff
 8002cb8:	851a      	strh	r2, [r3, #40]	; 0x28
 8002cba:	e004      	b.n	8002cc6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	4619      	mov	r1, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3328      	adds	r3, #40	; 0x28
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	f7fe f9d2 	bl	8001084 <HAL_DMA_Start_IT>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002ce6:	2110      	movs	r1, #16
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f7ff fea3 	bl	8002a34 <I2C_ITError>
}
 8002cee:	e003      	b.n	8002cf8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002cf0:	2140      	movs	r1, #64	; 0x40
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f94e 	bl	8002f94 <I2C_Enable_IRQ>
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d1c:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002d1e:	2110      	movs	r1, #16
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7ff fe87 	bl	8002a34 <I2C_ITError>
}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	2200      	movs	r2, #0
 8002d4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	2200      	movs	r2, #0
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff ff39 	bl	8002bd4 <I2C_TreatErrorCallback>
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4613      	mov	r3, r2
 8002d78:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d7a:	e022      	b.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d01e      	beq.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d84:	f7fd ffd8 	bl	8000d38 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d302      	bcc.n	8002d9a <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d113      	bne.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00f      	b.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d0cd      	beq.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002df6:	e02c      	b.n	8002e52 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f835 	bl	8002e6c <I2C_IsAcknowledgeFailed>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e02a      	b.n	8002e62 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d01e      	beq.n	8002e52 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e14:	f7fd ff90 	bl	8000d38 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d302      	bcc.n	8002e2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d113      	bne.n	8002e52 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f043 0220 	orr.w	r2, r3, #32
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e007      	b.n	8002e62 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d1cb      	bne.n	8002df8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d151      	bne.n	8002f2a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e86:	e022      	b.n	8002ece <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8e:	d01e      	beq.n	8002ece <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e90:	f7fd ff52 	bl	8000d38 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d302      	bcc.n	8002ea6 <I2C_IsAcknowledgeFailed+0x3a>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d113      	bne.n	8002ece <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f043 0220 	orr.w	r2, r3, #32
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e02e      	b.n	8002f2c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d1d5      	bne.n	8002e88 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7ff fe98 	bl	8002c22 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <I2C_IsAcknowledgeFailed+0xc8>)
 8002efe:	400b      	ands	r3, r1
 8002f00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	f043 0204 	orr.w	r2, r3, #4
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	fe00e800 	.word	0xfe00e800

08002f38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	817b      	strh	r3, [r7, #10]
 8002f46:	4613      	mov	r3, r2
 8002f48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	0d5b      	lsrs	r3, r3, #21
 8002f54:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f58:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <I2C_TransferConfig+0x58>)
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	ea02 0103 	and.w	r1, r2, r3
 8002f62:	897b      	ldrh	r3, [r7, #10]
 8002f64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f68:	7a7b      	ldrb	r3, [r7, #9]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	03ff63ff 	.word	0x03ff63ff

08002f94 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa8:	4a2a      	ldr	r2, [pc, #168]	; (8003054 <I2C_Enable_IRQ+0xc0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002fb2:	4a29      	ldr	r2, [pc, #164]	; (8003058 <I2C_Enable_IRQ+0xc4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d11d      	bne.n	8002ff4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002fb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	da03      	bge.n	8002fc8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002fc6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002fc8:	887b      	ldrh	r3, [r7, #2]
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d103      	bne.n	8002fd6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002fd4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fd6:	887b      	ldrh	r3, [r7, #2]
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d103      	bne.n	8002fe4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fe2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002fe4:	887b      	ldrh	r3, [r7, #2]
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d125      	bne.n	8003036 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002ff2:	e020      	b.n	8003036 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002ff4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	da03      	bge.n	8003004 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003002:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003004:	887b      	ldrh	r3, [r7, #2]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003014:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003016:	887b      	ldrh	r3, [r7, #2]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003026:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003028:	887b      	ldrh	r3, [r7, #2]
 800302a:	2b20      	cmp	r3, #32
 800302c:	d103      	bne.n	8003036 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f043 0320 	orr.w	r3, r3, #32
 8003034:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	430a      	orrs	r2, r1
 8003044:	601a      	str	r2, [r3, #0]
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	08001f51 	.word	0x08001f51
 8003058:	08002137 	.word	0x08002137

0800305c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800306c:	887b      	ldrh	r3, [r7, #2]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00f      	beq.n	8003096 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800307c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800308a:	2b28      	cmp	r3, #40	; 0x28
 800308c:	d003      	beq.n	8003096 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003094:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00f      	beq.n	80030c0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80030a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030b4:	2b28      	cmp	r3, #40	; 0x28
 80030b6:	d003      	beq.n	80030c0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80030be:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80030c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	da03      	bge.n	80030d0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80030ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80030d0:	887b      	ldrh	r3, [r7, #2]
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d103      	bne.n	80030de <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80030de:	887b      	ldrh	r3, [r7, #2]
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d103      	bne.n	80030ec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f043 0320 	orr.w	r3, r3, #32
 80030ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80030ec:	887b      	ldrh	r3, [r7, #2]
 80030ee:	2b40      	cmp	r3, #64	; 0x40
 80030f0:	d103      	bne.n	80030fa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6819      	ldr	r1, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43da      	mvns	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	400a      	ands	r2, r1
 800310a:	601a      	str	r2, [r3, #0]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b20      	cmp	r3, #32
 800312c:	d138      	bne.n	80031a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003138:	2302      	movs	r3, #2
 800313a:	e032      	b.n	80031a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2224      	movs	r2, #36	; 0x24
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800316a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6819      	ldr	r1, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	e000      	b.n	80031a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031a0:	2302      	movs	r3, #2
  }
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d139      	bne.n	8003238 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e033      	b.n	800323a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2224      	movs	r2, #36	; 0x24
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003200:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003254:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6613      	str	r3, [r2, #96]	; 0x60
 800325c:	4b08      	ldr	r3, [pc, #32]	; (8003280 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800325e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4905      	ldr	r1, [pc, #20]	; (8003284 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	40021000 	.word	0x40021000
 8003284:	40010000 	.word	0x40010000

08003288 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40007000 	.word	0x40007000

080032a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b2:	d130      	bne.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b4:	4b23      	ldr	r3, [pc, #140]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c0:	d038      	beq.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032ca:	4a1e      	ldr	r2, [pc, #120]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2232      	movs	r2, #50	; 0x32
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	4a1b      	ldr	r2, [pc, #108]	; (800334c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0c9b      	lsrs	r3, r3, #18
 80032e4:	3301      	adds	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032e8:	e002      	b.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f0:	4b14      	ldr	r3, [pc, #80]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fc:	d102      	bne.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f2      	bne.n	80032ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003310:	d110      	bne.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e00f      	b.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800331e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003322:	d007      	beq.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800332c:	4a05      	ldr	r2, [pc, #20]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800332e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003332:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40007000 	.word	0x40007000
 8003348:	20000000 	.word	0x20000000
 800334c:	431bde83 	.word	0x431bde83

08003350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e3d4      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003362:	4ba1      	ldr	r3, [pc, #644]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800336c:	4b9e      	ldr	r3, [pc, #632]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80e4 	beq.w	800354c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <HAL_RCC_OscConfig+0x4a>
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	f040 808b 	bne.w	80034a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b01      	cmp	r3, #1
 8003396:	f040 8087 	bne.w	80034a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800339a:	4b93      	ldr	r3, [pc, #588]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <HAL_RCC_OscConfig+0x62>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e3ac      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1a      	ldr	r2, [r3, #32]
 80033b6:	4b8c      	ldr	r3, [pc, #560]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <HAL_RCC_OscConfig+0x7c>
 80033c2:	4b89      	ldr	r3, [pc, #548]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ca:	e005      	b.n	80033d8 <HAL_RCC_OscConfig+0x88>
 80033cc:	4b86      	ldr	r3, [pc, #536]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d8:	4293      	cmp	r3, r2
 80033da:	d223      	bcs.n	8003424 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fd5d 	bl	8003ea0 <RCC_SetFlashLatencyFromMSIRange>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e38d      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f0:	4b7d      	ldr	r3, [pc, #500]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a7c      	ldr	r2, [pc, #496]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80033f6:	f043 0308 	orr.w	r3, r3, #8
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	4b7a      	ldr	r3, [pc, #488]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4977      	ldr	r1, [pc, #476]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800340e:	4b76      	ldr	r3, [pc, #472]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	4972      	ldr	r1, [pc, #456]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 800341e:	4313      	orrs	r3, r2
 8003420:	604b      	str	r3, [r1, #4]
 8003422:	e025      	b.n	8003470 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003424:	4b70      	ldr	r3, [pc, #448]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a6f      	ldr	r2, [pc, #444]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 800342a:	f043 0308 	orr.w	r3, r3, #8
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b6d      	ldr	r3, [pc, #436]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	496a      	ldr	r1, [pc, #424]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003442:	4b69      	ldr	r3, [pc, #420]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	4965      	ldr	r1, [pc, #404]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fd1d 	bl	8003ea0 <RCC_SetFlashLatencyFromMSIRange>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e34d      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003470:	f000 fc36 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b5c      	ldr	r3, [pc, #368]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	495a      	ldr	r1, [pc, #360]	; (80035ec <HAL_RCC_OscConfig+0x29c>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
 800348c:	4a58      	ldr	r2, [pc, #352]	; (80035f0 <HAL_RCC_OscConfig+0x2a0>)
 800348e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003490:	4b58      	ldr	r3, [pc, #352]	; (80035f4 <HAL_RCC_OscConfig+0x2a4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd fb3d 	bl	8000b14 <HAL_InitTick>
 800349a:	4603      	mov	r3, r0
 800349c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d052      	beq.n	800354a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	e331      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d032      	beq.n	8003516 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034b0:	4b4d      	ldr	r3, [pc, #308]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a4c      	ldr	r2, [pc, #304]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034bc:	f7fd fc3c 	bl	8000d38 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034c4:	f7fd fc38 	bl	8000d38 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e31a      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034d6:	4b44      	ldr	r3, [pc, #272]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a40      	ldr	r2, [pc, #256]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80034e8:	f043 0308 	orr.w	r3, r3, #8
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	4b3e      	ldr	r3, [pc, #248]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	493b      	ldr	r1, [pc, #236]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003500:	4b39      	ldr	r3, [pc, #228]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	4936      	ldr	r1, [pc, #216]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
 8003514:	e01a      	b.n	800354c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003516:	4b34      	ldr	r3, [pc, #208]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a33      	ldr	r2, [pc, #204]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003522:	f7fd fc09 	bl	8000d38 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800352a:	f7fd fc05 	bl	8000d38 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e2e7      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800353c:	4b2a      	ldr	r3, [pc, #168]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f0      	bne.n	800352a <HAL_RCC_OscConfig+0x1da>
 8003548:	e000      	b.n	800354c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800354a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d074      	beq.n	8003642 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b08      	cmp	r3, #8
 800355c:	d005      	beq.n	800356a <HAL_RCC_OscConfig+0x21a>
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	d10e      	bne.n	8003582 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d10b      	bne.n	8003582 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356a:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d064      	beq.n	8003640 <HAL_RCC_OscConfig+0x2f0>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d160      	bne.n	8003640 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e2c4      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358a:	d106      	bne.n	800359a <HAL_RCC_OscConfig+0x24a>
 800358c:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 8003592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	e01d      	b.n	80035d6 <HAL_RCC_OscConfig+0x286>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a2:	d10c      	bne.n	80035be <HAL_RCC_OscConfig+0x26e>
 80035a4:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80035aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0c      	ldr	r2, [pc, #48]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80035b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	e00b      	b.n	80035d6 <HAL_RCC_OscConfig+0x286>
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a09      	ldr	r2, [pc, #36]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80035c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a06      	ldr	r2, [pc, #24]	; (80035e8 <HAL_RCC_OscConfig+0x298>)
 80035d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01c      	beq.n	8003618 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fd fbab 	bl	8000d38 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e4:	e011      	b.n	800360a <HAL_RCC_OscConfig+0x2ba>
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	08009a5c 	.word	0x08009a5c
 80035f0:	20000000 	.word	0x20000000
 80035f4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fd fb9e 	bl	8000d38 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e280      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360a:	4baf      	ldr	r3, [pc, #700]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x2a8>
 8003616:	e014      	b.n	8003642 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fd fb8e 	bl	8000d38 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003620:	f7fd fb8a 	bl	8000d38 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	; 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e26c      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003632:	4ba5      	ldr	r3, [pc, #660]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x2d0>
 800363e:	e000      	b.n	8003642 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d060      	beq.n	8003710 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b04      	cmp	r3, #4
 8003652:	d005      	beq.n	8003660 <HAL_RCC_OscConfig+0x310>
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b0c      	cmp	r3, #12
 8003658:	d119      	bne.n	800368e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d116      	bne.n	800368e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003660:	4b99      	ldr	r3, [pc, #612]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_OscConfig+0x328>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e249      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b93      	ldr	r3, [pc, #588]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	061b      	lsls	r3, r3, #24
 8003686:	4990      	ldr	r1, [pc, #576]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003688:	4313      	orrs	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800368c:	e040      	b.n	8003710 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d023      	beq.n	80036de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003696:	4b8c      	ldr	r3, [pc, #560]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a8b      	ldr	r2, [pc, #556]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fd fb49 	bl	8000d38 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fd fb45 	bl	8000d38 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e227      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036bc:	4b82      	ldr	r3, [pc, #520]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b7f      	ldr	r3, [pc, #508]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	497c      	ldr	r1, [pc, #496]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
 80036dc:	e018      	b.n	8003710 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b7a      	ldr	r3, [pc, #488]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a79      	ldr	r2, [pc, #484]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 80036e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7fd fb25 	bl	8000d38 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f2:	f7fd fb21 	bl	8000d38 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e203      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003704:	4b70      	ldr	r3, [pc, #448]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d03c      	beq.n	8003796 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01c      	beq.n	800375e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003724:	4b68      	ldr	r3, [pc, #416]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372a:	4a67      	ldr	r2, [pc, #412]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7fd fb00 	bl	8000d38 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373c:	f7fd fafc 	bl	8000d38 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1de      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800374e:	4b5e      	ldr	r3, [pc, #376]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ef      	beq.n	800373c <HAL_RCC_OscConfig+0x3ec>
 800375c:	e01b      	b.n	8003796 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800375e:	4b5a      	ldr	r3, [pc, #360]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003764:	4a58      	ldr	r2, [pc, #352]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376e:	f7fd fae3 	bl	8000d38 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003776:	f7fd fadf 	bl	8000d38 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e1c1      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003788:	4b4f      	ldr	r3, [pc, #316]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 800378a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1ef      	bne.n	8003776 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80a6 	beq.w	80038f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a4:	2300      	movs	r3, #0
 80037a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037a8:	4b47      	ldr	r3, [pc, #284]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b4:	4b44      	ldr	r3, [pc, #272]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	4a43      	ldr	r2, [pc, #268]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037be:	6593      	str	r3, [r2, #88]	; 0x58
 80037c0:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037cc:	2301      	movs	r3, #1
 80037ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d0:	4b3e      	ldr	r3, [pc, #248]	; (80038cc <HAL_RCC_OscConfig+0x57c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d118      	bne.n	800380e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037dc:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <HAL_RCC_OscConfig+0x57c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a3a      	ldr	r2, [pc, #232]	; (80038cc <HAL_RCC_OscConfig+0x57c>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e8:	f7fd faa6 	bl	8000d38 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f0:	f7fd faa2 	bl	8000d38 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e184      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003802:	4b32      	ldr	r3, [pc, #200]	; (80038cc <HAL_RCC_OscConfig+0x57c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d108      	bne.n	8003828 <HAL_RCC_OscConfig+0x4d8>
 8003816:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381c:	4a2a      	ldr	r2, [pc, #168]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003826:	e024      	b.n	8003872 <HAL_RCC_OscConfig+0x522>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b05      	cmp	r3, #5
 800382e:	d110      	bne.n	8003852 <HAL_RCC_OscConfig+0x502>
 8003830:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	4a24      	ldr	r2, [pc, #144]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003840:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	4a20      	ldr	r2, [pc, #128]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003850:	e00f      	b.n	8003872 <HAL_RCC_OscConfig+0x522>
 8003852:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	4a1b      	ldr	r2, [pc, #108]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003862:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 800386a:	f023 0304 	bic.w	r3, r3, #4
 800386e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387a:	f7fd fa5d 	bl	8000d38 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003880:	e00a      	b.n	8003898 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003882:	f7fd fa59 	bl	8000d38 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003890:	4293      	cmp	r3, r2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e139      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_RCC_OscConfig+0x578>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0ed      	beq.n	8003882 <HAL_RCC_OscConfig+0x532>
 80038a6:	e01a      	b.n	80038de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fd fa46 	bl	8000d38 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ae:	e00f      	b.n	80038d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b0:	f7fd fa42 	bl	8000d38 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d906      	bls.n	80038d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e122      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038d0:	4b90      	ldr	r3, [pc, #576]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e8      	bne.n	80038b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038de:	7ffb      	ldrb	r3, [r7, #31]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b8b      	ldr	r3, [pc, #556]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	4a8a      	ldr	r2, [pc, #552]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8108 	beq.w	8003b0a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	2b02      	cmp	r3, #2
 8003900:	f040 80d0 	bne.w	8003aa4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003904:	4b83      	ldr	r3, [pc, #524]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 0203 	and.w	r2, r3, #3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	429a      	cmp	r2, r3
 8003916:	d130      	bne.n	800397a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	3b01      	subs	r3, #1
 8003924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d127      	bne.n	800397a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003934:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d11f      	bne.n	800397a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003944:	2a07      	cmp	r2, #7
 8003946:	bf14      	ite	ne
 8003948:	2201      	movne	r2, #1
 800394a:	2200      	moveq	r2, #0
 800394c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800394e:	4293      	cmp	r3, r2
 8003950:	d113      	bne.n	800397a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	085b      	lsrs	r3, r3, #1
 800395e:	3b01      	subs	r3, #1
 8003960:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d109      	bne.n	800397a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	3b01      	subs	r3, #1
 8003974:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d06e      	beq.n	8003a58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b0c      	cmp	r3, #12
 800397e:	d069      	beq.n	8003a54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003980:	4b64      	ldr	r3, [pc, #400]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d105      	bne.n	8003998 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800398c:	4b61      	ldr	r3, [pc, #388]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0b7      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800399c:	4b5d      	ldr	r3, [pc, #372]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a5c      	ldr	r2, [pc, #368]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 80039a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039a8:	f7fd f9c6 	bl	8000d38 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fd f9c2 	bl	8000d38 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e0a4      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c2:	4b54      	ldr	r3, [pc, #336]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ce:	4b51      	ldr	r3, [pc, #324]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	4b51      	ldr	r3, [pc, #324]	; (8003b18 <HAL_RCC_OscConfig+0x7c8>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039de:	3a01      	subs	r2, #1
 80039e0:	0112      	lsls	r2, r2, #4
 80039e2:	4311      	orrs	r1, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039e8:	0212      	lsls	r2, r2, #8
 80039ea:	4311      	orrs	r1, r2
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039f0:	0852      	lsrs	r2, r2, #1
 80039f2:	3a01      	subs	r2, #1
 80039f4:	0552      	lsls	r2, r2, #21
 80039f6:	4311      	orrs	r1, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039fc:	0852      	lsrs	r2, r2, #1
 80039fe:	3a01      	subs	r2, #1
 8003a00:	0652      	lsls	r2, r2, #25
 8003a02:	4311      	orrs	r1, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a08:	0912      	lsrs	r2, r2, #4
 8003a0a:	0452      	lsls	r2, r2, #17
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	4941      	ldr	r1, [pc, #260]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a14:	4b3f      	ldr	r3, [pc, #252]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a3e      	ldr	r2, [pc, #248]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a20:	4b3c      	ldr	r3, [pc, #240]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a3b      	ldr	r2, [pc, #236]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a2c:	f7fd f984 	bl	8000d38 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fd f980 	bl	8000d38 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e062      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a46:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a52:	e05a      	b.n	8003b0a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e059      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a58:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d152      	bne.n	8003b0a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a64:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2a      	ldr	r2, [pc, #168]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a70:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a7c:	f7fd f95c 	bl	8000d38 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fd f958 	bl	8000d38 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e03a      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x734>
 8003aa2:	e032      	b.n	8003b0a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d02d      	beq.n	8003b06 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a19      	ldr	r2, [pc, #100]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003ab6:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003ac8:	f023 0303 	bic.w	r3, r3, #3
 8003acc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4a10      	ldr	r2, [pc, #64]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003ad4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003adc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fd f92b 	bl	8000d38 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fd f927 	bl	8000d38 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e009      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCC_OscConfig+0x7c4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x796>
 8003b04:	e001      	b.n	8003b0a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	f99d808c 	.word	0xf99d808c

08003b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0c8      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b30:	4b66      	ldr	r3, [pc, #408]	; (8003ccc <HAL_RCC_ClockConfig+0x1b0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d910      	bls.n	8003b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b63      	ldr	r3, [pc, #396]	; (8003ccc <HAL_RCC_ClockConfig+0x1b0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 0207 	bic.w	r2, r3, #7
 8003b46:	4961      	ldr	r1, [pc, #388]	; (8003ccc <HAL_RCC_ClockConfig+0x1b0>)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b5f      	ldr	r3, [pc, #380]	; (8003ccc <HAL_RCC_ClockConfig+0x1b0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0b0      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d04c      	beq.n	8003c06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b74:	4b56      	ldr	r3, [pc, #344]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d121      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e09e      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b8c:	4b50      	ldr	r3, [pc, #320]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d115      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e092      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d107      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ba4:	4b4a      	ldr	r3, [pc, #296]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e086      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb4:	4b46      	ldr	r3, [pc, #280]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e07e      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bc4:	4b42      	ldr	r3, [pc, #264]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f023 0203 	bic.w	r2, r3, #3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	493f      	ldr	r1, [pc, #252]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd6:	f7fd f8af 	bl	8000d38 <HAL_GetTick>
 8003bda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bde:	f7fd f8ab 	bl	8000d38 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e066      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf4:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 020c 	and.w	r2, r3, #12
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d1eb      	bne.n	8003bde <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c12:	4b2f      	ldr	r3, [pc, #188]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	492c      	ldr	r1, [pc, #176]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c24:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <HAL_RCC_ClockConfig+0x1b0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d210      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <HAL_RCC_ClockConfig+0x1b0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 0207 	bic.w	r2, r3, #7
 8003c3a:	4924      	ldr	r1, [pc, #144]	; (8003ccc <HAL_RCC_ClockConfig+0x1b0>)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <HAL_RCC_ClockConfig+0x1b0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e036      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4918      	ldr	r1, [pc, #96]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c7e:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4910      	ldr	r1, [pc, #64]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c92:	f000 f825 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490c      	ldr	r1, [pc, #48]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cae:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fc ff2c 	bl	8000b14 <HAL_InitTick>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cc0:	7afb      	ldrb	r3, [r7, #11]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40022000 	.word	0x40022000
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	08009a5c 	.word	0x08009a5c
 8003cd8:	20000000 	.word	0x20000000
 8003cdc:	20000004 	.word	0x20000004

08003ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	2300      	movs	r3, #0
 8003cec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cee:	4b3e      	ldr	r3, [pc, #248]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf8:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0x34>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d121      	bne.n	8003d52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d11e      	bne.n	8003d52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d14:	4b34      	ldr	r3, [pc, #208]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d20:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	61fb      	str	r3, [r7, #28]
 8003d2e:	e005      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d30:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d3c:	4a2b      	ldr	r2, [pc, #172]	; (8003dec <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10d      	bne.n	8003d68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d102      	bne.n	8003d5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	e004      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d64:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d134      	bne.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d6e:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d003      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d003      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0xac>
 8003d84:	e005      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d86:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d88:	617b      	str	r3, [r7, #20]
      break;
 8003d8a:	e005      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d8e:	617b      	str	r3, [r7, #20]
      break;
 8003d90:	e002      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	617b      	str	r3, [r7, #20]
      break;
 8003d96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d98:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	3301      	adds	r3, #1
 8003da4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	fb02 f203 	mul.w	r2, r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	0e5b      	lsrs	r3, r3, #25
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	3301      	adds	r3, #1
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dd8:	69bb      	ldr	r3, [r7, #24]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3724      	adds	r7, #36	; 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000
 8003dec:	08009a74 	.word	0x08009a74
 8003df0:	00f42400 	.word	0x00f42400
 8003df4:	007a1200 	.word	0x007a1200

08003df8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20000000 	.word	0x20000000

08003e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e14:	f7ff fff0 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	0adb      	lsrs	r3, r3, #11
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	4904      	ldr	r1, [pc, #16]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e26:	5ccb      	ldrb	r3, [r1, r3]
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000
 8003e38:	08009a6c 	.word	0x08009a6c

08003e3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	220f      	movs	r2, #15
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003e4c:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <HAL_RCC_GetClockConfig+0x5c>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0203 	and.w	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003e58:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <HAL_RCC_GetClockConfig+0x5c>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <HAL_RCC_GetClockConfig+0x5c>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_GetClockConfig+0x5c>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	08db      	lsrs	r3, r3, #3
 8003e76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <HAL_RCC_GetClockConfig+0x60>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0207 	and.w	r2, r3, #7
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	601a      	str	r2, [r3, #0]
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40022000 	.word	0x40022000

08003ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003eac:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003eb8:	f7ff f9e6 	bl	8003288 <HAL_PWREx_GetVoltageRange>
 8003ebc:	6178      	str	r0, [r7, #20]
 8003ebe:	e014      	b.n	8003eea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ec0:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	4a24      	ldr	r2, [pc, #144]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eca:	6593      	str	r3, [r2, #88]	; 0x58
 8003ecc:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ed8:	f7ff f9d6 	bl	8003288 <HAL_PWREx_GetVoltageRange>
 8003edc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ede:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef0:	d10b      	bne.n	8003f0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b80      	cmp	r3, #128	; 0x80
 8003ef6:	d919      	bls.n	8003f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2ba0      	cmp	r3, #160	; 0xa0
 8003efc:	d902      	bls.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003efe:	2302      	movs	r3, #2
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	e013      	b.n	8003f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f04:	2301      	movs	r3, #1
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e010      	b.n	8003f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b80      	cmp	r3, #128	; 0x80
 8003f0e:	d902      	bls.n	8003f16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f10:	2303      	movs	r3, #3
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	e00a      	b.n	8003f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b80      	cmp	r3, #128	; 0x80
 8003f1a:	d102      	bne.n	8003f22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	e004      	b.n	8003f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b70      	cmp	r3, #112	; 0x70
 8003f26:	d101      	bne.n	8003f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f28:	2301      	movs	r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f023 0207 	bic.w	r2, r3, #7
 8003f34:	4909      	ldr	r1, [pc, #36]	; (8003f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d001      	beq.n	8003f4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40022000 	.word	0x40022000

08003f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f68:	2300      	movs	r3, #0
 8003f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d041      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f84:	d02a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f8a:	d824      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f96:	d81e      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa0:	d010      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fa2:	e018      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa4:	4b86      	ldr	r3, [pc, #536]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4a85      	ldr	r2, [pc, #532]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fb0:	e015      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fabb 	bl	8004534 <RCCEx_PLLSAI1_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fc2:	e00c      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3320      	adds	r3, #32
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fba6 	bl	800471c <RCCEx_PLLSAI2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fd4:	e003      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	74fb      	strb	r3, [r7, #19]
      break;
 8003fda:	e000      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fe4:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff2:	4973      	ldr	r1, [pc, #460]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ffa:	e001      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d041      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004010:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004014:	d02a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004016:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800401a:	d824      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800401c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004020:	d008      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004022:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004026:	d81e      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800402c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004030:	d010      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004032:	e018      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004034:	4b62      	ldr	r3, [pc, #392]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a61      	ldr	r2, [pc, #388]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004040:	e015      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3304      	adds	r3, #4
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fa73 	bl	8004534 <RCCEx_PLLSAI1_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004052:	e00c      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3320      	adds	r3, #32
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fb5e 	bl	800471c <RCCEx_PLLSAI2_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004064:	e003      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	74fb      	strb	r3, [r7, #19]
      break;
 800406a:	e000      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800406c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004074:	4b52      	ldr	r3, [pc, #328]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004082:	494f      	ldr	r1, [pc, #316]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800408a:	e001      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80a0 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409e:	2300      	movs	r3, #0
 80040a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040a2:	4b47      	ldr	r3, [pc, #284]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040b2:	2300      	movs	r3, #0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00d      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b8:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040bc:	4a40      	ldr	r2, [pc, #256]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c2:	6593      	str	r3, [r2, #88]	; 0x58
 80040c4:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d0:	2301      	movs	r3, #1
 80040d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d4:	4b3b      	ldr	r3, [pc, #236]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a3a      	ldr	r2, [pc, #232]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040e0:	f7fc fe2a 	bl	8000d38 <HAL_GetTick>
 80040e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040e6:	e009      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e8:	f7fc fe26 	bl	8000d38 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d902      	bls.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	74fb      	strb	r3, [r7, #19]
        break;
 80040fa:	e005      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040fc:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0ef      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004108:	7cfb      	ldrb	r3, [r7, #19]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d15c      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800410e:	4b2c      	ldr	r3, [pc, #176]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004118:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01f      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	429a      	cmp	r2, r3
 800412a:	d019      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800412c:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004136:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004138:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	4a20      	ldr	r2, [pc, #128]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	4a1c      	ldr	r2, [pc, #112]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004158:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d016      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fc fde5 	bl	8000d38 <HAL_GetTick>
 800416e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004170:	e00b      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7fc fde1 	bl	8000d38 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d902      	bls.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	74fb      	strb	r3, [r7, #19]
            break;
 8004188:	e006      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800418a:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ec      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10c      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800419e:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ae:	4904      	ldr	r1, [pc, #16]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041b6:	e009      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	74bb      	strb	r3, [r7, #18]
 80041bc:	e006      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041cc:	7c7b      	ldrb	r3, [r7, #17]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d105      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d2:	4b9e      	ldr	r3, [pc, #632]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	4a9d      	ldr	r2, [pc, #628]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041ea:	4b98      	ldr	r3, [pc, #608]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f023 0203 	bic.w	r2, r3, #3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	4994      	ldr	r1, [pc, #592]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800420c:	4b8f      	ldr	r3, [pc, #572]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f023 020c 	bic.w	r2, r3, #12
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421a:	498c      	ldr	r1, [pc, #560]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800422e:	4b87      	ldr	r3, [pc, #540]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	4983      	ldr	r1, [pc, #524]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004250:	4b7e      	ldr	r3, [pc, #504]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	497b      	ldr	r1, [pc, #492]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004272:	4b76      	ldr	r3, [pc, #472]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004280:	4972      	ldr	r1, [pc, #456]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004294:	4b6d      	ldr	r3, [pc, #436]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	496a      	ldr	r1, [pc, #424]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042b6:	4b65      	ldr	r3, [pc, #404]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c4:	4961      	ldr	r1, [pc, #388]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042d8:	4b5c      	ldr	r3, [pc, #368]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e6:	4959      	ldr	r1, [pc, #356]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042fa:	4b54      	ldr	r3, [pc, #336]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004308:	4950      	ldr	r1, [pc, #320]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800431c:	4b4b      	ldr	r3, [pc, #300]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	4948      	ldr	r1, [pc, #288]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800433e:	4b43      	ldr	r3, [pc, #268]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	493f      	ldr	r1, [pc, #252]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d028      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004360:	4b3a      	ldr	r3, [pc, #232]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800436e:	4937      	ldr	r1, [pc, #220]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800437a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800437e:	d106      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004380:	4b32      	ldr	r3, [pc, #200]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a31      	ldr	r2, [pc, #196]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800438a:	60d3      	str	r3, [r2, #12]
 800438c:	e011      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004392:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004396:	d10c      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f8c8 	bl	8004534 <RCCEx_PLLSAI1_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d028      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043be:	4b23      	ldr	r3, [pc, #140]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	491f      	ldr	r1, [pc, #124]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043dc:	d106      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043de:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	4a1a      	ldr	r2, [pc, #104]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043e8:	60d3      	str	r3, [r2, #12]
 80043ea:	e011      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043f4:	d10c      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3304      	adds	r3, #4
 80043fa:	2101      	movs	r1, #1
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 f899 	bl	8004534 <RCCEx_PLLSAI1_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004406:	7cfb      	ldrb	r3, [r7, #19]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d02b      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442a:	4908      	ldr	r1, [pc, #32]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800443a:	d109      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	4a02      	ldr	r2, [pc, #8]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004446:	60d3      	str	r3, [r2, #12]
 8004448:	e014      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800444a:	bf00      	nop
 800444c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004454:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004458:	d10c      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	2101      	movs	r1, #1
 8004460:	4618      	mov	r0, r3
 8004462:	f000 f867 	bl	8004534 <RCCEx_PLLSAI1_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d02f      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004480:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800448e:	4928      	ldr	r1, [pc, #160]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800449e:	d10d      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	2102      	movs	r1, #2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f844 	bl	8004534 <RCCEx_PLLSAI1_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d014      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044b6:	7cfb      	ldrb	r3, [r7, #19]
 80044b8:	74bb      	strb	r3, [r7, #18]
 80044ba:	e011      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3320      	adds	r3, #32
 80044ca:	2102      	movs	r1, #2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 f925 	bl	800471c <RCCEx_PLLSAI2_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fa:	490d      	ldr	r1, [pc, #52]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00b      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800451e:	4904      	ldr	r1, [pc, #16]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004526:	7cbb      	ldrb	r3, [r7, #18]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000

08004534 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004542:	4b75      	ldr	r3, [pc, #468]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d018      	beq.n	8004580 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800454e:	4b72      	ldr	r3, [pc, #456]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 0203 	and.w	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d10d      	bne.n	800457a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
       ||
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004566:	4b6c      	ldr	r3, [pc, #432]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
       ||
 8004576:	429a      	cmp	r2, r3
 8004578:	d047      	beq.n	800460a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
 800457e:	e044      	b.n	800460a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d018      	beq.n	80045ba <RCCEx_PLLSAI1_Config+0x86>
 8004588:	2b03      	cmp	r3, #3
 800458a:	d825      	bhi.n	80045d8 <RCCEx_PLLSAI1_Config+0xa4>
 800458c:	2b01      	cmp	r3, #1
 800458e:	d002      	beq.n	8004596 <RCCEx_PLLSAI1_Config+0x62>
 8004590:	2b02      	cmp	r3, #2
 8004592:	d009      	beq.n	80045a8 <RCCEx_PLLSAI1_Config+0x74>
 8004594:	e020      	b.n	80045d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004596:	4b60      	ldr	r3, [pc, #384]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d11d      	bne.n	80045de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a6:	e01a      	b.n	80045de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045a8:	4b5b      	ldr	r3, [pc, #364]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d116      	bne.n	80045e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b8:	e013      	b.n	80045e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045ba:	4b57      	ldr	r3, [pc, #348]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10f      	bne.n	80045e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045c6:	4b54      	ldr	r3, [pc, #336]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045d6:	e006      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      break;
 80045dc:	e004      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045de:	bf00      	nop
 80045e0:	e002      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045e2:	bf00      	nop
 80045e4:	e000      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10d      	bne.n	800460a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045ee:	4b4a      	ldr	r3, [pc, #296]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6819      	ldr	r1, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	430b      	orrs	r3, r1
 8004604:	4944      	ldr	r1, [pc, #272]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004606:	4313      	orrs	r3, r2
 8004608:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d17d      	bne.n	800470c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004610:	4b41      	ldr	r3, [pc, #260]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a40      	ldr	r2, [pc, #256]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800461a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461c:	f7fc fb8c 	bl	8000d38 <HAL_GetTick>
 8004620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004622:	e009      	b.n	8004638 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004624:	f7fc fb88 	bl	8000d38 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d902      	bls.n	8004638 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	73fb      	strb	r3, [r7, #15]
        break;
 8004636:	e005      	b.n	8004644 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004638:	4b37      	ldr	r3, [pc, #220]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1ef      	bne.n	8004624 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d160      	bne.n	800470c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d111      	bne.n	8004674 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004650:	4b31      	ldr	r3, [pc, #196]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6892      	ldr	r2, [r2, #8]
 8004660:	0211      	lsls	r1, r2, #8
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68d2      	ldr	r2, [r2, #12]
 8004666:	0912      	lsrs	r2, r2, #4
 8004668:	0452      	lsls	r2, r2, #17
 800466a:	430a      	orrs	r2, r1
 800466c:	492a      	ldr	r1, [pc, #168]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466e:	4313      	orrs	r3, r2
 8004670:	610b      	str	r3, [r1, #16]
 8004672:	e027      	b.n	80046c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d112      	bne.n	80046a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800467a:	4b27      	ldr	r3, [pc, #156]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004682:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6892      	ldr	r2, [r2, #8]
 800468a:	0211      	lsls	r1, r2, #8
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6912      	ldr	r2, [r2, #16]
 8004690:	0852      	lsrs	r2, r2, #1
 8004692:	3a01      	subs	r2, #1
 8004694:	0552      	lsls	r2, r2, #21
 8004696:	430a      	orrs	r2, r1
 8004698:	491f      	ldr	r1, [pc, #124]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800469a:	4313      	orrs	r3, r2
 800469c:	610b      	str	r3, [r1, #16]
 800469e:	e011      	b.n	80046c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046a0:	4b1d      	ldr	r3, [pc, #116]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6892      	ldr	r2, [r2, #8]
 80046b0:	0211      	lsls	r1, r2, #8
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6952      	ldr	r2, [r2, #20]
 80046b6:	0852      	lsrs	r2, r2, #1
 80046b8:	3a01      	subs	r2, #1
 80046ba:	0652      	lsls	r2, r2, #25
 80046bc:	430a      	orrs	r2, r1
 80046be:	4916      	ldr	r1, [pc, #88]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046c4:	4b14      	ldr	r3, [pc, #80]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a13      	ldr	r2, [pc, #76]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fc fb32 	bl	8000d38 <HAL_GetTick>
 80046d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046d6:	e009      	b.n	80046ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046d8:	f7fc fb2e 	bl	8000d38 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d902      	bls.n	80046ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	73fb      	strb	r3, [r7, #15]
          break;
 80046ea:	e005      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0ef      	beq.n	80046d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	4904      	ldr	r1, [pc, #16]	; (8004718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004708:	4313      	orrs	r3, r2
 800470a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40021000 	.word	0x40021000

0800471c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800472a:	4b6a      	ldr	r3, [pc, #424]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d018      	beq.n	8004768 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004736:	4b67      	ldr	r3, [pc, #412]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0203 	and.w	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d10d      	bne.n	8004762 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
       ||
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800474e:	4b61      	ldr	r3, [pc, #388]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	091b      	lsrs	r3, r3, #4
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
       ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d047      	beq.n	80047f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
 8004766:	e044      	b.n	80047f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d018      	beq.n	80047a2 <RCCEx_PLLSAI2_Config+0x86>
 8004770:	2b03      	cmp	r3, #3
 8004772:	d825      	bhi.n	80047c0 <RCCEx_PLLSAI2_Config+0xa4>
 8004774:	2b01      	cmp	r3, #1
 8004776:	d002      	beq.n	800477e <RCCEx_PLLSAI2_Config+0x62>
 8004778:	2b02      	cmp	r3, #2
 800477a:	d009      	beq.n	8004790 <RCCEx_PLLSAI2_Config+0x74>
 800477c:	e020      	b.n	80047c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800477e:	4b55      	ldr	r3, [pc, #340]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d11d      	bne.n	80047c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800478e:	e01a      	b.n	80047c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004790:	4b50      	ldr	r3, [pc, #320]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004798:	2b00      	cmp	r3, #0
 800479a:	d116      	bne.n	80047ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a0:	e013      	b.n	80047ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047a2:	4b4c      	ldr	r3, [pc, #304]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10f      	bne.n	80047ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047ae:	4b49      	ldr	r3, [pc, #292]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047be:	e006      	b.n	80047ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      break;
 80047c4:	e004      	b.n	80047d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047c6:	bf00      	nop
 80047c8:	e002      	b.n	80047d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047ca:	bf00      	nop
 80047cc:	e000      	b.n	80047d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10d      	bne.n	80047f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047d6:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6819      	ldr	r1, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	430b      	orrs	r3, r1
 80047ec:	4939      	ldr	r1, [pc, #228]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d167      	bne.n	80048c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047f8:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a35      	ldr	r2, [pc, #212]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004804:	f7fc fa98 	bl	8000d38 <HAL_GetTick>
 8004808:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800480a:	e009      	b.n	8004820 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800480c:	f7fc fa94 	bl	8000d38 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d902      	bls.n	8004820 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	73fb      	strb	r3, [r7, #15]
        break;
 800481e:	e005      	b.n	800482c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004820:	4b2c      	ldr	r3, [pc, #176]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1ef      	bne.n	800480c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d14a      	bne.n	80048c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d111      	bne.n	800485c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004838:	4b26      	ldr	r3, [pc, #152]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6892      	ldr	r2, [r2, #8]
 8004848:	0211      	lsls	r1, r2, #8
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	68d2      	ldr	r2, [r2, #12]
 800484e:	0912      	lsrs	r2, r2, #4
 8004850:	0452      	lsls	r2, r2, #17
 8004852:	430a      	orrs	r2, r1
 8004854:	491f      	ldr	r1, [pc, #124]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004856:	4313      	orrs	r3, r2
 8004858:	614b      	str	r3, [r1, #20]
 800485a:	e011      	b.n	8004880 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800485c:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004864:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6892      	ldr	r2, [r2, #8]
 800486c:	0211      	lsls	r1, r2, #8
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6912      	ldr	r2, [r2, #16]
 8004872:	0852      	lsrs	r2, r2, #1
 8004874:	3a01      	subs	r2, #1
 8004876:	0652      	lsls	r2, r2, #25
 8004878:	430a      	orrs	r2, r1
 800487a:	4916      	ldr	r1, [pc, #88]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487c:	4313      	orrs	r3, r2
 800487e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004880:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a13      	ldr	r2, [pc, #76]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800488a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fc fa54 	bl	8000d38 <HAL_GetTick>
 8004890:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004892:	e009      	b.n	80048a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004894:	f7fc fa50 	bl	8000d38 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d902      	bls.n	80048a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	73fb      	strb	r3, [r7, #15]
          break;
 80048a6:	e005      	b.n	80048b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048a8:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0ef      	beq.n	8004894 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	4904      	ldr	r1, [pc, #16]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000

080048d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e049      	b.n	800497e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f841 	bl	8004986 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f000 f9f8 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d001      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e04f      	b.n	8004a54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a23      	ldr	r2, [pc, #140]	; (8004a60 <HAL_TIM_Base_Start_IT+0xc4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01d      	beq.n	8004a12 <HAL_TIM_Base_Start_IT+0x76>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049de:	d018      	beq.n	8004a12 <HAL_TIM_Base_Start_IT+0x76>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <HAL_TIM_Base_Start_IT+0xc8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <HAL_TIM_Base_Start_IT+0x76>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1e      	ldr	r2, [pc, #120]	; (8004a68 <HAL_TIM_Base_Start_IT+0xcc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00e      	beq.n	8004a12 <HAL_TIM_Base_Start_IT+0x76>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a1c      	ldr	r2, [pc, #112]	; (8004a6c <HAL_TIM_Base_Start_IT+0xd0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d009      	beq.n	8004a12 <HAL_TIM_Base_Start_IT+0x76>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1b      	ldr	r2, [pc, #108]	; (8004a70 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <HAL_TIM_Base_Start_IT+0x76>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d115      	bne.n	8004a3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	4b17      	ldr	r3, [pc, #92]	; (8004a78 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b06      	cmp	r3, #6
 8004a22:	d015      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0xb4>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2a:	d011      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3c:	e008      	b.n	8004a50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0201 	orr.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	e000      	b.n	8004a52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40000400 	.word	0x40000400
 8004a68:	40000800 	.word	0x40000800
 8004a6c:	40000c00 	.word	0x40000c00
 8004a70:	40013400 	.word	0x40013400
 8004a74:	40014000 	.word	0x40014000
 8004a78:	00010007 	.word	0x00010007

08004a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0202 	mvn.w	r2, #2
 8004aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f905 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8f7 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f908 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d122      	bne.n	8004b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d11b      	bne.n	8004b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0204 	mvn.w	r2, #4
 8004afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f8db 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004b18:	e005      	b.n	8004b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f8cd 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f8de 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d122      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d11b      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0208 	mvn.w	r2, #8
 8004b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2204      	movs	r2, #4
 8004b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f8b1 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004b6c:	e005      	b.n	8004b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f8a3 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f8b4 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b10      	cmp	r3, #16
 8004b8c:	d122      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d11b      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0210 	mvn.w	r2, #16
 8004ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2208      	movs	r2, #8
 8004baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f887 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004bc0:	e005      	b.n	8004bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f879 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f88a 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d10e      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d107      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0201 	mvn.w	r2, #1
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fb feb8 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d10e      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	2b80      	cmp	r3, #128	; 0x80
 8004c1a:	d107      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f914 	bl	8004e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3a:	d10e      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c46:	2b80      	cmp	r3, #128	; 0x80
 8004c48:	d107      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f907 	bl	8004e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d10e      	bne.n	8004c86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d107      	bne.n	8004c86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f838 	bl	8004cf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d10e      	bne.n	8004cb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d107      	bne.n	8004cb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f06f 0220 	mvn.w	r2, #32
 8004caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f8c7 	bl	8004e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a40      	ldr	r2, [pc, #256]	; (8004e20 <TIM_Base_SetConfig+0x114>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2a:	d00f      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a3d      	ldr	r2, [pc, #244]	; (8004e24 <TIM_Base_SetConfig+0x118>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00b      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a3c      	ldr	r2, [pc, #240]	; (8004e28 <TIM_Base_SetConfig+0x11c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d007      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a3b      	ldr	r2, [pc, #236]	; (8004e2c <TIM_Base_SetConfig+0x120>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d003      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a3a      	ldr	r2, [pc, #232]	; (8004e30 <TIM_Base_SetConfig+0x124>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d108      	bne.n	8004d5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2f      	ldr	r2, [pc, #188]	; (8004e20 <TIM_Base_SetConfig+0x114>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01f      	beq.n	8004da6 <TIM_Base_SetConfig+0x9a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6c:	d01b      	beq.n	8004da6 <TIM_Base_SetConfig+0x9a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2c      	ldr	r2, [pc, #176]	; (8004e24 <TIM_Base_SetConfig+0x118>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d017      	beq.n	8004da6 <TIM_Base_SetConfig+0x9a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2b      	ldr	r2, [pc, #172]	; (8004e28 <TIM_Base_SetConfig+0x11c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <TIM_Base_SetConfig+0x9a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2a      	ldr	r2, [pc, #168]	; (8004e2c <TIM_Base_SetConfig+0x120>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00f      	beq.n	8004da6 <TIM_Base_SetConfig+0x9a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a29      	ldr	r2, [pc, #164]	; (8004e30 <TIM_Base_SetConfig+0x124>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_Base_SetConfig+0x9a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a28      	ldr	r2, [pc, #160]	; (8004e34 <TIM_Base_SetConfig+0x128>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_Base_SetConfig+0x9a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a27      	ldr	r2, [pc, #156]	; (8004e38 <TIM_Base_SetConfig+0x12c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_Base_SetConfig+0x9a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a26      	ldr	r2, [pc, #152]	; (8004e3c <TIM_Base_SetConfig+0x130>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d108      	bne.n	8004db8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a10      	ldr	r2, [pc, #64]	; (8004e20 <TIM_Base_SetConfig+0x114>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00f      	beq.n	8004e04 <TIM_Base_SetConfig+0xf8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <TIM_Base_SetConfig+0x124>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00b      	beq.n	8004e04 <TIM_Base_SetConfig+0xf8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a11      	ldr	r2, [pc, #68]	; (8004e34 <TIM_Base_SetConfig+0x128>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_Base_SetConfig+0xf8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a10      	ldr	r2, [pc, #64]	; (8004e38 <TIM_Base_SetConfig+0x12c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0xf8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a0f      	ldr	r2, [pc, #60]	; (8004e3c <TIM_Base_SetConfig+0x130>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d103      	bne.n	8004e0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	615a      	str	r2, [r3, #20]
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40000400 	.word	0x40000400
 8004e28:	40000800 	.word	0x40000800
 8004e2c:	40000c00 	.word	0x40000c00
 8004e30:	40013400 	.word	0x40013400
 8004e34:	40014000 	.word	0x40014000
 8004e38:	40014400 	.word	0x40014400
 8004e3c:	40014800 	.word	0x40014800

08004e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <__NVIC_SetPriority>:
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	6039      	str	r1, [r7, #0]
 8004e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	db0a      	blt.n	8004ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	490c      	ldr	r1, [pc, #48]	; (8004ec8 <__NVIC_SetPriority+0x4c>)
 8004e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e9a:	0112      	lsls	r2, r2, #4
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ea4:	e00a      	b.n	8004ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	4908      	ldr	r1, [pc, #32]	; (8004ecc <__NVIC_SetPriority+0x50>)
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	3b04      	subs	r3, #4
 8004eb4:	0112      	lsls	r2, r2, #4
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	440b      	add	r3, r1
 8004eba:	761a      	strb	r2, [r3, #24]
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	e000e100 	.word	0xe000e100
 8004ecc:	e000ed00 	.word	0xe000ed00

08004ed0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <SysTick_Handler+0x1c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ed8:	f001 ff44 	bl	8006d64 <xTaskGetSchedulerState>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d001      	beq.n	8004ee6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ee2:	f002 fd29 	bl	8007938 <xPortSysTickHandler>
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	e000e010 	.word	0xe000e010

08004ef0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	f06f 0004 	mvn.w	r0, #4
 8004efa:	f7ff ffbf 	bl	8004e7c <__NVIC_SetPriority>
#endif
}
 8004efe:	bf00      	nop
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f0a:	f3ef 8305 	mrs	r3, IPSR
 8004f0e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f16:	f06f 0305 	mvn.w	r3, #5
 8004f1a:	607b      	str	r3, [r7, #4]
 8004f1c:	e00c      	b.n	8004f38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <osKernelInitialize+0x44>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d105      	bne.n	8004f32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f26:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <osKernelInitialize+0x44>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	607b      	str	r3, [r7, #4]
 8004f30:	e002      	b.n	8004f38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295
 8004f36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f38:	687b      	ldr	r3, [r7, #4]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	200000dc 	.word	0x200000dc

08004f4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f52:	f3ef 8305 	mrs	r3, IPSR
 8004f56:	603b      	str	r3, [r7, #0]
  return(result);
 8004f58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f5e:	f06f 0305 	mvn.w	r3, #5
 8004f62:	607b      	str	r3, [r7, #4]
 8004f64:	e010      	b.n	8004f88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f66:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <osKernelStart+0x48>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d109      	bne.n	8004f82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f6e:	f7ff ffbf 	bl	8004ef0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f72:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <osKernelStart+0x48>)
 8004f74:	2202      	movs	r2, #2
 8004f76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f78:	f001 faac 	bl	80064d4 <vTaskStartScheduler>
      stat = osOK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	607b      	str	r3, [r7, #4]
 8004f80:	e002      	b.n	8004f88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295
 8004f86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f88:	687b      	ldr	r3, [r7, #4]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	200000dc 	.word	0x200000dc

08004f98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08e      	sub	sp, #56	; 0x38
 8004f9c:	af04      	add	r7, sp, #16
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fa8:	f3ef 8305 	mrs	r3, IPSR
 8004fac:	617b      	str	r3, [r7, #20]
  return(result);
 8004fae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d17e      	bne.n	80050b2 <osThreadNew+0x11a>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d07b      	beq.n	80050b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004fbe:	2318      	movs	r3, #24
 8004fc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d045      	beq.n	800505e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <osThreadNew+0x48>
        name = attr->name;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <osThreadNew+0x6e>
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	2b38      	cmp	r3, #56	; 0x38
 8004ff8:	d805      	bhi.n	8005006 <osThreadNew+0x6e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <osThreadNew+0x72>
        return (NULL);
 8005006:	2300      	movs	r3, #0
 8005008:	e054      	b.n	80050b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00e      	beq.n	8005040 <osThreadNew+0xa8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2b5b      	cmp	r3, #91	; 0x5b
 8005028:	d90a      	bls.n	8005040 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800502e:	2b00      	cmp	r3, #0
 8005030:	d006      	beq.n	8005040 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <osThreadNew+0xa8>
        mem = 1;
 800503a:	2301      	movs	r3, #1
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	e010      	b.n	8005062 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10c      	bne.n	8005062 <osThreadNew+0xca>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d108      	bne.n	8005062 <osThreadNew+0xca>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d104      	bne.n	8005062 <osThreadNew+0xca>
          mem = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	e001      	b.n	8005062 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d110      	bne.n	800508a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005070:	9202      	str	r2, [sp, #8]
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	6a3a      	ldr	r2, [r7, #32]
 800507c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f001 f852 	bl	8006128 <xTaskCreateStatic>
 8005084:	4603      	mov	r3, r0
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	e013      	b.n	80050b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d110      	bne.n	80050b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	b29a      	uxth	r2, r3
 8005094:	f107 0310 	add.w	r3, r7, #16
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f001 f89d 	bl	80061e2 <xTaskCreate>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d001      	beq.n	80050b2 <osThreadNew+0x11a>
            hTask = NULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050b2:	693b      	ldr	r3, [r7, #16]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3728      	adds	r7, #40	; 0x28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050c4:	f3ef 8305 	mrs	r3, IPSR
 80050c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80050ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <osDelay+0x1c>
    stat = osErrorISR;
 80050d0:	f06f 0305 	mvn.w	r3, #5
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e007      	b.n	80050e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f001 f9c2 	bl	800646c <vTaskDelay>
    }
  }

  return (stat);
 80050e8:	68fb      	ldr	r3, [r7, #12]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b08a      	sub	sp, #40	; 0x28
 80050f6:	af02      	add	r7, sp, #8
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005102:	f3ef 8305 	mrs	r3, IPSR
 8005106:	613b      	str	r3, [r7, #16]
  return(result);
 8005108:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800510a:	2b00      	cmp	r3, #0
 800510c:	d15f      	bne.n	80051ce <osMessageQueueNew+0xdc>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d05c      	beq.n	80051ce <osMessageQueueNew+0xdc>
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d059      	beq.n	80051ce <osMessageQueueNew+0xdc>
    mem = -1;
 800511a:	f04f 33ff 	mov.w	r3, #4294967295
 800511e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d029      	beq.n	800517a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d012      	beq.n	8005154 <osMessageQueueNew+0x62>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b4f      	cmp	r3, #79	; 0x4f
 8005134:	d90e      	bls.n	8005154 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	fb01 f303 	mul.w	r3, r1, r3
 800514a:	429a      	cmp	r2, r3
 800514c:	d302      	bcc.n	8005154 <osMessageQueueNew+0x62>
        mem = 1;
 800514e:	2301      	movs	r3, #1
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	e014      	b.n	800517e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d110      	bne.n	800517e <osMessageQueueNew+0x8c>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10c      	bne.n	800517e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005168:	2b00      	cmp	r3, #0
 800516a:	d108      	bne.n	800517e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <osMessageQueueNew+0x8c>
          mem = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	e001      	b.n	800517e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10b      	bne.n	800519c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2100      	movs	r1, #0
 800518e:	9100      	str	r1, [sp, #0]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fa4e 	bl	8005634 <xQueueGenericCreateStatic>
 8005198:	61f8      	str	r0, [r7, #28]
 800519a:	e008      	b.n	80051ae <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d105      	bne.n	80051ae <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80051a2:	2200      	movs	r2, #0
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 fabc 	bl	8005724 <xQueueGenericCreate>
 80051ac:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00c      	beq.n	80051ce <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	e001      	b.n	80051c6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80051c6:	6979      	ldr	r1, [r7, #20]
 80051c8:	69f8      	ldr	r0, [r7, #28]
 80051ca:	f000 ff4f 	bl	800606c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80051ce:	69fb      	ldr	r3, [r7, #28]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051f0:	f3ef 8305 	mrs	r3, IPSR
 80051f4:	617b      	str	r3, [r7, #20]
  return(result);
 80051f6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d028      	beq.n	800524e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <osMessageQueuePut+0x36>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <osMessageQueuePut+0x36>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800520e:	f06f 0303 	mvn.w	r3, #3
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	e038      	b.n	8005288 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005216:	2300      	movs	r3, #0
 8005218:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800521a:	f107 0210 	add.w	r2, r7, #16
 800521e:	2300      	movs	r3, #0
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	69b8      	ldr	r0, [r7, #24]
 8005224:	f000 fbda 	bl	80059dc <xQueueGenericSendFromISR>
 8005228:	4603      	mov	r3, r0
 800522a:	2b01      	cmp	r3, #1
 800522c:	d003      	beq.n	8005236 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800522e:	f06f 0302 	mvn.w	r3, #2
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	e028      	b.n	8005288 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d025      	beq.n	8005288 <osMessageQueuePut+0xb0>
 800523c:	4b15      	ldr	r3, [pc, #84]	; (8005294 <osMessageQueuePut+0xbc>)
 800523e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	e01c      	b.n	8005288 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <osMessageQueuePut+0x82>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d103      	bne.n	8005262 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800525a:	f06f 0303 	mvn.w	r3, #3
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	e012      	b.n	8005288 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005262:	2300      	movs	r3, #0
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	69b8      	ldr	r0, [r7, #24]
 800526a:	f000 fab9 	bl	80057e0 <xQueueGenericSend>
 800526e:	4603      	mov	r3, r0
 8005270:	2b01      	cmp	r3, #1
 8005272:	d009      	beq.n	8005288 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800527a:	f06f 0301 	mvn.w	r3, #1
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	e002      	b.n	8005288 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005282:	f06f 0302 	mvn.w	r3, #2
 8005286:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005288:	69fb      	ldr	r3, [r7, #28]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	e000ed04 	.word	0xe000ed04

08005298 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052ae:	f3ef 8305 	mrs	r3, IPSR
 80052b2:	617b      	str	r3, [r7, #20]
  return(result);
 80052b4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d028      	beq.n	800530c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <osMessageQueueGet+0x34>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <osMessageQueueGet+0x34>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80052cc:	f06f 0303 	mvn.w	r3, #3
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	e037      	b.n	8005344 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80052d4:	2300      	movs	r3, #0
 80052d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80052d8:	f107 0310 	add.w	r3, r7, #16
 80052dc:	461a      	mov	r2, r3
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	69b8      	ldr	r0, [r7, #24]
 80052e2:	f000 fcf7 	bl	8005cd4 <xQueueReceiveFromISR>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d003      	beq.n	80052f4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80052ec:	f06f 0302 	mvn.w	r3, #2
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	e027      	b.n	8005344 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d024      	beq.n	8005344 <osMessageQueueGet+0xac>
 80052fa:	4b15      	ldr	r3, [pc, #84]	; (8005350 <osMessageQueueGet+0xb8>)
 80052fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	e01b      	b.n	8005344 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <osMessageQueueGet+0x80>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d103      	bne.n	8005320 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005318:	f06f 0303 	mvn.w	r3, #3
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	e011      	b.n	8005344 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	69b8      	ldr	r0, [r7, #24]
 8005326:	f000 fbf5 	bl	8005b14 <xQueueReceive>
 800532a:	4603      	mov	r3, r0
 800532c:	2b01      	cmp	r3, #1
 800532e:	d009      	beq.n	8005344 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005336:	f06f 0301 	mvn.w	r3, #1
 800533a:	61fb      	str	r3, [r7, #28]
 800533c:	e002      	b.n	8005344 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800533e:	f06f 0302 	mvn.w	r3, #2
 8005342:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005344:	69fb      	ldr	r3, [r7, #28]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3720      	adds	r7, #32
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	e000ed04 	.word	0xe000ed04

08005354 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <osMessageQueueGetCount+0x18>
    count = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e00e      	b.n	800538a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800536c:	f3ef 8305 	mrs	r3, IPSR
 8005370:	60fb      	str	r3, [r7, #12]
  return(result);
 8005372:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005374:	2b00      	cmp	r3, #0
 8005376:	d004      	beq.n	8005382 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005378:	6938      	ldr	r0, [r7, #16]
 800537a:	f000 fd49 	bl	8005e10 <uxQueueMessagesWaitingFromISR>
 800537e:	6178      	str	r0, [r7, #20]
 8005380:	e003      	b.n	800538a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005382:	6938      	ldr	r0, [r7, #16]
 8005384:	f000 fd26 	bl	8005dd4 <uxQueueMessagesWaiting>
 8005388:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800538a:	697b      	ldr	r3, [r7, #20]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4a07      	ldr	r2, [pc, #28]	; (80053c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80053a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4a06      	ldr	r2, [pc, #24]	; (80053c4 <vApplicationGetIdleTaskMemory+0x30>)
 80053aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2280      	movs	r2, #128	; 0x80
 80053b0:	601a      	str	r2, [r3, #0]
}
 80053b2:	bf00      	nop
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	200000e0 	.word	0x200000e0
 80053c4:	2000013c 	.word	0x2000013c

080053c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a07      	ldr	r2, [pc, #28]	; (80053f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80053d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4a06      	ldr	r2, [pc, #24]	; (80053f8 <vApplicationGetTimerTaskMemory+0x30>)
 80053de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053e6:	601a      	str	r2, [r3, #0]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	2000033c 	.word	0x2000033c
 80053f8:	20000398 	.word	0x20000398

080053fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f103 0208 	add.w	r2, r3, #8
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f04f 32ff 	mov.w	r2, #4294967295
 8005414:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f103 0208 	add.w	r2, r3, #8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f103 0208 	add.w	r2, r3, #8
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	601a      	str	r2, [r3, #0]
}
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d103      	bne.n	80054be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e00c      	b.n	80054d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3308      	adds	r3, #8
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e002      	b.n	80054cc <vListInsert+0x2e>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d2f6      	bcs.n	80054c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6892      	ldr	r2, [r2, #8]
 8005526:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6852      	ldr	r2, [r2, #4]
 8005530:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	d103      	bne.n	8005544 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	1e5a      	subs	r2, r3, #1
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800558e:	f002 f941 	bl	8007814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559a:	68f9      	ldr	r1, [r7, #12]
 800559c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	441a      	add	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	3b01      	subs	r3, #1
 80055c0:	68f9      	ldr	r1, [r7, #12]
 80055c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	441a      	add	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	22ff      	movs	r2, #255	; 0xff
 80055d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	22ff      	movs	r2, #255	; 0xff
 80055da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d114      	bne.n	800560e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3310      	adds	r3, #16
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 f9f9 	bl	80069e8 <xTaskRemoveFromEventList>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d012      	beq.n	8005622 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055fc:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <xQueueGenericReset+0xcc>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	e009      	b.n	8005622 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3310      	adds	r3, #16
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fef2 	bl	80053fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3324      	adds	r3, #36	; 0x24
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff feed 	bl	80053fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005622:	f002 f927 	bl	8007874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005626:	2301      	movs	r3, #1
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08e      	sub	sp, #56	; 0x38
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <xQueueGenericCreateStatic+0x52>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <xQueueGenericCreateStatic+0x56>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <xQueueGenericCreateStatic+0x58>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	623b      	str	r3, [r7, #32]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <xQueueGenericCreateStatic+0x7e>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <xQueueGenericCreateStatic+0x82>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueGenericCreateStatic+0x84>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	61fb      	str	r3, [r7, #28]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056d2:	2350      	movs	r3, #80	; 0x50
 80056d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b50      	cmp	r3, #80	; 0x50
 80056da:	d00a      	beq.n	80056f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	61bb      	str	r3, [r7, #24]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005706:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	4613      	mov	r3, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f83f 	bl	8005798 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800571c:	4618      	mov	r0, r3
 800571e:	3730      	adds	r7, #48	; 0x30
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08a      	sub	sp, #40	; 0x28
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	613b      	str	r3, [r7, #16]
}
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	3350      	adds	r3, #80	; 0x50
 800575c:	4618      	mov	r0, r3
 800575e:	f002 f97b 	bl	8007a58 <pvPortMalloc>
 8005762:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d011      	beq.n	800578e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	3350      	adds	r3, #80	; 0x50
 8005772:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800577c:	79fa      	ldrb	r2, [r7, #7]
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f805 	bl	8005798 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800578e:	69bb      	ldr	r3, [r7, #24]
	}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d103      	bne.n	80057b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e002      	b.n	80057ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057c6:	2101      	movs	r1, #1
 80057c8:	69b8      	ldr	r0, [r7, #24]
 80057ca:	f7ff fecb 	bl	8005564 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057d6:	bf00      	nop
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08e      	sub	sp, #56	; 0x38
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057ee:	2300      	movs	r3, #0
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <xQueueGenericSend+0x32>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <xQueueGenericSend+0x40>
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <xQueueGenericSend+0x44>
 8005820:	2301      	movs	r3, #1
 8005822:	e000      	b.n	8005826 <xQueueGenericSend+0x46>
 8005824:	2300      	movs	r3, #0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <xQueueGenericSend+0x60>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d103      	bne.n	800584e <xQueueGenericSend+0x6e>
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <xQueueGenericSend+0x72>
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <xQueueGenericSend+0x74>
 8005852:	2300      	movs	r3, #0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <xQueueGenericSend+0x8e>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	623b      	str	r3, [r7, #32]
}
 800586a:	bf00      	nop
 800586c:	e7fe      	b.n	800586c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800586e:	f001 fa79 	bl	8006d64 <xTaskGetSchedulerState>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d102      	bne.n	800587e <xQueueGenericSend+0x9e>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <xQueueGenericSend+0xa2>
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <xQueueGenericSend+0xa4>
 8005882:	2300      	movs	r3, #0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <xQueueGenericSend+0xbe>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	61fb      	str	r3, [r7, #28]
}
 800589a:	bf00      	nop
 800589c:	e7fe      	b.n	800589c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800589e:	f001 ffb9 	bl	8007814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d302      	bcc.n	80058b4 <xQueueGenericSend+0xd4>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d129      	bne.n	8005908 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	68b9      	ldr	r1, [r7, #8]
 80058b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ba:	f000 fac7 	bl	8005e4c <prvCopyDataToQueue>
 80058be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d010      	beq.n	80058ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	3324      	adds	r3, #36	; 0x24
 80058cc:	4618      	mov	r0, r3
 80058ce:	f001 f88b 	bl	80069e8 <xTaskRemoveFromEventList>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d013      	beq.n	8005900 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058d8:	4b3f      	ldr	r3, [pc, #252]	; (80059d8 <xQueueGenericSend+0x1f8>)
 80058da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	e00a      	b.n	8005900 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d007      	beq.n	8005900 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058f0:	4b39      	ldr	r3, [pc, #228]	; (80059d8 <xQueueGenericSend+0x1f8>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005900:	f001 ffb8 	bl	8007874 <vPortExitCritical>
				return pdPASS;
 8005904:	2301      	movs	r3, #1
 8005906:	e063      	b.n	80059d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800590e:	f001 ffb1 	bl	8007874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005912:	2300      	movs	r3, #0
 8005914:	e05c      	b.n	80059d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800591c:	f107 0314 	add.w	r3, r7, #20
 8005920:	4618      	mov	r0, r3
 8005922:	f001 f8c5 	bl	8006ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005926:	2301      	movs	r3, #1
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800592a:	f001 ffa3 	bl	8007874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800592e:	f000 fe37 	bl	80065a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005932:	f001 ff6f 	bl	8007814 <vPortEnterCritical>
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800593c:	b25b      	sxtb	r3, r3
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005942:	d103      	bne.n	800594c <xQueueGenericSend+0x16c>
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005952:	b25b      	sxtb	r3, r3
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005958:	d103      	bne.n	8005962 <xQueueGenericSend+0x182>
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005962:	f001 ff87 	bl	8007874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005966:	1d3a      	adds	r2, r7, #4
 8005968:	f107 0314 	add.w	r3, r7, #20
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f001 f8b4 	bl	8006adc <xTaskCheckForTimeOut>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d124      	bne.n	80059c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800597a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800597c:	f000 fb5e 	bl	800603c <prvIsQueueFull>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d018      	beq.n	80059b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	3310      	adds	r3, #16
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f000 ffda 	bl	8006948 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005996:	f000 fae9 	bl	8005f6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800599a:	f000 fe0f 	bl	80065bc <xTaskResumeAll>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f47f af7c 	bne.w	800589e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80059a6:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <xQueueGenericSend+0x1f8>)
 80059a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	e772      	b.n	800589e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ba:	f000 fad7 	bl	8005f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059be:	f000 fdfd 	bl	80065bc <xTaskResumeAll>
 80059c2:	e76c      	b.n	800589e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059c6:	f000 fad1 	bl	8005f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059ca:	f000 fdf7 	bl	80065bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3738      	adds	r7, #56	; 0x38
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	e000ed04 	.word	0xe000ed04

080059dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b090      	sub	sp, #64	; 0x40
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d103      	bne.n	8005a18 <xQueueGenericSendFromISR+0x3c>
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <xQueueGenericSendFromISR+0x40>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <xQueueGenericSendFromISR+0x42>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10a      	bne.n	8005a38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a34:	bf00      	nop
 8005a36:	e7fe      	b.n	8005a36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d103      	bne.n	8005a46 <xQueueGenericSendFromISR+0x6a>
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <xQueueGenericSendFromISR+0x6e>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <xQueueGenericSendFromISR+0x70>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	623b      	str	r3, [r7, #32]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a66:	f001 ffb7 	bl	80079d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a6a:	f3ef 8211 	mrs	r2, BASEPRI
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	61fa      	str	r2, [r7, #28]
 8005a80:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a82:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a84:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d302      	bcc.n	8005a98 <xQueueGenericSendFromISR+0xbc>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d12f      	bne.n	8005af8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005aae:	f000 f9cd 	bl	8005e4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ab2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aba:	d112      	bne.n	8005ae2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d016      	beq.n	8005af2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	3324      	adds	r3, #36	; 0x24
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 ff8d 	bl	80069e8 <xTaskRemoveFromEventList>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00e      	beq.n	8005af2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00b      	beq.n	8005af2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	e007      	b.n	8005af2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ae2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	b25a      	sxtb	r2, r3
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005af2:	2301      	movs	r3, #1
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005af6:	e001      	b.n	8005afc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3740      	adds	r7, #64	; 0x40
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08c      	sub	sp, #48	; 0x30
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b20:	2300      	movs	r3, #0
 8005b22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <xQueueReceive+0x30>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	623b      	str	r3, [r7, #32]
}
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <xQueueReceive+0x3e>
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <xQueueReceive+0x42>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <xQueueReceive+0x44>
 8005b56:	2300      	movs	r3, #0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <xQueueReceive+0x5e>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	61fb      	str	r3, [r7, #28]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b72:	f001 f8f7 	bl	8006d64 <xTaskGetSchedulerState>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d102      	bne.n	8005b82 <xQueueReceive+0x6e>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <xQueueReceive+0x72>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <xQueueReceive+0x74>
 8005b86:	2300      	movs	r3, #0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <xQueueReceive+0x8e>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	61bb      	str	r3, [r7, #24]
}
 8005b9e:	bf00      	nop
 8005ba0:	e7fe      	b.n	8005ba0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ba2:	f001 fe37 	bl	8007814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01f      	beq.n	8005bf2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb6:	f000 f9b3 	bl	8005f20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	1e5a      	subs	r2, r3, #1
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00f      	beq.n	8005bea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	3310      	adds	r3, #16
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 ff0a 	bl	80069e8 <xTaskRemoveFromEventList>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d007      	beq.n	8005bea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bda:	4b3d      	ldr	r3, [pc, #244]	; (8005cd0 <xQueueReceive+0x1bc>)
 8005bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bea:	f001 fe43 	bl	8007874 <vPortExitCritical>
				return pdPASS;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e069      	b.n	8005cc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d103      	bne.n	8005c00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bf8:	f001 fe3c 	bl	8007874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e062      	b.n	8005cc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c06:	f107 0310 	add.w	r3, r7, #16
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 ff50 	bl	8006ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c10:	2301      	movs	r3, #1
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c14:	f001 fe2e 	bl	8007874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c18:	f000 fcc2 	bl	80065a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c1c:	f001 fdfa 	bl	8007814 <vPortEnterCritical>
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c26:	b25b      	sxtb	r3, r3
 8005c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2c:	d103      	bne.n	8005c36 <xQueueReceive+0x122>
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c3c:	b25b      	sxtb	r3, r3
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d103      	bne.n	8005c4c <xQueueReceive+0x138>
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c4c:	f001 fe12 	bl	8007874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c50:	1d3a      	adds	r2, r7, #4
 8005c52:	f107 0310 	add.w	r3, r7, #16
 8005c56:	4611      	mov	r1, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 ff3f 	bl	8006adc <xTaskCheckForTimeOut>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d123      	bne.n	8005cac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c66:	f000 f9d3 	bl	8006010 <prvIsQueueEmpty>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d017      	beq.n	8005ca0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	3324      	adds	r3, #36	; 0x24
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	4611      	mov	r1, r2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fe65 	bl	8006948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c80:	f000 f974 	bl	8005f6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c84:	f000 fc9a 	bl	80065bc <xTaskResumeAll>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d189      	bne.n	8005ba2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c8e:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <xQueueReceive+0x1bc>)
 8005c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	e780      	b.n	8005ba2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca2:	f000 f963 	bl	8005f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ca6:	f000 fc89 	bl	80065bc <xTaskResumeAll>
 8005caa:	e77a      	b.n	8005ba2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cae:	f000 f95d 	bl	8005f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cb2:	f000 fc83 	bl	80065bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb8:	f000 f9aa 	bl	8006010 <prvIsQueueEmpty>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f43f af6f 	beq.w	8005ba2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3730      	adds	r7, #48	; 0x30
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	e000ed04 	.word	0xe000ed04

08005cd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08e      	sub	sp, #56	; 0x38
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	623b      	str	r3, [r7, #32]
}
 8005cfc:	bf00      	nop
 8005cfe:	e7fe      	b.n	8005cfe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <xQueueReceiveFromISR+0x3a>
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <xQueueReceiveFromISR+0x3e>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <xQueueReceiveFromISR+0x40>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	61fb      	str	r3, [r7, #28]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d2e:	f001 fe53 	bl	80079d8 <vPortValidateInterruptPriority>
	__asm volatile
 8005d32:	f3ef 8211 	mrs	r2, BASEPRI
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	61ba      	str	r2, [r7, #24]
 8005d48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d02f      	beq.n	8005dba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d68:	f000 f8da 	bl	8005f20 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	1e5a      	subs	r2, r3, #1
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d112      	bne.n	8005da4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d016      	beq.n	8005db4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	3310      	adds	r3, #16
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fe2c 	bl	80069e8 <xTaskRemoveFromEventList>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00e      	beq.n	8005db4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	e007      	b.n	8005db4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005da8:	3301      	adds	r3, #1
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	b25a      	sxtb	r2, r3
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005db4:	2301      	movs	r3, #1
 8005db6:	637b      	str	r3, [r7, #52]	; 0x34
 8005db8:	e001      	b.n	8005dbe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f383 8811 	msr	BASEPRI, r3
}
 8005dc8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3738      	adds	r7, #56	; 0x38
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	60bb      	str	r3, [r7, #8]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005df8:	f001 fd0c 	bl	8007814 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005e02:	f001 fd37 	bl	8007874 <vPortExitCritical>

	return uxReturn;
 8005e06:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10a      	bne.n	8005e38 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	60fb      	str	r3, [r7, #12]
}
 8005e34:	bf00      	nop
 8005e36:	e7fe      	b.n	8005e36 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005e3e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e40:	4618      	mov	r0, r3
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10d      	bne.n	8005e86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d14d      	bne.n	8005f0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 ff92 	bl	8006da0 <xTaskPriorityDisinherit>
 8005e7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	609a      	str	r2, [r3, #8]
 8005e84:	e043      	b.n	8005f0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d119      	bne.n	8005ec0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6858      	ldr	r0, [r3, #4]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	461a      	mov	r2, r3
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	f003 fd2c 	bl	80098f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	441a      	add	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d32b      	bcc.n	8005f0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	605a      	str	r2, [r3, #4]
 8005ebe:	e026      	b.n	8005f0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	68d8      	ldr	r0, [r3, #12]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	f003 fd12 	bl	80098f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	425b      	negs	r3, r3
 8005eda:	441a      	add	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d207      	bcs.n	8005efc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	425b      	negs	r3, r3
 8005ef6:	441a      	add	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d105      	bne.n	8005f0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f16:	697b      	ldr	r3, [r7, #20]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d018      	beq.n	8005f64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	441a      	add	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d303      	bcc.n	8005f54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68d9      	ldr	r1, [r3, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6838      	ldr	r0, [r7, #0]
 8005f60:	f003 fcc8 	bl	80098f4 <memcpy>
	}
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f74:	f001 fc4e 	bl	8007814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f80:	e011      	b.n	8005fa6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d012      	beq.n	8005fb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3324      	adds	r3, #36	; 0x24
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fd2a 	bl	80069e8 <xTaskRemoveFromEventList>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f9a:	f000 fe01 	bl	8006ba0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	dce9      	bgt.n	8005f82 <prvUnlockQueue+0x16>
 8005fae:	e000      	b.n	8005fb2 <prvUnlockQueue+0x46>
					break;
 8005fb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	22ff      	movs	r2, #255	; 0xff
 8005fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fba:	f001 fc5b 	bl	8007874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fbe:	f001 fc29 	bl	8007814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fca:	e011      	b.n	8005ff0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d012      	beq.n	8005ffa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3310      	adds	r3, #16
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fd05 	bl	80069e8 <xTaskRemoveFromEventList>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fe4:	f000 fddc 	bl	8006ba0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fe8:	7bbb      	ldrb	r3, [r7, #14]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	dce9      	bgt.n	8005fcc <prvUnlockQueue+0x60>
 8005ff8:	e000      	b.n	8005ffc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ffa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	22ff      	movs	r2, #255	; 0xff
 8006000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006004:	f001 fc36 	bl	8007874 <vPortExitCritical>
}
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006018:	f001 fbfc 	bl	8007814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006024:	2301      	movs	r3, #1
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e001      	b.n	800602e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800602e:	f001 fc21 	bl	8007874 <vPortExitCritical>

	return xReturn;
 8006032:	68fb      	ldr	r3, [r7, #12]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006044:	f001 fbe6 	bl	8007814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006050:	429a      	cmp	r2, r3
 8006052:	d102      	bne.n	800605a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006054:	2301      	movs	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e001      	b.n	800605e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800605e:	f001 fc09 	bl	8007874 <vPortExitCritical>

	return xReturn;
 8006062:	68fb      	ldr	r3, [r7, #12]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	e014      	b.n	80060a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800607c:	4a0f      	ldr	r2, [pc, #60]	; (80060bc <vQueueAddToRegistry+0x50>)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10b      	bne.n	80060a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006088:	490c      	ldr	r1, [pc, #48]	; (80060bc <vQueueAddToRegistry+0x50>)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006092:	4a0a      	ldr	r2, [pc, #40]	; (80060bc <vQueueAddToRegistry+0x50>)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	4413      	add	r3, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800609e:	e006      	b.n	80060ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b07      	cmp	r3, #7
 80060aa:	d9e7      	bls.n	800607c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	2000324c 	.word	0x2000324c

080060c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060d0:	f001 fba0 	bl	8007814 <vPortEnterCritical>
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060da:	b25b      	sxtb	r3, r3
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e0:	d103      	bne.n	80060ea <vQueueWaitForMessageRestricted+0x2a>
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060f0:	b25b      	sxtb	r3, r3
 80060f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f6:	d103      	bne.n	8006100 <vQueueWaitForMessageRestricted+0x40>
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006100:	f001 fbb8 	bl	8007874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006108:	2b00      	cmp	r3, #0
 800610a:	d106      	bne.n	800611a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	3324      	adds	r3, #36	; 0x24
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fc3b 	bl	8006990 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800611a:	6978      	ldr	r0, [r7, #20]
 800611c:	f7ff ff26 	bl	8005f6c <prvUnlockQueue>
	}
 8006120:	bf00      	nop
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08e      	sub	sp, #56	; 0x38
 800612c:	af04      	add	r7, sp, #16
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <xTaskCreateStatic+0x2a>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	623b      	str	r3, [r7, #32]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <xTaskCreateStatic+0x46>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	61fb      	str	r3, [r7, #28]
}
 800616a:	bf00      	nop
 800616c:	e7fe      	b.n	800616c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800616e:	235c      	movs	r3, #92	; 0x5c
 8006170:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b5c      	cmp	r3, #92	; 0x5c
 8006176:	d00a      	beq.n	800618e <xTaskCreateStatic+0x66>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	61bb      	str	r3, [r7, #24]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800618e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	2b00      	cmp	r3, #0
 8006194:	d01e      	beq.n	80061d4 <xTaskCreateStatic+0xac>
 8006196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01b      	beq.n	80061d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	2202      	movs	r2, #2
 80061aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061ae:	2300      	movs	r3, #0
 80061b0:	9303      	str	r3, [sp, #12]
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	9302      	str	r3, [sp, #8]
 80061b6:	f107 0314 	add.w	r3, r7, #20
 80061ba:	9301      	str	r3, [sp, #4]
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	68b9      	ldr	r1, [r7, #8]
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f850 	bl	800626c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061ce:	f000 f8dd 	bl	800638c <prvAddNewTaskToReadyList>
 80061d2:	e001      	b.n	80061d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061d8:	697b      	ldr	r3, [r7, #20]
	}
 80061da:	4618      	mov	r0, r3
 80061dc:	3728      	adds	r7, #40	; 0x28
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b08c      	sub	sp, #48	; 0x30
 80061e6:	af04      	add	r7, sp, #16
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f001 fc2e 	bl	8007a58 <pvPortMalloc>
 80061fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00e      	beq.n	8006222 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006204:	205c      	movs	r0, #92	; 0x5c
 8006206:	f001 fc27 	bl	8007a58 <pvPortMalloc>
 800620a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	631a      	str	r2, [r3, #48]	; 0x30
 8006218:	e005      	b.n	8006226 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800621a:	6978      	ldr	r0, [r7, #20]
 800621c:	f001 fce8 	bl	8007bf0 <vPortFree>
 8006220:	e001      	b.n	8006226 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d017      	beq.n	800625c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006234:	88fa      	ldrh	r2, [r7, #6]
 8006236:	2300      	movs	r3, #0
 8006238:	9303      	str	r3, [sp, #12]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	9302      	str	r3, [sp, #8]
 800623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 f80e 	bl	800626c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006250:	69f8      	ldr	r0, [r7, #28]
 8006252:	f000 f89b 	bl	800638c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006256:	2301      	movs	r3, #1
 8006258:	61bb      	str	r3, [r7, #24]
 800625a:	e002      	b.n	8006262 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800625c:	f04f 33ff 	mov.w	r3, #4294967295
 8006260:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006262:	69bb      	ldr	r3, [r7, #24]
	}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	461a      	mov	r2, r3
 8006284:	21a5      	movs	r1, #165	; 0xa5
 8006286:	f003 fb43 	bl	8009910 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006294:	3b01      	subs	r3, #1
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f023 0307 	bic.w	r3, r3, #7
 80062a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	617b      	str	r3, [r7, #20]
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01f      	beq.n	800630a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062ca:	2300      	movs	r3, #0
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	e012      	b.n	80062f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	4413      	add	r3, r2
 80062d6:	7819      	ldrb	r1, [r3, #0]
 80062d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	3334      	adds	r3, #52	; 0x34
 80062e0:	460a      	mov	r2, r1
 80062e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d006      	beq.n	80062fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	3301      	adds	r3, #1
 80062f4:	61fb      	str	r3, [r7, #28]
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	2b0f      	cmp	r3, #15
 80062fa:	d9e9      	bls.n	80062d0 <prvInitialiseNewTask+0x64>
 80062fc:	e000      	b.n	8006300 <prvInitialiseNewTask+0x94>
			{
				break;
 80062fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006308:	e003      	b.n	8006312 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	2b37      	cmp	r3, #55	; 0x37
 8006316:	d901      	bls.n	800631c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006318:	2337      	movs	r3, #55	; 0x37
 800631a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006320:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006326:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	2200      	movs	r2, #0
 800632c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	3304      	adds	r3, #4
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff f882 	bl	800543c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	3318      	adds	r3, #24
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff f87d 	bl	800543c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006346:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006356:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	2200      	movs	r2, #0
 800635c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	68f9      	ldr	r1, [r7, #12]
 800636a:	69b8      	ldr	r0, [r7, #24]
 800636c:	f001 f928 	bl	80075c0 <pxPortInitialiseStack>
 8006370:	4602      	mov	r2, r0
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800637c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006380:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006382:	bf00      	nop
 8006384:	3720      	adds	r7, #32
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006394:	f001 fa3e 	bl	8007814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006398:	4b2d      	ldr	r3, [pc, #180]	; (8006450 <prvAddNewTaskToReadyList+0xc4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	4a2c      	ldr	r2, [pc, #176]	; (8006450 <prvAddNewTaskToReadyList+0xc4>)
 80063a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063a2:	4b2c      	ldr	r3, [pc, #176]	; (8006454 <prvAddNewTaskToReadyList+0xc8>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063aa:	4a2a      	ldr	r2, [pc, #168]	; (8006454 <prvAddNewTaskToReadyList+0xc8>)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063b0:	4b27      	ldr	r3, [pc, #156]	; (8006450 <prvAddNewTaskToReadyList+0xc4>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d110      	bne.n	80063da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063b8:	f000 fc16 	bl	8006be8 <prvInitialiseTaskLists>
 80063bc:	e00d      	b.n	80063da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063be:	4b26      	ldr	r3, [pc, #152]	; (8006458 <prvAddNewTaskToReadyList+0xcc>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063c6:	4b23      	ldr	r3, [pc, #140]	; (8006454 <prvAddNewTaskToReadyList+0xc8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d802      	bhi.n	80063da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063d4:	4a1f      	ldr	r2, [pc, #124]	; (8006454 <prvAddNewTaskToReadyList+0xc8>)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063da:	4b20      	ldr	r3, [pc, #128]	; (800645c <prvAddNewTaskToReadyList+0xd0>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3301      	adds	r3, #1
 80063e0:	4a1e      	ldr	r2, [pc, #120]	; (800645c <prvAddNewTaskToReadyList+0xd0>)
 80063e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063e4:	4b1d      	ldr	r3, [pc, #116]	; (800645c <prvAddNewTaskToReadyList+0xd0>)
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f0:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <prvAddNewTaskToReadyList+0xd4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d903      	bls.n	8006400 <prvAddNewTaskToReadyList+0x74>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	4a18      	ldr	r2, [pc, #96]	; (8006460 <prvAddNewTaskToReadyList+0xd4>)
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4a15      	ldr	r2, [pc, #84]	; (8006464 <prvAddNewTaskToReadyList+0xd8>)
 800640e:	441a      	add	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3304      	adds	r3, #4
 8006414:	4619      	mov	r1, r3
 8006416:	4610      	mov	r0, r2
 8006418:	f7ff f81d 	bl	8005456 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800641c:	f001 fa2a 	bl	8007874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006420:	4b0d      	ldr	r3, [pc, #52]	; (8006458 <prvAddNewTaskToReadyList+0xcc>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00e      	beq.n	8006446 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006428:	4b0a      	ldr	r3, [pc, #40]	; (8006454 <prvAddNewTaskToReadyList+0xc8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	429a      	cmp	r2, r3
 8006434:	d207      	bcs.n	8006446 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006436:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <prvAddNewTaskToReadyList+0xdc>)
 8006438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20000c6c 	.word	0x20000c6c
 8006454:	20000798 	.word	0x20000798
 8006458:	20000c78 	.word	0x20000c78
 800645c:	20000c88 	.word	0x20000c88
 8006460:	20000c74 	.word	0x20000c74
 8006464:	2000079c 	.word	0x2000079c
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d017      	beq.n	80064ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800647e:	4b13      	ldr	r3, [pc, #76]	; (80064cc <vTaskDelay+0x60>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <vTaskDelay+0x30>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	60bb      	str	r3, [r7, #8]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800649c:	f000 f880 	bl	80065a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064a0:	2100      	movs	r1, #0
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fcea 	bl	8006e7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064a8:	f000 f888 	bl	80065bc <xTaskResumeAll>
 80064ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d107      	bne.n	80064c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064b4:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <vTaskDelay+0x64>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064c4:	bf00      	nop
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20000c94 	.word	0x20000c94
 80064d0:	e000ed04 	.word	0xe000ed04

080064d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08a      	sub	sp, #40	; 0x28
 80064d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064e2:	463a      	mov	r2, r7
 80064e4:	1d39      	adds	r1, r7, #4
 80064e6:	f107 0308 	add.w	r3, r7, #8
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe ff52 	bl	8005394 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	9202      	str	r2, [sp, #8]
 80064f8:	9301      	str	r3, [sp, #4]
 80064fa:	2300      	movs	r3, #0
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	2300      	movs	r3, #0
 8006500:	460a      	mov	r2, r1
 8006502:	4921      	ldr	r1, [pc, #132]	; (8006588 <vTaskStartScheduler+0xb4>)
 8006504:	4821      	ldr	r0, [pc, #132]	; (800658c <vTaskStartScheduler+0xb8>)
 8006506:	f7ff fe0f 	bl	8006128 <xTaskCreateStatic>
 800650a:	4603      	mov	r3, r0
 800650c:	4a20      	ldr	r2, [pc, #128]	; (8006590 <vTaskStartScheduler+0xbc>)
 800650e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006510:	4b1f      	ldr	r3, [pc, #124]	; (8006590 <vTaskStartScheduler+0xbc>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006518:	2301      	movs	r3, #1
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	e001      	b.n	8006522 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d102      	bne.n	800652e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006528:	f000 fcfc 	bl	8006f24 <xTimerCreateTimerTask>
 800652c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d116      	bne.n	8006562 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	613b      	str	r3, [r7, #16]
}
 8006546:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006548:	4b12      	ldr	r3, [pc, #72]	; (8006594 <vTaskStartScheduler+0xc0>)
 800654a:	f04f 32ff 	mov.w	r2, #4294967295
 800654e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006550:	4b11      	ldr	r3, [pc, #68]	; (8006598 <vTaskStartScheduler+0xc4>)
 8006552:	2201      	movs	r2, #1
 8006554:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006556:	4b11      	ldr	r3, [pc, #68]	; (800659c <vTaskStartScheduler+0xc8>)
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800655c:	f001 f8b8 	bl	80076d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006560:	e00e      	b.n	8006580 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006568:	d10a      	bne.n	8006580 <vTaskStartScheduler+0xac>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	60fb      	str	r3, [r7, #12]
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <vTaskStartScheduler+0xaa>
}
 8006580:	bf00      	nop
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	080099bc 	.word	0x080099bc
 800658c:	08006bb9 	.word	0x08006bb9
 8006590:	20000c90 	.word	0x20000c90
 8006594:	20000c8c 	.word	0x20000c8c
 8006598:	20000c78 	.word	0x20000c78
 800659c:	20000c70 	.word	0x20000c70

080065a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065a4:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <vTaskSuspendAll+0x18>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3301      	adds	r3, #1
 80065aa:	4a03      	ldr	r2, [pc, #12]	; (80065b8 <vTaskSuspendAll+0x18>)
 80065ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065ae:	bf00      	nop
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	20000c94 	.word	0x20000c94

080065bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065ca:	4b42      	ldr	r3, [pc, #264]	; (80066d4 <xTaskResumeAll+0x118>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10a      	bne.n	80065e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	603b      	str	r3, [r7, #0]
}
 80065e4:	bf00      	nop
 80065e6:	e7fe      	b.n	80065e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065e8:	f001 f914 	bl	8007814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065ec:	4b39      	ldr	r3, [pc, #228]	; (80066d4 <xTaskResumeAll+0x118>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	4a38      	ldr	r2, [pc, #224]	; (80066d4 <xTaskResumeAll+0x118>)
 80065f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065f6:	4b37      	ldr	r3, [pc, #220]	; (80066d4 <xTaskResumeAll+0x118>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d162      	bne.n	80066c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065fe:	4b36      	ldr	r3, [pc, #216]	; (80066d8 <xTaskResumeAll+0x11c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d05e      	beq.n	80066c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006606:	e02f      	b.n	8006668 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006608:	4b34      	ldr	r3, [pc, #208]	; (80066dc <xTaskResumeAll+0x120>)
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3318      	adds	r3, #24
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe ff7b 	bl	8005510 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3304      	adds	r3, #4
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe ff76 	bl	8005510 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006628:	4b2d      	ldr	r3, [pc, #180]	; (80066e0 <xTaskResumeAll+0x124>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d903      	bls.n	8006638 <xTaskResumeAll+0x7c>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	4a2a      	ldr	r2, [pc, #168]	; (80066e0 <xTaskResumeAll+0x124>)
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663c:	4613      	mov	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4a27      	ldr	r2, [pc, #156]	; (80066e4 <xTaskResumeAll+0x128>)
 8006646:	441a      	add	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3304      	adds	r3, #4
 800664c:	4619      	mov	r1, r3
 800664e:	4610      	mov	r0, r2
 8006650:	f7fe ff01 	bl	8005456 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006658:	4b23      	ldr	r3, [pc, #140]	; (80066e8 <xTaskResumeAll+0x12c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	429a      	cmp	r2, r3
 8006660:	d302      	bcc.n	8006668 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006662:	4b22      	ldr	r3, [pc, #136]	; (80066ec <xTaskResumeAll+0x130>)
 8006664:	2201      	movs	r2, #1
 8006666:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006668:	4b1c      	ldr	r3, [pc, #112]	; (80066dc <xTaskResumeAll+0x120>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1cb      	bne.n	8006608 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006676:	f000 fb55 	bl	8006d24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800667a:	4b1d      	ldr	r3, [pc, #116]	; (80066f0 <xTaskResumeAll+0x134>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d010      	beq.n	80066a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006686:	f000 f847 	bl	8006718 <xTaskIncrementTick>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006690:	4b16      	ldr	r3, [pc, #88]	; (80066ec <xTaskResumeAll+0x130>)
 8006692:	2201      	movs	r2, #1
 8006694:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3b01      	subs	r3, #1
 800669a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f1      	bne.n	8006686 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80066a2:	4b13      	ldr	r3, [pc, #76]	; (80066f0 <xTaskResumeAll+0x134>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066a8:	4b10      	ldr	r3, [pc, #64]	; (80066ec <xTaskResumeAll+0x130>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d009      	beq.n	80066c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066b4:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <xTaskResumeAll+0x138>)
 80066b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066c4:	f001 f8d6 	bl	8007874 <vPortExitCritical>

	return xAlreadyYielded;
 80066c8:	68bb      	ldr	r3, [r7, #8]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000c94 	.word	0x20000c94
 80066d8:	20000c6c 	.word	0x20000c6c
 80066dc:	20000c2c 	.word	0x20000c2c
 80066e0:	20000c74 	.word	0x20000c74
 80066e4:	2000079c 	.word	0x2000079c
 80066e8:	20000798 	.word	0x20000798
 80066ec:	20000c80 	.word	0x20000c80
 80066f0:	20000c7c 	.word	0x20000c7c
 80066f4:	e000ed04 	.word	0xe000ed04

080066f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066fe:	4b05      	ldr	r3, [pc, #20]	; (8006714 <xTaskGetTickCount+0x1c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006704:	687b      	ldr	r3, [r7, #4]
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000c70 	.word	0x20000c70

08006718 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800671e:	2300      	movs	r3, #0
 8006720:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006722:	4b4f      	ldr	r3, [pc, #316]	; (8006860 <xTaskIncrementTick+0x148>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f040 808f 	bne.w	800684a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800672c:	4b4d      	ldr	r3, [pc, #308]	; (8006864 <xTaskIncrementTick+0x14c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3301      	adds	r3, #1
 8006732:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006734:	4a4b      	ldr	r2, [pc, #300]	; (8006864 <xTaskIncrementTick+0x14c>)
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d120      	bne.n	8006782 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006740:	4b49      	ldr	r3, [pc, #292]	; (8006868 <xTaskIncrementTick+0x150>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <xTaskIncrementTick+0x48>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	603b      	str	r3, [r7, #0]
}
 800675c:	bf00      	nop
 800675e:	e7fe      	b.n	800675e <xTaskIncrementTick+0x46>
 8006760:	4b41      	ldr	r3, [pc, #260]	; (8006868 <xTaskIncrementTick+0x150>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	4b41      	ldr	r3, [pc, #260]	; (800686c <xTaskIncrementTick+0x154>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a3f      	ldr	r2, [pc, #252]	; (8006868 <xTaskIncrementTick+0x150>)
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	4a3f      	ldr	r2, [pc, #252]	; (800686c <xTaskIncrementTick+0x154>)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	4b3e      	ldr	r3, [pc, #248]	; (8006870 <xTaskIncrementTick+0x158>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3301      	adds	r3, #1
 800677a:	4a3d      	ldr	r2, [pc, #244]	; (8006870 <xTaskIncrementTick+0x158>)
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	f000 fad1 	bl	8006d24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006782:	4b3c      	ldr	r3, [pc, #240]	; (8006874 <xTaskIncrementTick+0x15c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	429a      	cmp	r2, r3
 800678a:	d349      	bcc.n	8006820 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800678c:	4b36      	ldr	r3, [pc, #216]	; (8006868 <xTaskIncrementTick+0x150>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d104      	bne.n	80067a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006796:	4b37      	ldr	r3, [pc, #220]	; (8006874 <xTaskIncrementTick+0x15c>)
 8006798:	f04f 32ff 	mov.w	r2, #4294967295
 800679c:	601a      	str	r2, [r3, #0]
					break;
 800679e:	e03f      	b.n	8006820 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a0:	4b31      	ldr	r3, [pc, #196]	; (8006868 <xTaskIncrementTick+0x150>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d203      	bcs.n	80067c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067b8:	4a2e      	ldr	r2, [pc, #184]	; (8006874 <xTaskIncrementTick+0x15c>)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067be:	e02f      	b.n	8006820 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fea3 	bl	8005510 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d004      	beq.n	80067dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	3318      	adds	r3, #24
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe fe9a 	bl	8005510 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e0:	4b25      	ldr	r3, [pc, #148]	; (8006878 <xTaskIncrementTick+0x160>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d903      	bls.n	80067f0 <xTaskIncrementTick+0xd8>
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	4a22      	ldr	r2, [pc, #136]	; (8006878 <xTaskIncrementTick+0x160>)
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4a1f      	ldr	r2, [pc, #124]	; (800687c <xTaskIncrementTick+0x164>)
 80067fe:	441a      	add	r2, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f7fe fe25 	bl	8005456 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006810:	4b1b      	ldr	r3, [pc, #108]	; (8006880 <xTaskIncrementTick+0x168>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006816:	429a      	cmp	r2, r3
 8006818:	d3b8      	bcc.n	800678c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800681a:	2301      	movs	r3, #1
 800681c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800681e:	e7b5      	b.n	800678c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006820:	4b17      	ldr	r3, [pc, #92]	; (8006880 <xTaskIncrementTick+0x168>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006826:	4915      	ldr	r1, [pc, #84]	; (800687c <xTaskIncrementTick+0x164>)
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d901      	bls.n	800683c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006838:	2301      	movs	r3, #1
 800683a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800683c:	4b11      	ldr	r3, [pc, #68]	; (8006884 <xTaskIncrementTick+0x16c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d007      	beq.n	8006854 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006844:	2301      	movs	r3, #1
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	e004      	b.n	8006854 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800684a:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <xTaskIncrementTick+0x170>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3301      	adds	r3, #1
 8006850:	4a0d      	ldr	r2, [pc, #52]	; (8006888 <xTaskIncrementTick+0x170>)
 8006852:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006854:	697b      	ldr	r3, [r7, #20]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000c94 	.word	0x20000c94
 8006864:	20000c70 	.word	0x20000c70
 8006868:	20000c24 	.word	0x20000c24
 800686c:	20000c28 	.word	0x20000c28
 8006870:	20000c84 	.word	0x20000c84
 8006874:	20000c8c 	.word	0x20000c8c
 8006878:	20000c74 	.word	0x20000c74
 800687c:	2000079c 	.word	0x2000079c
 8006880:	20000798 	.word	0x20000798
 8006884:	20000c80 	.word	0x20000c80
 8006888:	20000c7c 	.word	0x20000c7c

0800688c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006892:	4b28      	ldr	r3, [pc, #160]	; (8006934 <vTaskSwitchContext+0xa8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800689a:	4b27      	ldr	r3, [pc, #156]	; (8006938 <vTaskSwitchContext+0xac>)
 800689c:	2201      	movs	r2, #1
 800689e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068a0:	e041      	b.n	8006926 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80068a2:	4b25      	ldr	r3, [pc, #148]	; (8006938 <vTaskSwitchContext+0xac>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a8:	4b24      	ldr	r3, [pc, #144]	; (800693c <vTaskSwitchContext+0xb0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	e010      	b.n	80068d2 <vTaskSwitchContext+0x46>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <vTaskSwitchContext+0x40>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	607b      	str	r3, [r7, #4]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <vTaskSwitchContext+0x3e>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	491b      	ldr	r1, [pc, #108]	; (8006940 <vTaskSwitchContext+0xb4>)
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0e4      	beq.n	80068b0 <vTaskSwitchContext+0x24>
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4613      	mov	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4a13      	ldr	r2, [pc, #76]	; (8006940 <vTaskSwitchContext+0xb4>)
 80068f2:	4413      	add	r3, r2
 80068f4:	60bb      	str	r3, [r7, #8]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	605a      	str	r2, [r3, #4]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	3308      	adds	r3, #8
 8006908:	429a      	cmp	r2, r3
 800690a:	d104      	bne.n	8006916 <vTaskSwitchContext+0x8a>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	605a      	str	r2, [r3, #4]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	4a09      	ldr	r2, [pc, #36]	; (8006944 <vTaskSwitchContext+0xb8>)
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	4a06      	ldr	r2, [pc, #24]	; (800693c <vTaskSwitchContext+0xb0>)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6013      	str	r3, [r2, #0]
}
 8006926:	bf00      	nop
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000c94 	.word	0x20000c94
 8006938:	20000c80 	.word	0x20000c80
 800693c:	20000c74 	.word	0x20000c74
 8006940:	2000079c 	.word	0x2000079c
 8006944:	20000798 	.word	0x20000798

08006948 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	60fb      	str	r3, [r7, #12]
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800696e:	4b07      	ldr	r3, [pc, #28]	; (800698c <vTaskPlaceOnEventList+0x44>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3318      	adds	r3, #24
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fe fd91 	bl	800549e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800697c:	2101      	movs	r1, #1
 800697e:	6838      	ldr	r0, [r7, #0]
 8006980:	f000 fa7c 	bl	8006e7c <prvAddCurrentTaskToDelayedList>
}
 8006984:	bf00      	nop
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20000798 	.word	0x20000798

08006990 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	617b      	str	r3, [r7, #20]
}
 80069b4:	bf00      	nop
 80069b6:	e7fe      	b.n	80069b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069b8:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3318      	adds	r3, #24
 80069be:	4619      	mov	r1, r3
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7fe fd48 	bl	8005456 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80069cc:	f04f 33ff 	mov.w	r3, #4294967295
 80069d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	68b8      	ldr	r0, [r7, #8]
 80069d6:	f000 fa51 	bl	8006e7c <prvAddCurrentTaskToDelayedList>
	}
 80069da:	bf00      	nop
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000798 	.word	0x20000798

080069e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60fb      	str	r3, [r7, #12]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	3318      	adds	r3, #24
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fe fd79 	bl	8005510 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a1e:	4b1e      	ldr	r3, [pc, #120]	; (8006a98 <xTaskRemoveFromEventList+0xb0>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d11d      	bne.n	8006a62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fe fd70 	bl	8005510 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a34:	4b19      	ldr	r3, [pc, #100]	; (8006a9c <xTaskRemoveFromEventList+0xb4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d903      	bls.n	8006a44 <xTaskRemoveFromEventList+0x5c>
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	4a16      	ldr	r2, [pc, #88]	; (8006a9c <xTaskRemoveFromEventList+0xb4>)
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4a13      	ldr	r2, [pc, #76]	; (8006aa0 <xTaskRemoveFromEventList+0xb8>)
 8006a52:	441a      	add	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f7fe fcfb 	bl	8005456 <vListInsertEnd>
 8006a60:	e005      	b.n	8006a6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	3318      	adds	r3, #24
 8006a66:	4619      	mov	r1, r3
 8006a68:	480e      	ldr	r0, [pc, #56]	; (8006aa4 <xTaskRemoveFromEventList+0xbc>)
 8006a6a:	f7fe fcf4 	bl	8005456 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a72:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <xTaskRemoveFromEventList+0xc0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d905      	bls.n	8006a88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a80:	4b0a      	ldr	r3, [pc, #40]	; (8006aac <xTaskRemoveFromEventList+0xc4>)
 8006a82:	2201      	movs	r2, #1
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	e001      	b.n	8006a8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a8c:	697b      	ldr	r3, [r7, #20]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000c94 	.word	0x20000c94
 8006a9c:	20000c74 	.word	0x20000c74
 8006aa0:	2000079c 	.word	0x2000079c
 8006aa4:	20000c2c 	.word	0x20000c2c
 8006aa8:	20000798 	.word	0x20000798
 8006aac:	20000c80 	.word	0x20000c80

08006ab0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ab8:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <vTaskInternalSetTimeOutState+0x24>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ac0:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <vTaskInternalSetTimeOutState+0x28>)
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	605a      	str	r2, [r3, #4]
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	20000c84 	.word	0x20000c84
 8006ad8:	20000c70 	.word	0x20000c70

08006adc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	613b      	str	r3, [r7, #16]
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	60fb      	str	r3, [r7, #12]
}
 8006b1a:	bf00      	nop
 8006b1c:	e7fe      	b.n	8006b1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b1e:	f000 fe79 	bl	8007814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b22:	4b1d      	ldr	r3, [pc, #116]	; (8006b98 <xTaskCheckForTimeOut+0xbc>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3a:	d102      	bne.n	8006b42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	e023      	b.n	8006b8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <xTaskCheckForTimeOut+0xc0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d007      	beq.n	8006b5e <xTaskCheckForTimeOut+0x82>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d302      	bcc.n	8006b5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	61fb      	str	r3, [r7, #28]
 8006b5c:	e015      	b.n	8006b8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d20b      	bcs.n	8006b80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff ff9b 	bl	8006ab0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61fb      	str	r3, [r7, #28]
 8006b7e:	e004      	b.n	8006b8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b86:	2301      	movs	r3, #1
 8006b88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b8a:	f000 fe73 	bl	8007874 <vPortExitCritical>

	return xReturn;
 8006b8e:	69fb      	ldr	r3, [r7, #28]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	20000c70 	.word	0x20000c70
 8006b9c:	20000c84 	.word	0x20000c84

08006ba0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ba4:	4b03      	ldr	r3, [pc, #12]	; (8006bb4 <vTaskMissedYield+0x14>)
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
}
 8006baa:	bf00      	nop
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	20000c80 	.word	0x20000c80

08006bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bc0:	f000 f852 	bl	8006c68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <prvIdleTask+0x28>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d9f9      	bls.n	8006bc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bcc:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <prvIdleTask+0x2c>)
 8006bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bdc:	e7f0      	b.n	8006bc0 <prvIdleTask+0x8>
 8006bde:	bf00      	nop
 8006be0:	2000079c 	.word	0x2000079c
 8006be4:	e000ed04 	.word	0xe000ed04

08006be8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bee:	2300      	movs	r3, #0
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	e00c      	b.n	8006c0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4a12      	ldr	r2, [pc, #72]	; (8006c48 <prvInitialiseTaskLists+0x60>)
 8006c00:	4413      	add	r3, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe fbfa 	bl	80053fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	607b      	str	r3, [r7, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b37      	cmp	r3, #55	; 0x37
 8006c12:	d9ef      	bls.n	8006bf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c14:	480d      	ldr	r0, [pc, #52]	; (8006c4c <prvInitialiseTaskLists+0x64>)
 8006c16:	f7fe fbf1 	bl	80053fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c1a:	480d      	ldr	r0, [pc, #52]	; (8006c50 <prvInitialiseTaskLists+0x68>)
 8006c1c:	f7fe fbee 	bl	80053fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c20:	480c      	ldr	r0, [pc, #48]	; (8006c54 <prvInitialiseTaskLists+0x6c>)
 8006c22:	f7fe fbeb 	bl	80053fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c26:	480c      	ldr	r0, [pc, #48]	; (8006c58 <prvInitialiseTaskLists+0x70>)
 8006c28:	f7fe fbe8 	bl	80053fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c2c:	480b      	ldr	r0, [pc, #44]	; (8006c5c <prvInitialiseTaskLists+0x74>)
 8006c2e:	f7fe fbe5 	bl	80053fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c32:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <prvInitialiseTaskLists+0x78>)
 8006c34:	4a05      	ldr	r2, [pc, #20]	; (8006c4c <prvInitialiseTaskLists+0x64>)
 8006c36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c38:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <prvInitialiseTaskLists+0x7c>)
 8006c3a:	4a05      	ldr	r2, [pc, #20]	; (8006c50 <prvInitialiseTaskLists+0x68>)
 8006c3c:	601a      	str	r2, [r3, #0]
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	2000079c 	.word	0x2000079c
 8006c4c:	20000bfc 	.word	0x20000bfc
 8006c50:	20000c10 	.word	0x20000c10
 8006c54:	20000c2c 	.word	0x20000c2c
 8006c58:	20000c40 	.word	0x20000c40
 8006c5c:	20000c58 	.word	0x20000c58
 8006c60:	20000c24 	.word	0x20000c24
 8006c64:	20000c28 	.word	0x20000c28

08006c68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c6e:	e019      	b.n	8006ca4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c70:	f000 fdd0 	bl	8007814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c74:	4b10      	ldr	r3, [pc, #64]	; (8006cb8 <prvCheckTasksWaitingTermination+0x50>)
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe fc45 	bl	8005510 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c86:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <prvCheckTasksWaitingTermination+0x54>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	4a0b      	ldr	r2, [pc, #44]	; (8006cbc <prvCheckTasksWaitingTermination+0x54>)
 8006c8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c90:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <prvCheckTasksWaitingTermination+0x58>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	4a0a      	ldr	r2, [pc, #40]	; (8006cc0 <prvCheckTasksWaitingTermination+0x58>)
 8006c98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c9a:	f000 fdeb 	bl	8007874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f810 	bl	8006cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <prvCheckTasksWaitingTermination+0x58>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e1      	bne.n	8006c70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000c40 	.word	0x20000c40
 8006cbc:	20000c6c 	.word	0x20000c6c
 8006cc0:	20000c54 	.word	0x20000c54

08006cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d108      	bne.n	8006ce8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 ff88 	bl	8007bf0 <vPortFree>
				vPortFree( pxTCB );
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 ff85 	bl	8007bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ce6:	e018      	b.n	8006d1a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d103      	bne.n	8006cfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 ff7c 	bl	8007bf0 <vPortFree>
	}
 8006cf8:	e00f      	b.n	8006d1a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d00a      	beq.n	8006d1a <prvDeleteTCB+0x56>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	60fb      	str	r3, [r7, #12]
}
 8006d16:	bf00      	nop
 8006d18:	e7fe      	b.n	8006d18 <prvDeleteTCB+0x54>
	}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d2a:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <prvResetNextTaskUnblockTime+0x38>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d34:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <prvResetNextTaskUnblockTime+0x3c>)
 8006d36:	f04f 32ff 	mov.w	r2, #4294967295
 8006d3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d3c:	e008      	b.n	8006d50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d3e:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <prvResetNextTaskUnblockTime+0x38>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	4a04      	ldr	r2, [pc, #16]	; (8006d60 <prvResetNextTaskUnblockTime+0x3c>)
 8006d4e:	6013      	str	r3, [r2, #0]
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	20000c24 	.word	0x20000c24
 8006d60:	20000c8c 	.word	0x20000c8c

08006d64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <xTaskGetSchedulerState+0x34>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d102      	bne.n	8006d78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d72:	2301      	movs	r3, #1
 8006d74:	607b      	str	r3, [r7, #4]
 8006d76:	e008      	b.n	8006d8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d78:	4b08      	ldr	r3, [pc, #32]	; (8006d9c <xTaskGetSchedulerState+0x38>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d102      	bne.n	8006d86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d80:	2302      	movs	r3, #2
 8006d82:	607b      	str	r3, [r7, #4]
 8006d84:	e001      	b.n	8006d8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d86:	2300      	movs	r3, #0
 8006d88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d8a:	687b      	ldr	r3, [r7, #4]
	}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	20000c78 	.word	0x20000c78
 8006d9c:	20000c94 	.word	0x20000c94

08006da0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d056      	beq.n	8006e64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006db6:	4b2e      	ldr	r3, [pc, #184]	; (8006e70 <xTaskPriorityDisinherit+0xd0>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d00a      	beq.n	8006dd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	60fb      	str	r3, [r7, #12]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10a      	bne.n	8006df4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	60bb      	str	r3, [r7, #8]
}
 8006df0:	bf00      	nop
 8006df2:	e7fe      	b.n	8006df2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df8:	1e5a      	subs	r2, r3, #1
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d02c      	beq.n	8006e64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d128      	bne.n	8006e64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	3304      	adds	r3, #4
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fe fb7a 	bl	8005510 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e34:	4b0f      	ldr	r3, [pc, #60]	; (8006e74 <xTaskPriorityDisinherit+0xd4>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d903      	bls.n	8006e44 <xTaskPriorityDisinherit+0xa4>
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	4a0c      	ldr	r2, [pc, #48]	; (8006e74 <xTaskPriorityDisinherit+0xd4>)
 8006e42:	6013      	str	r3, [r2, #0]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4a09      	ldr	r2, [pc, #36]	; (8006e78 <xTaskPriorityDisinherit+0xd8>)
 8006e52:	441a      	add	r2, r3
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	3304      	adds	r3, #4
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	f7fe fafb 	bl	8005456 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e60:	2301      	movs	r3, #1
 8006e62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e64:	697b      	ldr	r3, [r7, #20]
	}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000798 	.word	0x20000798
 8006e74:	20000c74 	.word	0x20000c74
 8006e78:	2000079c 	.word	0x2000079c

08006e7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e86:	4b21      	ldr	r3, [pc, #132]	; (8006f0c <prvAddCurrentTaskToDelayedList+0x90>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e8c:	4b20      	ldr	r3, [pc, #128]	; (8006f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3304      	adds	r3, #4
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe fb3c 	bl	8005510 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9e:	d10a      	bne.n	8006eb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4619      	mov	r1, r3
 8006eae:	4819      	ldr	r0, [pc, #100]	; (8006f14 <prvAddCurrentTaskToDelayedList+0x98>)
 8006eb0:	f7fe fad1 	bl	8005456 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006eb4:	e026      	b.n	8006f04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4413      	add	r3, r2
 8006ebc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ebe:	4b14      	ldr	r3, [pc, #80]	; (8006f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d209      	bcs.n	8006ee2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ece:	4b12      	ldr	r3, [pc, #72]	; (8006f18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	4b0f      	ldr	r3, [pc, #60]	; (8006f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f7fe fadf 	bl	800549e <vListInsert>
}
 8006ee0:	e010      	b.n	8006f04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ee2:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f7fe fad5 	bl	800549e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d202      	bcs.n	8006f04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006efe:	4a08      	ldr	r2, [pc, #32]	; (8006f20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	6013      	str	r3, [r2, #0]
}
 8006f04:	bf00      	nop
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	20000c70 	.word	0x20000c70
 8006f10:	20000798 	.word	0x20000798
 8006f14:	20000c58 	.word	0x20000c58
 8006f18:	20000c28 	.word	0x20000c28
 8006f1c:	20000c24 	.word	0x20000c24
 8006f20:	20000c8c 	.word	0x20000c8c

08006f24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08a      	sub	sp, #40	; 0x28
 8006f28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f2e:	f000 fb07 	bl	8007540 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f32:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <xTimerCreateTimerTask+0x80>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d021      	beq.n	8006f7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f42:	1d3a      	adds	r2, r7, #4
 8006f44:	f107 0108 	add.w	r1, r7, #8
 8006f48:	f107 030c 	add.w	r3, r7, #12
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fe fa3b 	bl	80053c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	9202      	str	r2, [sp, #8]
 8006f5a:	9301      	str	r3, [sp, #4]
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	2300      	movs	r3, #0
 8006f62:	460a      	mov	r2, r1
 8006f64:	4910      	ldr	r1, [pc, #64]	; (8006fa8 <xTimerCreateTimerTask+0x84>)
 8006f66:	4811      	ldr	r0, [pc, #68]	; (8006fac <xTimerCreateTimerTask+0x88>)
 8006f68:	f7ff f8de 	bl	8006128 <xTaskCreateStatic>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	4a10      	ldr	r2, [pc, #64]	; (8006fb0 <xTimerCreateTimerTask+0x8c>)
 8006f70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f72:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <xTimerCreateTimerTask+0x8c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10a      	bne.n	8006f9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	613b      	str	r3, [r7, #16]
}
 8006f96:	bf00      	nop
 8006f98:	e7fe      	b.n	8006f98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f9a:	697b      	ldr	r3, [r7, #20]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	20000cc8 	.word	0x20000cc8
 8006fa8:	080099c4 	.word	0x080099c4
 8006fac:	080070e9 	.word	0x080070e9
 8006fb0:	20000ccc 	.word	0x20000ccc

08006fb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	; 0x28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10a      	bne.n	8006fe2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	623b      	str	r3, [r7, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006fe2:	4b1a      	ldr	r3, [pc, #104]	; (800704c <xTimerGenericCommand+0x98>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d02a      	beq.n	8007040 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b05      	cmp	r3, #5
 8006ffa:	dc18      	bgt.n	800702e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ffc:	f7ff feb2 	bl	8006d64 <xTaskGetSchedulerState>
 8007000:	4603      	mov	r3, r0
 8007002:	2b02      	cmp	r3, #2
 8007004:	d109      	bne.n	800701a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007006:	4b11      	ldr	r3, [pc, #68]	; (800704c <xTimerGenericCommand+0x98>)
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	f107 0110 	add.w	r1, r7, #16
 800700e:	2300      	movs	r3, #0
 8007010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007012:	f7fe fbe5 	bl	80057e0 <xQueueGenericSend>
 8007016:	6278      	str	r0, [r7, #36]	; 0x24
 8007018:	e012      	b.n	8007040 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800701a:	4b0c      	ldr	r3, [pc, #48]	; (800704c <xTimerGenericCommand+0x98>)
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	f107 0110 	add.w	r1, r7, #16
 8007022:	2300      	movs	r3, #0
 8007024:	2200      	movs	r2, #0
 8007026:	f7fe fbdb 	bl	80057e0 <xQueueGenericSend>
 800702a:	6278      	str	r0, [r7, #36]	; 0x24
 800702c:	e008      	b.n	8007040 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800702e:	4b07      	ldr	r3, [pc, #28]	; (800704c <xTimerGenericCommand+0x98>)
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	f107 0110 	add.w	r1, r7, #16
 8007036:	2300      	movs	r3, #0
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	f7fe fccf 	bl	80059dc <xQueueGenericSendFromISR>
 800703e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007042:	4618      	mov	r0, r3
 8007044:	3728      	adds	r7, #40	; 0x28
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20000cc8 	.word	0x20000cc8

08007050 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af02      	add	r7, sp, #8
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800705a:	4b22      	ldr	r3, [pc, #136]	; (80070e4 <prvProcessExpiredTimer+0x94>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	3304      	adds	r3, #4
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe fa51 	bl	8005510 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d022      	beq.n	80070c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	699a      	ldr	r2, [r3, #24]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	18d1      	adds	r1, r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	6978      	ldr	r0, [r7, #20]
 800708a:	f000 f8d1 	bl	8007230 <prvInsertTimerInActiveList>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01f      	beq.n	80070d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007094:	2300      	movs	r3, #0
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	2300      	movs	r3, #0
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	2100      	movs	r1, #0
 800709e:	6978      	ldr	r0, [r7, #20]
 80070a0:	f7ff ff88 	bl	8006fb4 <xTimerGenericCommand>
 80070a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d113      	bne.n	80070d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	60fb      	str	r3, [r7, #12]
}
 80070be:	bf00      	nop
 80070c0:	e7fe      	b.n	80070c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c8:	f023 0301 	bic.w	r3, r3, #1
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	6978      	ldr	r0, [r7, #20]
 80070da:	4798      	blx	r3
}
 80070dc:	bf00      	nop
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	20000cc0 	.word	0x20000cc0

080070e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070f0:	f107 0308 	add.w	r3, r7, #8
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 f857 	bl	80071a8 <prvGetNextExpireTime>
 80070fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4619      	mov	r1, r3
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 f803 	bl	800710c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007106:	f000 f8d5 	bl	80072b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800710a:	e7f1      	b.n	80070f0 <prvTimerTask+0x8>

0800710c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007116:	f7ff fa43 	bl	80065a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800711a:	f107 0308 	add.w	r3, r7, #8
 800711e:	4618      	mov	r0, r3
 8007120:	f000 f866 	bl	80071f0 <prvSampleTimeNow>
 8007124:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d130      	bne.n	800718e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10a      	bne.n	8007148 <prvProcessTimerOrBlockTask+0x3c>
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	429a      	cmp	r2, r3
 8007138:	d806      	bhi.n	8007148 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800713a:	f7ff fa3f 	bl	80065bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800713e:	68f9      	ldr	r1, [r7, #12]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff ff85 	bl	8007050 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007146:	e024      	b.n	8007192 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d008      	beq.n	8007160 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800714e:	4b13      	ldr	r3, [pc, #76]	; (800719c <prvProcessTimerOrBlockTask+0x90>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <prvProcessTimerOrBlockTask+0x50>
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <prvProcessTimerOrBlockTask+0x52>
 800715c:	2300      	movs	r3, #0
 800715e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007160:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <prvProcessTimerOrBlockTask+0x94>)
 8007162:	6818      	ldr	r0, [r3, #0]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	4619      	mov	r1, r3
 800716e:	f7fe ffa7 	bl	80060c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007172:	f7ff fa23 	bl	80065bc <xTaskResumeAll>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <prvProcessTimerOrBlockTask+0x98>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	f3bf 8f6f 	isb	sy
}
 800718c:	e001      	b.n	8007192 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800718e:	f7ff fa15 	bl	80065bc <xTaskResumeAll>
}
 8007192:	bf00      	nop
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000cc4 	.word	0x20000cc4
 80071a0:	20000cc8 	.word	0x20000cc8
 80071a4:	e000ed04 	.word	0xe000ed04

080071a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071b0:	4b0e      	ldr	r3, [pc, #56]	; (80071ec <prvGetNextExpireTime+0x44>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <prvGetNextExpireTime+0x16>
 80071ba:	2201      	movs	r2, #1
 80071bc:	e000      	b.n	80071c0 <prvGetNextExpireTime+0x18>
 80071be:	2200      	movs	r2, #0
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d105      	bne.n	80071d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071cc:	4b07      	ldr	r3, [pc, #28]	; (80071ec <prvGetNextExpireTime+0x44>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	e001      	b.n	80071dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071dc:	68fb      	ldr	r3, [r7, #12]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	20000cc0 	.word	0x20000cc0

080071f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071f8:	f7ff fa7e 	bl	80066f8 <xTaskGetTickCount>
 80071fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071fe:	4b0b      	ldr	r3, [pc, #44]	; (800722c <prvSampleTimeNow+0x3c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	429a      	cmp	r2, r3
 8007206:	d205      	bcs.n	8007214 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007208:	f000 f936 	bl	8007478 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	e002      	b.n	800721a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800721a:	4a04      	ldr	r2, [pc, #16]	; (800722c <prvSampleTimeNow+0x3c>)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007220:	68fb      	ldr	r3, [r7, #12]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000cd0 	.word	0x20000cd0

08007230 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800723e:	2300      	movs	r3, #0
 8007240:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	429a      	cmp	r2, r3
 8007254:	d812      	bhi.n	800727c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	1ad2      	subs	r2, r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	429a      	cmp	r2, r3
 8007262:	d302      	bcc.n	800726a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007264:	2301      	movs	r3, #1
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	e01b      	b.n	80072a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800726a:	4b10      	ldr	r3, [pc, #64]	; (80072ac <prvInsertTimerInActiveList+0x7c>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3304      	adds	r3, #4
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f7fe f912 	bl	800549e <vListInsert>
 800727a:	e012      	b.n	80072a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d206      	bcs.n	8007292 <prvInsertTimerInActiveList+0x62>
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	429a      	cmp	r2, r3
 800728a:	d302      	bcc.n	8007292 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800728c:	2301      	movs	r3, #1
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	e007      	b.n	80072a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007292:	4b07      	ldr	r3, [pc, #28]	; (80072b0 <prvInsertTimerInActiveList+0x80>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3304      	adds	r3, #4
 800729a:	4619      	mov	r1, r3
 800729c:	4610      	mov	r0, r2
 800729e:	f7fe f8fe 	bl	800549e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072a2:	697b      	ldr	r3, [r7, #20]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	20000cc4 	.word	0x20000cc4
 80072b0:	20000cc0 	.word	0x20000cc0

080072b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08e      	sub	sp, #56	; 0x38
 80072b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072ba:	e0ca      	b.n	8007452 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	da18      	bge.n	80072f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072c2:	1d3b      	adds	r3, r7, #4
 80072c4:	3304      	adds	r3, #4
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10a      	bne.n	80072e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	61fb      	str	r3, [r7, #28]
}
 80072e0:	bf00      	nop
 80072e2:	e7fe      	b.n	80072e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ea:	6850      	ldr	r0, [r2, #4]
 80072ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ee:	6892      	ldr	r2, [r2, #8]
 80072f0:	4611      	mov	r1, r2
 80072f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f2c0 80aa 	blt.w	8007450 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	3304      	adds	r3, #4
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe f8ff 	bl	8005510 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007312:	463b      	mov	r3, r7
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff ff6b 	bl	80071f0 <prvSampleTimeNow>
 800731a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b09      	cmp	r3, #9
 8007320:	f200 8097 	bhi.w	8007452 <prvProcessReceivedCommands+0x19e>
 8007324:	a201      	add	r2, pc, #4	; (adr r2, 800732c <prvProcessReceivedCommands+0x78>)
 8007326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732a:	bf00      	nop
 800732c:	08007355 	.word	0x08007355
 8007330:	08007355 	.word	0x08007355
 8007334:	08007355 	.word	0x08007355
 8007338:	080073c9 	.word	0x080073c9
 800733c:	080073dd 	.word	0x080073dd
 8007340:	08007427 	.word	0x08007427
 8007344:	08007355 	.word	0x08007355
 8007348:	08007355 	.word	0x08007355
 800734c:	080073c9 	.word	0x080073c9
 8007350:	080073dd 	.word	0x080073dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800735a:	f043 0301 	orr.w	r3, r3, #1
 800735e:	b2da      	uxtb	r2, r3
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	18d1      	adds	r1, r2, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007374:	f7ff ff5c 	bl	8007230 <prvInsertTimerInActiveList>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d069      	beq.n	8007452 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007384:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d05e      	beq.n	8007452 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	441a      	add	r2, r3
 800739c:	2300      	movs	r3, #0
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	2300      	movs	r3, #0
 80073a2:	2100      	movs	r1, #0
 80073a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a6:	f7ff fe05 	bl	8006fb4 <xTimerGenericCommand>
 80073aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d14f      	bne.n	8007452 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	61bb      	str	r3, [r7, #24]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ce:	f023 0301 	bic.w	r3, r3, #1
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073da:	e03a      	b.n	8007452 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e2:	f043 0301 	orr.w	r3, r3, #1
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	617b      	str	r3, [r7, #20]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	18d1      	adds	r1, r2, r3
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800741e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007420:	f7ff ff06 	bl	8007230 <prvInsertTimerInActiveList>
					break;
 8007424:	e015      	b.n	8007452 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d103      	bne.n	800743c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007436:	f000 fbdb 	bl	8007bf0 <vPortFree>
 800743a:	e00a      	b.n	8007452 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007442:	f023 0301 	bic.w	r3, r3, #1
 8007446:	b2da      	uxtb	r2, r3
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800744e:	e000      	b.n	8007452 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007450:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007452:	4b08      	ldr	r3, [pc, #32]	; (8007474 <prvProcessReceivedCommands+0x1c0>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	1d39      	adds	r1, r7, #4
 8007458:	2200      	movs	r2, #0
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fb5a 	bl	8005b14 <xQueueReceive>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	f47f af2a 	bne.w	80072bc <prvProcessReceivedCommands+0x8>
	}
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	3730      	adds	r7, #48	; 0x30
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000cc8 	.word	0x20000cc8

08007478 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800747e:	e048      	b.n	8007512 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007480:	4b2d      	ldr	r3, [pc, #180]	; (8007538 <prvSwitchTimerLists+0xc0>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800748a:	4b2b      	ldr	r3, [pc, #172]	; (8007538 <prvSwitchTimerLists+0xc0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3304      	adds	r3, #4
 8007498:	4618      	mov	r0, r3
 800749a:	f7fe f839 	bl	8005510 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074ac:	f003 0304 	and.w	r3, r3, #4
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d02e      	beq.n	8007512 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4413      	add	r3, r2
 80074bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d90e      	bls.n	80074e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074d2:	4b19      	ldr	r3, [pc, #100]	; (8007538 <prvSwitchTimerLists+0xc0>)
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3304      	adds	r3, #4
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f7fd ffde 	bl	800549e <vListInsert>
 80074e2:	e016      	b.n	8007512 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074e4:	2300      	movs	r3, #0
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	2300      	movs	r3, #0
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	2100      	movs	r1, #0
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f7ff fd60 	bl	8006fb4 <xTimerGenericCommand>
 80074f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	603b      	str	r3, [r7, #0]
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007512:	4b09      	ldr	r3, [pc, #36]	; (8007538 <prvSwitchTimerLists+0xc0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1b1      	bne.n	8007480 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800751c:	4b06      	ldr	r3, [pc, #24]	; (8007538 <prvSwitchTimerLists+0xc0>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007522:	4b06      	ldr	r3, [pc, #24]	; (800753c <prvSwitchTimerLists+0xc4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a04      	ldr	r2, [pc, #16]	; (8007538 <prvSwitchTimerLists+0xc0>)
 8007528:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800752a:	4a04      	ldr	r2, [pc, #16]	; (800753c <prvSwitchTimerLists+0xc4>)
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	6013      	str	r3, [r2, #0]
}
 8007530:	bf00      	nop
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20000cc0 	.word	0x20000cc0
 800753c:	20000cc4 	.word	0x20000cc4

08007540 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007546:	f000 f965 	bl	8007814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800754a:	4b15      	ldr	r3, [pc, #84]	; (80075a0 <prvCheckForValidListAndQueue+0x60>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d120      	bne.n	8007594 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007552:	4814      	ldr	r0, [pc, #80]	; (80075a4 <prvCheckForValidListAndQueue+0x64>)
 8007554:	f7fd ff52 	bl	80053fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007558:	4813      	ldr	r0, [pc, #76]	; (80075a8 <prvCheckForValidListAndQueue+0x68>)
 800755a:	f7fd ff4f 	bl	80053fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800755e:	4b13      	ldr	r3, [pc, #76]	; (80075ac <prvCheckForValidListAndQueue+0x6c>)
 8007560:	4a10      	ldr	r2, [pc, #64]	; (80075a4 <prvCheckForValidListAndQueue+0x64>)
 8007562:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007564:	4b12      	ldr	r3, [pc, #72]	; (80075b0 <prvCheckForValidListAndQueue+0x70>)
 8007566:	4a10      	ldr	r2, [pc, #64]	; (80075a8 <prvCheckForValidListAndQueue+0x68>)
 8007568:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800756a:	2300      	movs	r3, #0
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	4b11      	ldr	r3, [pc, #68]	; (80075b4 <prvCheckForValidListAndQueue+0x74>)
 8007570:	4a11      	ldr	r2, [pc, #68]	; (80075b8 <prvCheckForValidListAndQueue+0x78>)
 8007572:	2110      	movs	r1, #16
 8007574:	200a      	movs	r0, #10
 8007576:	f7fe f85d 	bl	8005634 <xQueueGenericCreateStatic>
 800757a:	4603      	mov	r3, r0
 800757c:	4a08      	ldr	r2, [pc, #32]	; (80075a0 <prvCheckForValidListAndQueue+0x60>)
 800757e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007580:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <prvCheckForValidListAndQueue+0x60>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <prvCheckForValidListAndQueue+0x60>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	490b      	ldr	r1, [pc, #44]	; (80075bc <prvCheckForValidListAndQueue+0x7c>)
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe fd6c 	bl	800606c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007594:	f000 f96e 	bl	8007874 <vPortExitCritical>
}
 8007598:	bf00      	nop
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000cc8 	.word	0x20000cc8
 80075a4:	20000c98 	.word	0x20000c98
 80075a8:	20000cac 	.word	0x20000cac
 80075ac:	20000cc0 	.word	0x20000cc0
 80075b0:	20000cc4 	.word	0x20000cc4
 80075b4:	20000d74 	.word	0x20000d74
 80075b8:	20000cd4 	.word	0x20000cd4
 80075bc:	080099cc 	.word	0x080099cc

080075c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3b04      	subs	r3, #4
 80075d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3b04      	subs	r3, #4
 80075de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f023 0201 	bic.w	r2, r3, #1
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3b04      	subs	r3, #4
 80075ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075f0:	4a0c      	ldr	r2, [pc, #48]	; (8007624 <pxPortInitialiseStack+0x64>)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3b14      	subs	r3, #20
 80075fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3b04      	subs	r3, #4
 8007606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f06f 0202 	mvn.w	r2, #2
 800760e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3b20      	subs	r3, #32
 8007614:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007616:	68fb      	ldr	r3, [r7, #12]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	08007629 	.word	0x08007629

08007628 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007632:	4b12      	ldr	r3, [pc, #72]	; (800767c <prvTaskExitError+0x54>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763a:	d00a      	beq.n	8007652 <prvTaskExitError+0x2a>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	60fb      	str	r3, [r7, #12]
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <prvTaskExitError+0x28>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	60bb      	str	r3, [r7, #8]
}
 8007664:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007666:	bf00      	nop
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0fc      	beq.n	8007668 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800766e:	bf00      	nop
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	2000000c 	.word	0x2000000c

08007680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <pxCurrentTCBConst2>)
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	6808      	ldr	r0, [r1, #0]
 8007686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768a:	f380 8809 	msr	PSP, r0
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8811 	msr	BASEPRI, r0
 800769a:	4770      	bx	lr
 800769c:	f3af 8000 	nop.w

080076a0 <pxCurrentTCBConst2>:
 80076a0:	20000798 	.word	0x20000798
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076a8:	4808      	ldr	r0, [pc, #32]	; (80076cc <prvPortStartFirstTask+0x24>)
 80076aa:	6800      	ldr	r0, [r0, #0]
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f380 8808 	msr	MSP, r0
 80076b2:	f04f 0000 	mov.w	r0, #0
 80076b6:	f380 8814 	msr	CONTROL, r0
 80076ba:	b662      	cpsie	i
 80076bc:	b661      	cpsie	f
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	df00      	svc	0
 80076c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ca:	bf00      	nop
 80076cc:	e000ed08 	.word	0xe000ed08

080076d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076d6:	4b46      	ldr	r3, [pc, #280]	; (80077f0 <xPortStartScheduler+0x120>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a46      	ldr	r2, [pc, #280]	; (80077f4 <xPortStartScheduler+0x124>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d10a      	bne.n	80076f6 <xPortStartScheduler+0x26>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	613b      	str	r3, [r7, #16]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076f6:	4b3e      	ldr	r3, [pc, #248]	; (80077f0 <xPortStartScheduler+0x120>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a3f      	ldr	r2, [pc, #252]	; (80077f8 <xPortStartScheduler+0x128>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d10a      	bne.n	8007716 <xPortStartScheduler+0x46>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	60fb      	str	r3, [r7, #12]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007716:	4b39      	ldr	r3, [pc, #228]	; (80077fc <xPortStartScheduler+0x12c>)
 8007718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	b2db      	uxtb	r3, r3
 8007720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	22ff      	movs	r2, #255	; 0xff
 8007726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007738:	b2da      	uxtb	r2, r3
 800773a:	4b31      	ldr	r3, [pc, #196]	; (8007800 <xPortStartScheduler+0x130>)
 800773c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800773e:	4b31      	ldr	r3, [pc, #196]	; (8007804 <xPortStartScheduler+0x134>)
 8007740:	2207      	movs	r2, #7
 8007742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007744:	e009      	b.n	800775a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007746:	4b2f      	ldr	r3, [pc, #188]	; (8007804 <xPortStartScheduler+0x134>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3b01      	subs	r3, #1
 800774c:	4a2d      	ldr	r2, [pc, #180]	; (8007804 <xPortStartScheduler+0x134>)
 800774e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	b2db      	uxtb	r3, r3
 8007758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800775a:	78fb      	ldrb	r3, [r7, #3]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007762:	2b80      	cmp	r3, #128	; 0x80
 8007764:	d0ef      	beq.n	8007746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007766:	4b27      	ldr	r3, [pc, #156]	; (8007804 <xPortStartScheduler+0x134>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f1c3 0307 	rsb	r3, r3, #7
 800776e:	2b04      	cmp	r3, #4
 8007770:	d00a      	beq.n	8007788 <xPortStartScheduler+0xb8>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	60bb      	str	r3, [r7, #8]
}
 8007784:	bf00      	nop
 8007786:	e7fe      	b.n	8007786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007788:	4b1e      	ldr	r3, [pc, #120]	; (8007804 <xPortStartScheduler+0x134>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	4a1d      	ldr	r2, [pc, #116]	; (8007804 <xPortStartScheduler+0x134>)
 8007790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007792:	4b1c      	ldr	r3, [pc, #112]	; (8007804 <xPortStartScheduler+0x134>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800779a:	4a1a      	ldr	r2, [pc, #104]	; (8007804 <xPortStartScheduler+0x134>)
 800779c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077a6:	4b18      	ldr	r3, [pc, #96]	; (8007808 <xPortStartScheduler+0x138>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a17      	ldr	r2, [pc, #92]	; (8007808 <xPortStartScheduler+0x138>)
 80077ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077b2:	4b15      	ldr	r3, [pc, #84]	; (8007808 <xPortStartScheduler+0x138>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a14      	ldr	r2, [pc, #80]	; (8007808 <xPortStartScheduler+0x138>)
 80077b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077be:	f000 f8dd 	bl	800797c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077c2:	4b12      	ldr	r3, [pc, #72]	; (800780c <xPortStartScheduler+0x13c>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077c8:	f000 f8fc 	bl	80079c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077cc:	4b10      	ldr	r3, [pc, #64]	; (8007810 <xPortStartScheduler+0x140>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a0f      	ldr	r2, [pc, #60]	; (8007810 <xPortStartScheduler+0x140>)
 80077d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077d8:	f7ff ff66 	bl	80076a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077dc:	f7ff f856 	bl	800688c <vTaskSwitchContext>
	prvTaskExitError();
 80077e0:	f7ff ff22 	bl	8007628 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	e000ed00 	.word	0xe000ed00
 80077f4:	410fc271 	.word	0x410fc271
 80077f8:	410fc270 	.word	0x410fc270
 80077fc:	e000e400 	.word	0xe000e400
 8007800:	20000dc4 	.word	0x20000dc4
 8007804:	20000dc8 	.word	0x20000dc8
 8007808:	e000ed20 	.word	0xe000ed20
 800780c:	2000000c 	.word	0x2000000c
 8007810:	e000ef34 	.word	0xe000ef34

08007814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	607b      	str	r3, [r7, #4]
}
 800782c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800782e:	4b0f      	ldr	r3, [pc, #60]	; (800786c <vPortEnterCritical+0x58>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3301      	adds	r3, #1
 8007834:	4a0d      	ldr	r2, [pc, #52]	; (800786c <vPortEnterCritical+0x58>)
 8007836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007838:	4b0c      	ldr	r3, [pc, #48]	; (800786c <vPortEnterCritical+0x58>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d10f      	bne.n	8007860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007840:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <vPortEnterCritical+0x5c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <vPortEnterCritical+0x4c>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	603b      	str	r3, [r7, #0]
}
 800785c:	bf00      	nop
 800785e:	e7fe      	b.n	800785e <vPortEnterCritical+0x4a>
	}
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	2000000c 	.word	0x2000000c
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800787a:	4b12      	ldr	r3, [pc, #72]	; (80078c4 <vPortExitCritical+0x50>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10a      	bne.n	8007898 <vPortExitCritical+0x24>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	607b      	str	r3, [r7, #4]
}
 8007894:	bf00      	nop
 8007896:	e7fe      	b.n	8007896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007898:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <vPortExitCritical+0x50>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3b01      	subs	r3, #1
 800789e:	4a09      	ldr	r2, [pc, #36]	; (80078c4 <vPortExitCritical+0x50>)
 80078a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078a2:	4b08      	ldr	r3, [pc, #32]	; (80078c4 <vPortExitCritical+0x50>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d105      	bne.n	80078b6 <vPortExitCritical+0x42>
 80078aa:	2300      	movs	r3, #0
 80078ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	f383 8811 	msr	BASEPRI, r3
}
 80078b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	2000000c 	.word	0x2000000c
	...

080078d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078d0:	f3ef 8009 	mrs	r0, PSP
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	4b15      	ldr	r3, [pc, #84]	; (8007930 <pxCurrentTCBConst>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	f01e 0f10 	tst.w	lr, #16
 80078e0:	bf08      	it	eq
 80078e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ea:	6010      	str	r0, [r2, #0]
 80078ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078f4:	f380 8811 	msr	BASEPRI, r0
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f7fe ffc4 	bl	800688c <vTaskSwitchContext>
 8007904:	f04f 0000 	mov.w	r0, #0
 8007908:	f380 8811 	msr	BASEPRI, r0
 800790c:	bc09      	pop	{r0, r3}
 800790e:	6819      	ldr	r1, [r3, #0]
 8007910:	6808      	ldr	r0, [r1, #0]
 8007912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007916:	f01e 0f10 	tst.w	lr, #16
 800791a:	bf08      	it	eq
 800791c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007920:	f380 8809 	msr	PSP, r0
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	f3af 8000 	nop.w

08007930 <pxCurrentTCBConst>:
 8007930:	20000798 	.word	0x20000798
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop

08007938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	607b      	str	r3, [r7, #4]
}
 8007950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007952:	f7fe fee1 	bl	8006718 <xTaskIncrementTick>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800795c:	4b06      	ldr	r3, [pc, #24]	; (8007978 <xPortSysTickHandler+0x40>)
 800795e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	2300      	movs	r3, #0
 8007966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f383 8811 	msr	BASEPRI, r3
}
 800796e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <vPortSetupTimerInterrupt+0x34>)
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007986:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <vPortSetupTimerInterrupt+0x38>)
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <vPortSetupTimerInterrupt+0x3c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a0a      	ldr	r2, [pc, #40]	; (80079bc <vPortSetupTimerInterrupt+0x40>)
 8007992:	fba2 2303 	umull	r2, r3, r2, r3
 8007996:	099b      	lsrs	r3, r3, #6
 8007998:	4a09      	ldr	r2, [pc, #36]	; (80079c0 <vPortSetupTimerInterrupt+0x44>)
 800799a:	3b01      	subs	r3, #1
 800799c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800799e:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <vPortSetupTimerInterrupt+0x34>)
 80079a0:	2207      	movs	r2, #7
 80079a2:	601a      	str	r2, [r3, #0]
}
 80079a4:	bf00      	nop
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	e000e010 	.word	0xe000e010
 80079b4:	e000e018 	.word	0xe000e018
 80079b8:	20000000 	.word	0x20000000
 80079bc:	10624dd3 	.word	0x10624dd3
 80079c0:	e000e014 	.word	0xe000e014

080079c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079d4 <vPortEnableVFP+0x10>
 80079c8:	6801      	ldr	r1, [r0, #0]
 80079ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079ce:	6001      	str	r1, [r0, #0]
 80079d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079d2:	bf00      	nop
 80079d4:	e000ed88 	.word	0xe000ed88

080079d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079de:	f3ef 8305 	mrs	r3, IPSR
 80079e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b0f      	cmp	r3, #15
 80079e8:	d914      	bls.n	8007a14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079ea:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <vPortValidateInterruptPriority+0x70>)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079f4:	4b15      	ldr	r3, [pc, #84]	; (8007a4c <vPortValidateInterruptPriority+0x74>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	7afa      	ldrb	r2, [r7, #11]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d20a      	bcs.n	8007a14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	607b      	str	r3, [r7, #4]
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a14:	4b0e      	ldr	r3, [pc, #56]	; (8007a50 <vPortValidateInterruptPriority+0x78>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a1c:	4b0d      	ldr	r3, [pc, #52]	; (8007a54 <vPortValidateInterruptPriority+0x7c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d90a      	bls.n	8007a3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	603b      	str	r3, [r7, #0]
}
 8007a36:	bf00      	nop
 8007a38:	e7fe      	b.n	8007a38 <vPortValidateInterruptPriority+0x60>
	}
 8007a3a:	bf00      	nop
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	e000e3f0 	.word	0xe000e3f0
 8007a4c:	20000dc4 	.word	0x20000dc4
 8007a50:	e000ed0c 	.word	0xe000ed0c
 8007a54:	20000dc8 	.word	0x20000dc8

08007a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08a      	sub	sp, #40	; 0x28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a60:	2300      	movs	r3, #0
 8007a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a64:	f7fe fd9c 	bl	80065a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a68:	4b5b      	ldr	r3, [pc, #364]	; (8007bd8 <pvPortMalloc+0x180>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a70:	f000 f920 	bl	8007cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a74:	4b59      	ldr	r3, [pc, #356]	; (8007bdc <pvPortMalloc+0x184>)
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f040 8093 	bne.w	8007ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01d      	beq.n	8007ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a88:	2208      	movs	r2, #8
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d014      	beq.n	8007ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f023 0307 	bic.w	r3, r3, #7
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <pvPortMalloc+0x6c>
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	617b      	str	r3, [r7, #20]
}
 8007ac0:	bf00      	nop
 8007ac2:	e7fe      	b.n	8007ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d06e      	beq.n	8007ba8 <pvPortMalloc+0x150>
 8007aca:	4b45      	ldr	r3, [pc, #276]	; (8007be0 <pvPortMalloc+0x188>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d869      	bhi.n	8007ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ad4:	4b43      	ldr	r3, [pc, #268]	; (8007be4 <pvPortMalloc+0x18c>)
 8007ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ad8:	4b42      	ldr	r3, [pc, #264]	; (8007be4 <pvPortMalloc+0x18c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ade:	e004      	b.n	8007aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d903      	bls.n	8007afc <pvPortMalloc+0xa4>
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1f1      	bne.n	8007ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007afc:	4b36      	ldr	r3, [pc, #216]	; (8007bd8 <pvPortMalloc+0x180>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d050      	beq.n	8007ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2208      	movs	r2, #8
 8007b0c:	4413      	add	r3, r2
 8007b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	1ad2      	subs	r2, r2, r3
 8007b20:	2308      	movs	r3, #8
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d91f      	bls.n	8007b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <pvPortMalloc+0xf8>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	613b      	str	r3, [r7, #16]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	1ad2      	subs	r2, r2, r3
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b62:	69b8      	ldr	r0, [r7, #24]
 8007b64:	f000 f908 	bl	8007d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b68:	4b1d      	ldr	r3, [pc, #116]	; (8007be0 <pvPortMalloc+0x188>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	4a1b      	ldr	r2, [pc, #108]	; (8007be0 <pvPortMalloc+0x188>)
 8007b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b76:	4b1a      	ldr	r3, [pc, #104]	; (8007be0 <pvPortMalloc+0x188>)
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	4b1b      	ldr	r3, [pc, #108]	; (8007be8 <pvPortMalloc+0x190>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d203      	bcs.n	8007b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b82:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <pvPortMalloc+0x188>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a18      	ldr	r2, [pc, #96]	; (8007be8 <pvPortMalloc+0x190>)
 8007b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	4b13      	ldr	r3, [pc, #76]	; (8007bdc <pvPortMalloc+0x184>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	431a      	orrs	r2, r3
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b9e:	4b13      	ldr	r3, [pc, #76]	; (8007bec <pvPortMalloc+0x194>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	4a11      	ldr	r2, [pc, #68]	; (8007bec <pvPortMalloc+0x194>)
 8007ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ba8:	f7fe fd08 	bl	80065bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f003 0307 	and.w	r3, r3, #7
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <pvPortMalloc+0x174>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	60fb      	str	r3, [r7, #12]
}
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <pvPortMalloc+0x172>
	return pvReturn;
 8007bcc:	69fb      	ldr	r3, [r7, #28]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3728      	adds	r7, #40	; 0x28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20002dd4 	.word	0x20002dd4
 8007bdc:	20002de8 	.word	0x20002de8
 8007be0:	20002dd8 	.word	0x20002dd8
 8007be4:	20002dcc 	.word	0x20002dcc
 8007be8:	20002ddc 	.word	0x20002ddc
 8007bec:	20002de0 	.word	0x20002de0

08007bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d04d      	beq.n	8007c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c02:	2308      	movs	r3, #8
 8007c04:	425b      	negs	r3, r3
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4413      	add	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	4b24      	ldr	r3, [pc, #144]	; (8007ca8 <vPortFree+0xb8>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <vPortFree+0x44>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	60fb      	str	r3, [r7, #12]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00a      	beq.n	8007c52 <vPortFree+0x62>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	60bb      	str	r3, [r7, #8]
}
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <vPortFree+0xb8>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01e      	beq.n	8007c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d11a      	bne.n	8007c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <vPortFree+0xb8>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	43db      	mvns	r3, r3
 8007c72:	401a      	ands	r2, r3
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c78:	f7fe fc92 	bl	80065a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <vPortFree+0xbc>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4413      	add	r3, r2
 8007c86:	4a09      	ldr	r2, [pc, #36]	; (8007cac <vPortFree+0xbc>)
 8007c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c8a:	6938      	ldr	r0, [r7, #16]
 8007c8c:	f000 f874 	bl	8007d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c90:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <vPortFree+0xc0>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3301      	adds	r3, #1
 8007c96:	4a06      	ldr	r2, [pc, #24]	; (8007cb0 <vPortFree+0xc0>)
 8007c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c9a:	f7fe fc8f 	bl	80065bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c9e:	bf00      	nop
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20002de8 	.word	0x20002de8
 8007cac:	20002dd8 	.word	0x20002dd8
 8007cb0:	20002de4 	.word	0x20002de4

08007cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007cc0:	4b27      	ldr	r3, [pc, #156]	; (8007d60 <prvHeapInit+0xac>)
 8007cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00c      	beq.n	8007ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3307      	adds	r3, #7
 8007cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0307 	bic.w	r3, r3, #7
 8007cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	4a1f      	ldr	r2, [pc, #124]	; (8007d60 <prvHeapInit+0xac>)
 8007ce4:	4413      	add	r3, r2
 8007ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cec:	4a1d      	ldr	r2, [pc, #116]	; (8007d64 <prvHeapInit+0xb0>)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cf2:	4b1c      	ldr	r3, [pc, #112]	; (8007d64 <prvHeapInit+0xb0>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d00:	2208      	movs	r2, #8
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0307 	bic.w	r3, r3, #7
 8007d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4a15      	ldr	r2, [pc, #84]	; (8007d68 <prvHeapInit+0xb4>)
 8007d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d16:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <prvHeapInit+0xb4>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d1e:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <prvHeapInit+0xb4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	1ad2      	subs	r2, r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d34:	4b0c      	ldr	r3, [pc, #48]	; (8007d68 <prvHeapInit+0xb4>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	4a0a      	ldr	r2, [pc, #40]	; (8007d6c <prvHeapInit+0xb8>)
 8007d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <prvHeapInit+0xbc>)
 8007d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d4c:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <prvHeapInit+0xc0>)
 8007d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d52:	601a      	str	r2, [r3, #0]
}
 8007d54:	bf00      	nop
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	20000dcc 	.word	0x20000dcc
 8007d64:	20002dcc 	.word	0x20002dcc
 8007d68:	20002dd4 	.word	0x20002dd4
 8007d6c:	20002ddc 	.word	0x20002ddc
 8007d70:	20002dd8 	.word	0x20002dd8
 8007d74:	20002de8 	.word	0x20002de8

08007d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d80:	4b28      	ldr	r3, [pc, #160]	; (8007e24 <prvInsertBlockIntoFreeList+0xac>)
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	e002      	b.n	8007d8c <prvInsertBlockIntoFreeList+0x14>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d8f7      	bhi.n	8007d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	4413      	add	r3, r2
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d108      	bne.n	8007dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	441a      	add	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	441a      	add	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d118      	bne.n	8007e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	4b15      	ldr	r3, [pc, #84]	; (8007e28 <prvInsertBlockIntoFreeList+0xb0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d00d      	beq.n	8007df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	441a      	add	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	e008      	b.n	8007e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007df6:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <prvInsertBlockIntoFreeList+0xb0>)
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e003      	b.n	8007e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d002      	beq.n	8007e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e16:	bf00      	nop
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	20002dcc 	.word	0x20002dcc
 8007e28:	20002dd4 	.word	0x20002dd4

08007e2c <_ZN3key3KeyC1ERKNS_9key_set_tE>:
#include <key.h>
//--------------
namespace key
{
	// Class Button
	Key::Key(const key_set_t &button_set):
 8007e2c:	b4b0      	push	{r4, r5, r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
		is_active(false),
		state(INACTIVE_STATE),
		time(0),
		_set(button_set)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	701a      	strb	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	705a      	strb	r2, [r3, #1]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	605a      	str	r2, [r3, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	f103 0408 	add.w	r4, r3, #8
 8007e50:	4615      	mov	r5, r2
 8007e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e5a:	e884 0003 	stmia.w	r4, {r0, r1}
	{}
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bcb0      	pop	{r4, r5, r7}
 8007e68:	4770      	bx	lr

08007e6a <_ZNK3key3Key2idEv>:
	//----------------------------
	const uint32_t Key::id() const
	{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
		return _set.id;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
	}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <_ZNK3key3Key9is_repeatEv>:
	//-------------------------------
	const bool Key::is_repeat() const
	{
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
		return _set.is_repeat;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	7f1b      	ldrb	r3, [r3, #28]
	}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <_ZNK3key3Key4readEv>:
	//--------------------------
	const bool Key::read() const
	{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
		return (HAL_GPIO_ReadPin(_set.port, _set.pin) == _set.trigger_level);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	689a      	ldr	r2, [r3, #8]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	899b      	ldrh	r3, [r3, #12]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4610      	mov	r0, r2
 8007eae:	f7f9 fc21 	bl	80016f4 <HAL_GPIO_ReadPin>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	7d1b      	ldrb	r3, [r3, #20]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	bf0c      	ite	eq
 8007ebe:	2301      	moveq	r3, #1
 8007ec0:	2300      	movne	r3, #0
 8007ec2:	b2db      	uxtb	r3, r3
	}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <_ZN3key3Key5resetEv>:
	//---------------
	void Key::reset()
	{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
		is_active = false;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	701a      	strb	r2, [r3, #0]
		state = INACTIVE_STATE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	705a      	strb	r2, [r3, #1]
		time = 0;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	605a      	str	r2, [r3, #4]
	}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <_ZNK3key3Key7timeoutEv>:
	//---------------------------------
	const uint32_t Key::timeout() const
	{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
		return _set.timeout;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	699b      	ldr	r3, [r3, #24]
	}
 8007efe:	4618      	mov	r0, r3
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <_ZNK3key3Key13trigger_stateEv>:
	//---------------------------------------
	const KeyState Key::trigger_state() const
	{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
		return _set.trigger_state;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	7d5b      	ldrb	r3, [r3, #21]
	}
 8007f16:	4618      	mov	r0, r3
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <_ZN3key8KeyboardC1EPPNS_3KeyEj>:
	//---------------
	// Class Keyboard
	uint32_t Keyboard::period = 100;
	Keyboard::Keyboard(Key **buttons, size_t size)
 8007f22:	b480      	push	{r7}
 8007f24:	b085      	sub	sp, #20
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	607a      	str	r2, [r7, #4]
	{
		_buttons = buttons;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	601a      	str	r2, [r3, #0]
		_size = size;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	605a      	str	r2, [r3, #4]
	}
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <_ZN3key8Keyboard4scanEv>:
	//-------------------
	void Keyboard::scan()
	{
 8007f48:	b590      	push	{r4, r7, lr}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
		for(uint8_t i = 0; i < _size; i++)
 8007f50:	2300      	movs	r3, #0
 8007f52:	73fb      	strb	r3, [r7, #15]
 8007f54:	7bfa      	ldrb	r2, [r7, #15]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	f080 808c 	bcs.w	8008078 <_ZN3key8Keyboard4scanEv+0x130>
		{
			Key *button = *(_buttons + i);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	60bb      	str	r3, [r7, #8]

			if(button)
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d07d      	beq.n	8008070 <_ZN3key8Keyboard4scanEv+0x128>
			{
				if(button->read())
 8007f74:	68b8      	ldr	r0, [r7, #8]
 8007f76:	f7ff ff90 	bl	8007e9a <_ZNK3key3Key4readEv>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d054      	beq.n	800802a <_ZN3key8Keyboard4scanEv+0xe2>
				{
					switch(button->state)
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	785b      	ldrb	r3, [r3, #1]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d02c      	beq.n	8007fe2 <_ZN3key8Keyboard4scanEv+0x9a>
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	dc41      	bgt.n	8008010 <_ZN3key8Keyboard4scanEv+0xc8>
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <_ZN3key8Keyboard4scanEv+0x4e>
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d004      	beq.n	8007f9e <_ZN3key8Keyboard4scanEv+0x56>
									button->is_active = true;
								}
							}
						break;

						default: break;
 8007f94:	e03c      	b.n	8008010 <_ZN3key8Keyboard4scanEv+0xc8>
							button->state = BOUNCE_STATE;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	705a      	strb	r2, [r3, #1]
						break;
 8007f9c:	e03d      	b.n	800801a <_ZN3key8Keyboard4scanEv+0xd2>
							if(button->time >= button->timeout())
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	685c      	ldr	r4, [r3, #4]
 8007fa2:	68b8      	ldr	r0, [r7, #8]
 8007fa4:	f7ff ffa5 	bl	8007ef2 <_ZNK3key3Key7timeoutEv>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	429c      	cmp	r4, r3
 8007fac:	bf2c      	ite	cs
 8007fae:	2301      	movcs	r3, #1
 8007fb0:	2300      	movcc	r3, #0
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d02d      	beq.n	8008014 <_ZN3key8Keyboard4scanEv+0xcc>
								button->state = PRESSED_STATE;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	705a      	strb	r2, [r3, #1]
								if(button->trigger_state() == PRESSED_STATE)
 8007fbe:	68b8      	ldr	r0, [r7, #8]
 8007fc0:	f7ff ffa3 	bl	8007f0a <_ZNK3key3Key13trigger_stateEv>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	bf0c      	ite	eq
 8007fca:	2301      	moveq	r3, #1
 8007fcc:	2300      	movne	r3, #0
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d01f      	beq.n	8008014 <_ZN3key8Keyboard4scanEv+0xcc>
									button->is_active = true;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	701a      	strb	r2, [r3, #0]
									button->time = 0;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	605a      	str	r2, [r3, #4]
						break;
 8007fe0:	e018      	b.n	8008014 <_ZN3key8Keyboard4scanEv+0xcc>
							if(button->is_repeat())
 8007fe2:	68b8      	ldr	r0, [r7, #8]
 8007fe4:	f7ff ff4d 	bl	8007e82 <_ZNK3key3Key9is_repeatEv>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d014      	beq.n	8008018 <_ZN3key8Keyboard4scanEv+0xd0>
								if(button->time >= button->timeout())
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	685c      	ldr	r4, [r3, #4]
 8007ff2:	68b8      	ldr	r0, [r7, #8]
 8007ff4:	f7ff ff7d 	bl	8007ef2 <_ZNK3key3Key7timeoutEv>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	429c      	cmp	r4, r3
 8007ffc:	bf2c      	ite	cs
 8007ffe:	2301      	movcs	r3, #1
 8008000:	2300      	movcc	r3, #0
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d007      	beq.n	8008018 <_ZN3key8Keyboard4scanEv+0xd0>
									button->is_active = true;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2201      	movs	r2, #1
 800800c:	701a      	strb	r2, [r3, #0]
						break;
 800800e:	e003      	b.n	8008018 <_ZN3key8Keyboard4scanEv+0xd0>
						default: break;
 8008010:	bf00      	nop
 8008012:	e002      	b.n	800801a <_ZN3key8Keyboard4scanEv+0xd2>
						break;
 8008014:	bf00      	nop
 8008016:	e000      	b.n	800801a <_ZN3key8Keyboard4scanEv+0xd2>
						break;
 8008018:	bf00      	nop
					}

					button->time += period;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	4b18      	ldr	r3, [pc, #96]	; (8008080 <_ZN3key8Keyboard4scanEv+0x138>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	441a      	add	r2, r3
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	605a      	str	r2, [r3, #4]
 8008028:	e022      	b.n	8008070 <_ZN3key8Keyboard4scanEv+0x128>
				}
				else
				{
					if(button->trigger_state() == RELEASED_STATE)
 800802a:	68b8      	ldr	r0, [r7, #8]
 800802c:	f7ff ff6d 	bl	8007f0a <_ZNK3key3Key13trigger_stateEv>
 8008030:	4603      	mov	r3, r0
 8008032:	2b03      	cmp	r3, #3
 8008034:	bf0c      	ite	eq
 8008036:	2301      	moveq	r3, #1
 8008038:	2300      	movne	r3, #0
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d014      	beq.n	800806a <_ZN3key8Keyboard4scanEv+0x122>
					{
						if(button->time >= button->timeout())
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	685c      	ldr	r4, [r3, #4]
 8008044:	68b8      	ldr	r0, [r7, #8]
 8008046:	f7ff ff54 	bl	8007ef2 <_ZNK3key3Key7timeoutEv>
 800804a:	4603      	mov	r3, r0
 800804c:	429c      	cmp	r4, r3
 800804e:	bf2c      	ite	cs
 8008050:	2301      	movcs	r3, #1
 8008052:	2300      	movcc	r3, #0
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <_ZN3key8Keyboard4scanEv+0x11a>
						{
							button->is_active = true;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2201      	movs	r2, #1
 800805e:	701a      	strb	r2, [r3, #0]
 8008060:	e006      	b.n	8008070 <_ZN3key8Keyboard4scanEv+0x128>
						}
						else
							button->reset();
 8008062:	68b8      	ldr	r0, [r7, #8]
 8008064:	f7ff ff32 	bl	8007ecc <_ZN3key3Key5resetEv>
 8008068:	e002      	b.n	8008070 <_ZN3key8Keyboard4scanEv+0x128>
					}
					else
						button->reset();
 800806a:	68b8      	ldr	r0, [r7, #8]
 800806c:	f7ff ff2e 	bl	8007ecc <_ZN3key3Key5resetEv>
		for(uint8_t i = 0; i < _size; i++)
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	3301      	adds	r3, #1
 8008074:	73fb      	strb	r3, [r7, #15]
 8008076:	e76d      	b.n	8007f54 <_ZN3key8Keyboard4scanEv+0xc>
				}
			}
		}
	}
 8008078:	bf00      	nop
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	bd90      	pop	{r4, r7, pc}
 8008080:	20000010 	.word	0x20000010

08008084 <_ZN9RectangleC1Ev>:
		Rectangle(): _x(0), _y(0), _width(0), _height(0) {}
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	605a      	str	r2, [r3, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	609a      	str	r2, [r3, #8]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	60da      	str	r2, [r3, #12]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4618      	mov	r0, r3
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <_ZNK9Rectangle1XEv>:
		uint32_t bottom() const { return _y + _height; }
		uint32_t left() const { return _x; }
		uint32_t right() const { return _x + _width; }
		uint32_t top() const { return _y; }
		uint32_t X() const { return _x; }
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <_ZNK9Rectangle1YEv>:
		uint32_t Y() const { return _y; }
 80080ca:	b480      	push	{r7}
 80080cc:	b083      	sub	sp, #12
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	4618      	mov	r0, r3
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <_ZNK9Rectangle6HeightEv>:
		uint32_t Height() const { return _height; }
 80080e2:	b480      	push	{r7}
 80080e4:	b083      	sub	sp, #12
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <_ZNK9Rectangle5WidthEv>:
		uint32_t Width() const { return _width; }
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	4618      	mov	r0, r3
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <_ZN9Rectangle4setXEm>:
		void setX(uint32_t x) { _x = x; }
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <_ZN9Rectangle4setYEm>:
		void setY(uint32_t y) { _y = y; }
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	605a      	str	r2, [r3, #4]
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh>:
		_controls(nullptr),
		_count_controls(0),
		_rect(Rectangle())
	{}
	//------------------------------------------------------------------------------------------------------------
	Screen::Screen(const Rectangle &rect, Screen *next, Screen *prev, Control **controls, uint8_t count_controls):
 800814a:	b590      	push	{r4, r7, lr}
 800814c:	b087      	sub	sp, #28
 800814e:	af00      	add	r7, sp, #0
 8008150:	60f8      	str	r0, [r7, #12]
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	607a      	str	r2, [r7, #4]
 8008156:	603b      	str	r3, [r7, #0]
		is_rect(false),
		_next(next),
		_prev(prev),
		_controls(controls),
		_count_controls(count_controls),
		_rect(rect)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	701a      	strb	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	605a      	str	r2, [r3, #4]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	609a      	str	r2, [r3, #8]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800816e:	60da      	str	r2, [r3, #12]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008176:	741a      	strb	r2, [r3, #16]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	f103 0414 	add.w	r4, r3, #20
 8008180:	4613      	mov	r3, r2
 8008182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{
		if(_controls && _count_controls > 0 && find_focus() == -1)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00c      	beq.n	80081aa <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x60>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	7c1b      	ldrb	r3, [r3, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d008      	beq.n	80081aa <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x60>
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f8ae 	bl	80082fa <_ZN4menu6Screen10find_focusEv>
 800819e:	4603      	mov	r3, r0
 80081a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a4:	d101      	bne.n	80081aa <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x60>
 80081a6:	2301      	movs	r3, #1
 80081a8:	e000      	b.n	80081ac <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x62>
 80081aa:	2300      	movs	r3, #0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01c      	beq.n	80081ea <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0xa0>
		{
			for(uint8_t i = 0; i < _count_controls; i++)
 80081b0:	2300      	movs	r3, #0
 80081b2:	75fb      	strb	r3, [r7, #23]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	7c1b      	ldrb	r3, [r3, #16]
 80081b8:	7dfa      	ldrb	r2, [r7, #23]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d215      	bcs.n	80081ea <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0xa0>
			{
				Control *control = *(_controls + i);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	68da      	ldr	r2, [r3, #12]
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	613b      	str	r3, [r7, #16]
				if(control && control->is_focus)
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d007      	beq.n	80081e2 <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x98>
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	799b      	ldrb	r3, [r3, #6]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x98>
				{
					control->focus = true;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	2201      	movs	r2, #1
 80081de:	715a      	strb	r2, [r3, #5]
					break;
 80081e0:	e003      	b.n	80081ea <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0xa0>
			for(uint8_t i = 0; i < _count_controls; i++)
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	3301      	adds	r3, #1
 80081e6:	75fb      	strb	r3, [r7, #23]
 80081e8:	e7e4      	b.n	80081b4 <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x6a>
				}
			}
		}
	}
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4618      	mov	r0, r3
 80081ee:	371c      	adds	r7, #28
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd90      	pop	{r4, r7, pc}

080081f4 <_ZN4menu6Screen4drawEv>:
	//-----------------
	void Screen::draw()
	{
 80081f4:	b590      	push	{r4, r7, lr}
 80081f6:	b08b      	sub	sp, #44	; 0x2c
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
		ssd1306_Clear();
 80081fc:	f001 fa58 	bl	80096b0 <_Z13ssd1306_Clearv>
		ssd1306_SetColor(White);
 8008200:	2001      	movs	r0, #1
 8008202:	f000 fb8b 	bl	800891c <_Z16ssd1306_SetColor13SSD1306_COLOR>

		if(is_rect)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <_ZN4menu6Screen4drawEv+0x24>
			ssd1306_DrawRect(_rect);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3314      	adds	r3, #20
 8008212:	4618      	mov	r0, r3
 8008214:	f000 ff09 	bl	800902a <_Z16ssd1306_DrawRectRK9Rectangle>

		if(_controls != nullptr && _count_controls > 0)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d066      	beq.n	80082ee <_ZN4menu6Screen4drawEv+0xfa>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	7c1b      	ldrb	r3, [r3, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d062      	beq.n	80082ee <_ZN4menu6Screen4drawEv+0xfa>
		{
			int8_t index = find_focus();
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f866 	bl	80082fa <_ZN4menu6Screen10find_focusEv>
 800822e:	4603      	mov	r3, r0
 8008230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			int8_t start_index = index;
 8008234:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if(index > 0)
 800823c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8008240:	2b00      	cmp	r3, #0
 8008242:	dd08      	ble.n	8008256 <_ZN4menu6Screen4drawEv+0x62>
				start_index = start_position(index);
 8008244:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f8e5 	bl	800841a <_ZN4menu6Screen14start_positionEa>
 8008250:	4603      	mov	r3, r0
 8008252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			uint16_t pos_y = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	84bb      	strh	r3, [r7, #36]	; 0x24

			for(uint8_t i = start_index; i < _count_controls; i++)
 800825a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800825e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	7c1b      	ldrb	r3, [r3, #16]
 8008266:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800826a:	429a      	cmp	r2, r3
 800826c:	d23f      	bcs.n	80082ee <_ZN4menu6Screen4drawEv+0xfa>
			{
				Control *control = *(_controls + i);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	61fb      	str	r3, [r7, #28]

				if(control != nullptr)
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d02d      	beq.n	80082e0 <_ZN4menu6Screen4drawEv+0xec>
				{
					Rectangle rect = control->rect();
 8008284:	69f8      	ldr	r0, [r7, #28]
 8008286:	f000 f9a0 	bl	80085ca <_ZNK4menu7Control4rectEv>
 800828a:	4603      	mov	r3, r0
 800828c:	f107 040c 	add.w	r4, r7, #12
 8008290:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008292:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					rect.setX(0);
 8008296:	f107 030c 	add.w	r3, r7, #12
 800829a:	2100      	movs	r1, #0
 800829c:	4618      	mov	r0, r3
 800829e:	f7ff ff38 	bl	8008112 <_ZN9Rectangle4setXEm>
					rect.setY(pos_y);
 80082a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80082a4:	f107 030c 	add.w	r3, r7, #12
 80082a8:	4611      	mov	r1, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff ff3f 	bl	800812e <_ZN9Rectangle4setYEm>
					control->setRectangle(rect);
 80082b0:	f107 030c 	add.w	r3, r7, #12
 80082b4:	4619      	mov	r1, r3
 80082b6:	69f8      	ldr	r0, [r7, #28]
 80082b8:	f000 f993 	bl	80085e2 <_ZN4menu7Control12setRectangleERK9Rectangle>

					if(pos_y < SSD1306_HEIGHT)
 80082bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082be:	2b3f      	cmp	r3, #63	; 0x3f
 80082c0:	d814      	bhi.n	80082ec <_ZN4menu6Screen4drawEv+0xf8>
						control->draw();
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	69f8      	ldr	r0, [r7, #28]
 80082ca:	4798      	blx	r3
					else
						break;

					pos_y += rect.Height();
 80082cc:	f107 030c 	add.w	r3, r7, #12
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff ff06 	bl	80080e2 <_ZNK9Rectangle6HeightEv>
 80082d6:	4603      	mov	r3, r0
 80082d8:	b29a      	uxth	r2, r3
 80082da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082dc:	4413      	add	r3, r2
 80082de:	84bb      	strh	r3, [r7, #36]	; 0x24
			for(uint8_t i = start_index; i < _count_controls; i++)
 80082e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082e4:	3301      	adds	r3, #1
 80082e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ea:	e7ba      	b.n	8008262 <_ZN4menu6Screen4drawEv+0x6e>
						break;
 80082ec:	bf00      	nop
				}
			}
		}

		ssd1306_UpdateScreen();
 80082ee:	f000 fbc9 	bl	8008a84 <_Z20ssd1306_UpdateScreenv>
	}
 80082f2:	bf00      	nop
 80082f4:	372c      	adds	r7, #44	; 0x2c
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd90      	pop	{r4, r7, pc}

080082fa <_ZN4menu6Screen10find_focusEv>:
	//-------------------------
	int8_t Screen::find_focus()
	{
 80082fa:	b480      	push	{r7}
 80082fc:	b085      	sub	sp, #20
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
		for(uint8_t i = 0; i < _count_controls; i++)
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	7c1b      	ldrb	r3, [r3, #16]
 800830a:	7bfa      	ldrb	r2, [r7, #15]
 800830c:	429a      	cmp	r2, r3
 800830e:	d218      	bcs.n	8008342 <_ZN4menu6Screen10find_focusEv+0x48>
		{
			Control *control = *(_controls + i);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68da      	ldr	r2, [r3, #12]
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	60bb      	str	r3, [r7, #8]
			if(control && control->is_focus && control->focus)
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00a      	beq.n	800833a <_ZN4menu6Screen10find_focusEv+0x40>
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	799b      	ldrb	r3, [r3, #6]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d006      	beq.n	800833a <_ZN4menu6Screen10find_focusEv+0x40>
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	795b      	ldrb	r3, [r3, #5]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <_ZN4menu6Screen10find_focusEv+0x40>
				return i;
 8008334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008338:	e005      	b.n	8008346 <_ZN4menu6Screen10find_focusEv+0x4c>
		for(uint8_t i = 0; i < _count_controls; i++)
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	3301      	adds	r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
 8008340:	e7e1      	b.n	8008306 <_ZN4menu6Screen10find_focusEv+0xc>
		}

		return -1;
 8008342:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <_ZN4menu6Screen7onClickENS_5key_tE>:
	//----------------------------
	void Screen::onClick(key_t id)
	{
 8008352:	b580      	push	{r7, lr}
 8008354:	b086      	sub	sp, #24
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]
		int8_t index = find_focus();
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7ff ffcb 	bl	80082fa <_ZN4menu6Screen10find_focusEv>
 8008364:	4603      	mov	r3, r0
 8008366:	75fb      	strb	r3, [r7, #23]

		if(index == -1)
 8008368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008370:	d04d      	beq.n	800840e <_ZN4menu6Screen7onClickENS_5key_tE+0xbc>
			return;

		Control *control_current = *(_controls + index);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	613b      	str	r3, [r7, #16]

		// если onClick возвращает истину, то обрабатывать не надо (уже обработано)
		if(control_current == nullptr || control_current->onClick(id))
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00a      	beq.n	800839e <_ZN4menu6Screen7onClickENS_5key_tE+0x4c>
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3304      	adds	r3, #4
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	78fa      	ldrb	r2, [r7, #3]
 8008392:	4611      	mov	r1, r2
 8008394:	6938      	ldr	r0, [r7, #16]
 8008396:	4798      	blx	r3
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <_ZN4menu6Screen7onClickENS_5key_tE+0x50>
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <_ZN4menu6Screen7onClickENS_5key_tE+0x52>
 80083a2:	2300      	movs	r3, #0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d134      	bne.n	8008412 <_ZN4menu6Screen7onClickENS_5key_tE+0xc0>
			return;

		if(id == BUTTON_UP)
 80083a8:	78fb      	ldrb	r3, [r7, #3]
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d115      	bne.n	80083da <_ZN4menu6Screen7onClickENS_5key_tE+0x88>
		{
			if(index > 0)
 80083ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	dd2e      	ble.n	8008414 <_ZN4menu6Screen7onClickENS_5key_tE+0xc2>
			{
				Control *control_prev = *(_controls + (index - 1));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80083c2:	3b01      	subs	r3, #1
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	60bb      	str	r3, [r7, #8]
				control_current->focus = false;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	2200      	movs	r2, #0
 80083d0:	715a      	strb	r2, [r3, #5]
				control_prev->focus = true;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2201      	movs	r2, #1
 80083d6:	715a      	strb	r2, [r3, #5]
 80083d8:	e01c      	b.n	8008414 <_ZN4menu6Screen7onClickENS_5key_tE+0xc2>
			}
		}
		else if(id == BUTTON_DOWN)
 80083da:	78fb      	ldrb	r3, [r7, #3]
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d119      	bne.n	8008414 <_ZN4menu6Screen7onClickENS_5key_tE+0xc2>
		{
			if(index < (_count_controls - 1))
 80083e0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	7c1b      	ldrb	r3, [r3, #16]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	429a      	cmp	r2, r3
 80083ec:	da12      	bge.n	8008414 <_ZN4menu6Screen7onClickENS_5key_tE+0xc2>
			{
				Control *control_next = *(_controls + (index + 1));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083f6:	3301      	adds	r3, #1
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	60fb      	str	r3, [r7, #12]

				control_current->focus = false;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	2200      	movs	r2, #0
 8008404:	715a      	strb	r2, [r3, #5]
				control_next->focus    = true;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2201      	movs	r2, #1
 800840a:	715a      	strb	r2, [r3, #5]
 800840c:	e002      	b.n	8008414 <_ZN4menu6Screen7onClickENS_5key_tE+0xc2>
			return;
 800840e:	bf00      	nop
 8008410:	e000      	b.n	8008414 <_ZN4menu6Screen7onClickENS_5key_tE+0xc2>
			return;
 8008412:	bf00      	nop
			}
		}
	}
 8008414:	3718      	adds	r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <_ZN4menu6Screen14start_positionEa>:
	//-----------------------------------------
	int8_t Screen::start_position(int8_t index)
	{
 800841a:	b580      	push	{r7, lr}
 800841c:	b086      	sub	sp, #24
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	70fb      	strb	r3, [r7, #3]
		int8_t start_index = index;
 8008426:	78fb      	ldrb	r3, [r7, #3]
 8008428:	75fb      	strb	r3, [r7, #23]
		uint16_t height = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	82bb      	strh	r3, [r7, #20]

		Control *control = *(_controls + index);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	613b      	str	r3, [r7, #16]
		if(control)
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d008      	beq.n	8008456 <_ZN4menu6Screen14start_positionEa+0x3c>
			height = control->rect().Height();
 8008444:	6938      	ldr	r0, [r7, #16]
 8008446:	f000 f8c0 	bl	80085ca <_ZNK4menu7Control4rectEv>
 800844a:	4603      	mov	r3, r0
 800844c:	4618      	mov	r0, r3
 800844e:	f7ff fe48 	bl	80080e2 <_ZNK9Rectangle6HeightEv>
 8008452:	4603      	mov	r3, r0
 8008454:	82bb      	strh	r3, [r7, #20]

		do
		{
			Control *control = *(_controls + --start_index);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	3b01      	subs	r3, #1
 800845e:	b2db      	uxtb	r3, r3
 8008460:	75fb      	strb	r3, [r7, #23]
 8008462:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	60fb      	str	r3, [r7, #12]
			if(control)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00b      	beq.n	800848c <_ZN4menu6Screen14start_positionEa+0x72>
			{
				height += control->rect().Height();
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f8a8 	bl	80085ca <_ZNK4menu7Control4rectEv>
 800847a:	4603      	mov	r3, r0
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff fe30 	bl	80080e2 <_ZNK9Rectangle6HeightEv>
 8008482:	4603      	mov	r3, r0
 8008484:	b29a      	uxth	r2, r3
 8008486:	8abb      	ldrh	r3, [r7, #20]
 8008488:	4413      	add	r3, r2
 800848a:	82bb      	strh	r3, [r7, #20]
			}
		} while(height < SSD1306_HEIGHT && start_index > 0);
 800848c:	8abb      	ldrh	r3, [r7, #20]
 800848e:	2b3f      	cmp	r3, #63	; 0x3f
 8008490:	d804      	bhi.n	800849c <_ZN4menu6Screen14start_positionEa+0x82>
 8008492:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008496:	2b00      	cmp	r3, #0
 8008498:	dd00      	ble.n	800849c <_ZN4menu6Screen14start_positionEa+0x82>
		do
 800849a:	e7dc      	b.n	8008456 <_ZN4menu6Screen14start_positionEa+0x3c>

		return start_index;
 800849c:	f997 3017 	ldrsb.w	r3, [r7, #23]
	}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3718      	adds	r7, #24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <_ZN4menu7ControlC1ERK9RectangleRK6font_t>:
		margin({ 5, 5, 5, 5 }),
		_rect(Rectangle(0, 0, 0, 0)),
		_font(font_t({ 0, 0, nullptr }))
	{}
	//----------------------------------------------------------
	Control::Control(const Rectangle &rect, const font_t &font):
 80084a8:	b490      	push	{r4, r7}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
		fill(false),
		focus(false),
		is_focus(false),
		margin({ 5, 5, 5, 5 }),
		_rect(rect),
		_font(font)
 80084b4:	4a12      	ldr	r2, [pc, #72]	; (8008500 <_ZN4menu7ControlC1ERK9RectangleRK6font_t+0x58>)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	711a      	strb	r2, [r3, #4]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	715a      	strb	r2, [r3, #5]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	719a      	strb	r2, [r3, #6]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4a0d      	ldr	r2, [pc, #52]	; (8008504 <_ZN4menu7ControlC1ERK9RectangleRK6font_t+0x5c>)
 80084d0:	3307      	adds	r3, #7
 80084d2:	6810      	ldr	r0, [r2, #0]
 80084d4:	6018      	str	r0, [r3, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	f103 040c 	add.w	r4, r3, #12
 80084de:	4613      	mov	r3, r2
 80084e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80084e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	331c      	adds	r3, #28
 80084ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084f0:	e883 0003 	stmia.w	r3, {r0, r1}
	{}
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bc90      	pop	{r4, r7}
 80084fe:	4770      	bx	lr
 8008500:	08009acc 	.word	0x08009acc
 8008504:	080099d4 	.word	0x080099d4

08008508 <_ZN4menu7Control4drawEv>:
	//------------------
	void Control::draw()
	{
 8008508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800850a:	b089      	sub	sp, #36	; 0x24
 800850c:	af02      	add	r7, sp, #8
 800850e:	6078      	str	r0, [r7, #4]
		Rectangle rect(_rect.X() + margin.left, _rect.Y() + margin.top, _rect.Width() - margin.right*2, _rect.Height() - margin.bottom*2);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	330c      	adds	r3, #12
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff fdcc 	bl	80080b2 <_ZNK9Rectangle1XEv>
 800851a:	4602      	mov	r2, r0
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	79db      	ldrb	r3, [r3, #7]
 8008520:	18d4      	adds	r4, r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	330c      	adds	r3, #12
 8008526:	4618      	mov	r0, r3
 8008528:	f7ff fdcf 	bl	80080ca <_ZNK9Rectangle1YEv>
 800852c:	4602      	mov	r2, r0
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	7a5b      	ldrb	r3, [r3, #9]
 8008532:	18d5      	adds	r5, r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	330c      	adds	r3, #12
 8008538:	4618      	mov	r0, r3
 800853a:	f7ff fdde 	bl	80080fa <_ZNK9Rectangle5WidthEv>
 800853e:	4602      	mov	r2, r0
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7a1b      	ldrb	r3, [r3, #8]
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	1ad6      	subs	r6, r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	330c      	adds	r3, #12
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff fdc8 	bl	80080e2 <_ZNK9Rectangle6HeightEv>
 8008552:	4602      	mov	r2, r0
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7a9b      	ldrb	r3, [r3, #10]
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	f107 0008 	add.w	r0, r7, #8
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	4633      	mov	r3, r6
 8008564:	462a      	mov	r2, r5
 8008566:	4621      	mov	r1, r4
 8008568:	f7f7 fe3a 	bl	80001e0 <_ZN9RectangleC1Emmmm>

		ssd1306_SetColor(White);
 800856c:	2001      	movs	r0, #1
 800856e:	f000 f9d5 	bl	800891c <_Z16ssd1306_SetColor13SSD1306_COLOR>
		ssd1306_DrawRect(rect);
 8008572:	f107 0308 	add.w	r3, r7, #8
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fd57 	bl	800902a <_Z16ssd1306_DrawRectRK9Rectangle>

		if(fill)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	791b      	ldrb	r3, [r3, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <_ZN4menu7Control4drawEv+0x86>
			ssd1306_DrawFillRect(rect);
 8008584:	f107 0308 	add.w	r3, r7, #8
 8008588:	4618      	mov	r0, r3
 800858a:	f000 fdb1 	bl	80090f0 <_Z20ssd1306_DrawFillRectRK9Rectangle>

		if(is_focus && focus)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	799b      	ldrb	r3, [r3, #6]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d008      	beq.n	80085a8 <_ZN4menu7Control4drawEv+0xa0>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	795b      	ldrb	r3, [r3, #5]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d004      	beq.n	80085a8 <_ZN4menu7Control4drawEv+0xa0>
			ssd1306_DrawRect(_rect);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	330c      	adds	r3, #12
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 fd41 	bl	800902a <_Z16ssd1306_DrawRectRK9Rectangle>
	}
 80085a8:	bf00      	nop
 80085aa:	371c      	adds	r7, #28
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085b0 <_ZN4menu7Control7onClickENS_5key_tE>:
	{
		return _font;
	}
	//------------------------------------
	bool Control::onClick(key_t button_id)
	{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
		return false;
 80085bc:	2300      	movs	r3, #0
	}
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <_ZNK4menu7Control4rectEv>:
	//------------------------------------
	const Rectangle& Control::rect() const
	{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
		return _rect;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	330c      	adds	r3, #12
	}
 80085d6:	4618      	mov	r0, r3
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <_ZN4menu7Control12setRectangleERK9Rectangle>:
	//-----------------------------------------------
	void Control::setRectangle(const Rectangle &rect)
	{
 80085e2:	b490      	push	{r4, r7}
 80085e4:	b082      	sub	sp, #8
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
		_rect = rect;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	f103 040c 	add.w	r4, r3, #12
 80085f4:	4613      	mov	r3, r2
 80085f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80085f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bc90      	pop	{r4, r7}
 8008604:	4770      	bx	lr
	...

08008608 <_ZN4menu5LabelC1EPKcRK9RectangleRK6font_t>:
		Control()
	{
		_text[0] = '\0';
	}
	//------------------------------------------------------------------------
	Label::Label(const char *text, const Rectangle &rect, const font_t &font):
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]
		Control(rect, font)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff ff43 	bl	80084a8 <_ZN4menu7ControlC1ERK9RectangleRK6font_t>
 8008622:	4a09      	ldr	r2, [pc, #36]	; (8008648 <_ZN4menu5LabelC1EPKcRK9RectangleRK6font_t+0x40>)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	601a      	str	r2, [r3, #0]
	{
		_text[0] = '\0';
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		strcpy(_text, text);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3324      	adds	r3, #36	; 0x24
 8008634:	68b9      	ldr	r1, [r7, #8]
 8008636:	4618      	mov	r0, r3
 8008638:	f001 f972 	bl	8009920 <strcpy>
	}
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	08009abc 	.word	0x08009abc

0800864c <_ZN4menu5Label4drawEv>:
	//----------------
	void Label::draw()
	{
 800864c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800864e:	b08b      	sub	sp, #44	; 0x2c
 8008650:	af02      	add	r7, sp, #8
 8008652:	6078      	str	r0, [r7, #4]
		Control::draw();
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff ff56 	bl	8008508 <_ZN4menu7Control4drawEv>

		Rectangle rect(_rect.X() + margin.left, _rect.Y() + margin.top, _rect.Width() - margin.right*2, _rect.Height() - margin.bottom*2);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	330c      	adds	r3, #12
 8008660:	4618      	mov	r0, r3
 8008662:	f7ff fd26 	bl	80080b2 <_ZNK9Rectangle1XEv>
 8008666:	4602      	mov	r2, r0
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	79db      	ldrb	r3, [r3, #7]
 800866c:	18d4      	adds	r4, r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	330c      	adds	r3, #12
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff fd29 	bl	80080ca <_ZNK9Rectangle1YEv>
 8008678:	4602      	mov	r2, r0
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	7a5b      	ldrb	r3, [r3, #9]
 800867e:	18d5      	adds	r5, r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	330c      	adds	r3, #12
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff fd38 	bl	80080fa <_ZNK9Rectangle5WidthEv>
 800868a:	4602      	mov	r2, r0
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	7a1b      	ldrb	r3, [r3, #8]
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	1ad6      	subs	r6, r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	330c      	adds	r3, #12
 8008698:	4618      	mov	r0, r3
 800869a:	f7ff fd22 	bl	80080e2 <_ZNK9Rectangle6HeightEv>
 800869e:	4602      	mov	r2, r0
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	7a9b      	ldrb	r3, [r3, #10]
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	f107 000c 	add.w	r0, r7, #12
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	4633      	mov	r3, r6
 80086b0:	462a      	mov	r2, r5
 80086b2:	4621      	mov	r1, r4
 80086b4:	f7f7 fd94 	bl	80001e0 <_ZN9RectangleC1Emmmm>

		SSD1306_COLOR colorText = White;
 80086b8:	2301      	movs	r3, #1
 80086ba:	77fb      	strb	r3, [r7, #31]

		if(fill)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	791b      	ldrb	r3, [r3, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <_ZN4menu5Label4drawEv+0x7c>
			colorText = Black;
 80086c4:	2300      	movs	r3, #0
 80086c6:	77fb      	strb	r3, [r7, #31]

		ssd1306_SetColor(colorText);
 80086c8:	7ffb      	ldrb	r3, [r7, #31]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 f926 	bl	800891c <_Z16ssd1306_SetColor13SSD1306_COLOR>
		ssd1306_DrawString(rect, _text, _font, ALIGN_CENTER);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f103 021c 	add.w	r2, r3, #28
 80086dc:	f107 000c 	add.w	r0, r7, #12
 80086e0:	2330      	movs	r3, #48	; 0x30
 80086e2:	f000 ff00 	bl	80094e6 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment>
	}
 80086e6:	bf00      	nop
 80086e8:	3724      	adds	r7, #36	; 0x24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080086f0 <_ZN4menu6ButtonC1EPKcRK9RectangleRK6font_tPFvvE>:
		_callback(nullptr)
	{
		is_focus = true;
	}
	//-----------------------------------------------------------------------------------------------
	Button::Button(const char *text, const Rectangle &rect, const font_t &font, callback_t callback):
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
		Label(text, rect, font),
		is_toggle(false),
		checked(false),
		_callback(callback)
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	68b9      	ldr	r1, [r7, #8]
 8008706:	f7ff ff7f 	bl	8008608 <_ZN4menu5LabelC1EPKcRK9RectangleRK6font_t>
 800870a:	4a0b      	ldr	r2, [pc, #44]	; (8008738 <_ZN4menu6ButtonC1EPKcRK9RectangleRK6font_tPFvvE+0x48>)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	63da      	str	r2, [r3, #60]	; 0x3c
	{
		is_focus = true;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	719a      	strb	r2, [r3, #6]
	}
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	08009aac 	.word	0x08009aac

0800873c <_ZN4menu6Button7onClickENS_5key_tE>:
	//-----------------------------------
	bool Button::onClick(key_t button_id)
	{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	70fb      	strb	r3, [r7, #3]
		if(button_id != menu::BUTTON_SELECT)
 8008748:	78fb      	ldrb	r3, [r7, #3]
 800874a:	2b08      	cmp	r3, #8
 800874c:	d001      	beq.n	8008752 <_ZN4menu6Button7onClickENS_5key_tE+0x16>
			return false;
 800874e:	2300      	movs	r3, #0
 8008750:	e01a      	b.n	8008788 <_ZN4menu6Button7onClickENS_5key_tE+0x4c>

		if(is_toggle)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00d      	beq.n	8008778 <_ZN4menu6Button7onClickENS_5key_tE+0x3c>
		{
			checked = !checked;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008762:	f083 0301 	eor.w	r3, r3, #1
 8008766:	b2da      	uxtb	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			fill = checked;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	711a      	strb	r2, [r3, #4]
		}

		if(_callback != nullptr)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <_ZN4menu6Button7onClickENS_5key_tE+0x4a>
			_callback();
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008784:	4798      	blx	r3

		return true;
 8008786:	2301      	movs	r3, #1
	}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <_ZN5PointC1Emm>:
		Point(uint32_t x, uint32_t y): _x(x), _y(y) {}
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	605a      	str	r2, [r3, #4]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <_ZNK5Point1xEv>:
		uint32_t x() const { return _x; }
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <_ZNK5Point1yEv>:
		uint32_t y() const { return _y; }
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	4618      	mov	r0, r3
 80087dc:	370c      	adds	r7, #12
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <_ZNK9Rectangle6bottomEv>:
		uint32_t bottom() const { return _y + _height; }
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	685a      	ldr	r2, [r3, #4]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	4413      	add	r3, r2
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <_ZNK9Rectangle4leftEv>:
		uint32_t left() const { return _x; }
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4618      	mov	r0, r3
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <_ZNK9Rectangle5rightEv>:
		uint32_t right() const { return _x + _width; }
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	4413      	add	r3, r2
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <_ZNK9Rectangle3topEv>:
		uint32_t top() const { return _y; }
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	4618      	mov	r0, r3
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <_ZN9Rectangle8setWidthEm>:
		void setWidth(uint32_t w) { _width = w; }
 8008852:	b480      	push	{r7}
 8008854:	b083      	sub	sp, #12
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	6039      	str	r1, [r7, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	609a      	str	r2, [r3, #8]
 8008862:	bf00      	nop
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <_ZN9Rectangle9setHeightEm>:
		void setHeight(uint32_t h) { _height = h; }
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	6039      	str	r1, [r7, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	60da      	str	r2, [r3, #12]
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <_ZNK9Rectangle7isValidEv>:
		bool isValid() const { return (_x >= 0 && _y >= 0 &&_width > 0 && _height > 0); }
 800888a:	b480      	push	{r7}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <_ZNK9Rectangle7isValidEv+0x1c>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <_ZNK9Rectangle7isValidEv+0x1c>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <_ZNK9Rectangle7isValidEv+0x1e>
 80088a6:	2300      	movs	r3, #0
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <_ZNK9Rectangle6centerEv>:
		Point center() const
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
		{
			return Point(_width/2, _height/2);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	0859      	lsrs	r1, r3, #1
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	085b      	lsrs	r3, r3, #1
 80088ca:	461a      	mov	r2, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff ff5f 	bl	8008790 <_ZN5PointC1Emm>
		};
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <_ZL5widthv>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 80088da:	b480      	push	{r7}
 80088dc:	af00      	add	r7, sp, #0
 80088de:	2380      	movs	r3, #128	; 0x80
 80088e0:	4618      	mov	r0, r3
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <_ZL6heightv>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 80088ea:	b480      	push	{r7}
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	2340      	movs	r3, #64	; 0x40
 80088f0:	4618      	mov	r0, r3
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <_Z16ssd1306_GetWidthv>:
//-----------------------------
uint16_t ssd1306_GetWidth(void)
{
 80088fa:	b480      	push	{r7}
 80088fc:	af00      	add	r7, sp, #0
    return SSD1306_WIDTH;
 80088fe:	2380      	movs	r3, #128	; 0x80
}
 8008900:	4618      	mov	r0, r3
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <_Z17ssd1306_GetHeightv>:
//------------------------------
uint16_t ssd1306_GetHeight(void)
{
 800890a:	b480      	push	{r7}
 800890c:	af00      	add	r7, sp, #0
    return SSD1306_HEIGHT;
 800890e:	2340      	movs	r3, #64	; 0x40
}
 8008910:	4618      	mov	r0, r3
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
	...

0800891c <_Z16ssd1306_SetColor13SSD1306_COLOR>:
{
	return SSD1306.Color;
}
//----------------------------------------
void ssd1306_SetColor(SSD1306_COLOR color)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	4603      	mov	r3, r0
 8008924:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 8008926:	4a04      	ldr	r2, [pc, #16]	; (8008938 <_Z16ssd1306_SetColor13SSD1306_COLOR+0x1c>)
 8008928:	79fb      	ldrb	r3, [r7, #7]
 800892a:	7153      	strb	r3, [r2, #5]
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	20002dec 	.word	0x20002dec

0800893c <_Z12ssd1306_InitP19__I2C_HandleTypeDef>:
//	Initialize the oled screen
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
	_hi2c = hi2c;
 8008944:	4a4c      	ldr	r2, [pc, #304]	; (8008a78 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x13c>)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6013      	str	r3, [r2, #0]
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(_hi2c, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 800894a:	4b4b      	ldr	r3, [pc, #300]	; (8008a78 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x13c>)
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008952:	2205      	movs	r2, #5
 8008954:	2178      	movs	r1, #120	; 0x78
 8008956:	f7f9 f86b 	bl	8001a30 <HAL_I2C_IsDeviceReady>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	bf14      	ite	ne
 8008960:	2301      	movne	r3, #1
 8008962:	2300      	moveq	r3, #0
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d004      	beq.n	8008974 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x38>
	{
		SSD1306.Initialized = 0;
 800896a:	4b44      	ldr	r3, [pc, #272]	; (8008a7c <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x140>)
 800896c:	2200      	movs	r2, #0
 800896e:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 8008970:	2300      	movs	r3, #0
 8008972:	e07c      	b.n	8008a6e <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x132>

	// Wait for the screen to boot
	//osDelay(100);

	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 8008974:	20ae      	movs	r0, #174	; 0xae
 8008976:	f000 ff45 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 800897a:	20d5      	movs	r0, #213	; 0xd5
 800897c:	f000 ff42 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8008980:	20f0      	movs	r0, #240	; 0xf0
 8008982:	f000 ff3f 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SETMULTIPLEX);
 8008986:	20a8      	movs	r0, #168	; 0xa8
 8008988:	f000 ff3c 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(height() - 1);
 800898c:	f7ff ffad 	bl	80088ea <_ZL6heightv>
 8008990:	4603      	mov	r3, r0
 8008992:	b2db      	uxtb	r3, r3
 8008994:	3b01      	subs	r3, #1
 8008996:	b2db      	uxtb	r3, r3
 8008998:	4618      	mov	r0, r3
 800899a:	f000 ff33 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 800899e:	20d3      	movs	r0, #211	; 0xd3
 80089a0:	f000 ff30 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x00);
 80089a4:	2000      	movs	r0, #0
 80089a6:	f000 ff2d 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SETSTARTLINE);
 80089aa:	2040      	movs	r0, #64	; 0x40
 80089ac:	f000 ff2a 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(CHARGEPUMP);
 80089b0:	208d      	movs	r0, #141	; 0x8d
 80089b2:	f000 ff27 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x14);
 80089b6:	2014      	movs	r0, #20
 80089b8:	f000 ff24 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(MEMORYMODE);
 80089bc:	2020      	movs	r0, #32
 80089be:	f000 ff21 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x00);
 80089c2:	2000      	movs	r0, #0
 80089c4:	f000 ff1e 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SEGREMAP);
 80089c8:	20a0      	movs	r0, #160	; 0xa0
 80089ca:	f000 ff1b 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(COMSCANINC);
 80089ce:	20c0      	movs	r0, #192	; 0xc0
 80089d0:	f000 ff18 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SETCOMPINS);
 80089d4:	20da      	movs	r0, #218	; 0xda
 80089d6:	f000 ff15 	bl	8009804 <_ZL20ssd1306_WriteCommandh>

	if (display_geometry == GEOMETRY_128_64)
 80089da:	4b29      	ldr	r3, [pc, #164]	; (8008a80 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x144>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d103      	bne.n	80089ea <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0xae>
	{
	  ssd1306_WriteCommand(0x12);
 80089e2:	2012      	movs	r0, #18
 80089e4:	f000 ff0e 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
 80089e8:	e006      	b.n	80089f8 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0xbc>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80089ea:	4b25      	ldr	r3, [pc, #148]	; (8008a80 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x144>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d102      	bne.n	80089f8 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0xbc>
	{
	  ssd1306_WriteCommand(0x02);
 80089f2:	2002      	movs	r0, #2
 80089f4:	f000 ff06 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	}

	ssd1306_WriteCommand(SETCONTRAST);
 80089f8:	2081      	movs	r0, #129	; 0x81
 80089fa:	f000 ff03 	bl	8009804 <_ZL20ssd1306_WriteCommandh>

	if (display_geometry == GEOMETRY_128_64)
 80089fe:	4b20      	ldr	r3, [pc, #128]	; (8008a80 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x144>)
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d103      	bne.n	8008a0e <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0xd2>
	{
	  ssd1306_WriteCommand(0xCF);
 8008a06:	20cf      	movs	r0, #207	; 0xcf
 8008a08:	f000 fefc 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
 8008a0c:	e006      	b.n	8008a1c <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0xe0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8008a0e:	4b1c      	ldr	r3, [pc, #112]	; (8008a80 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x144>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d102      	bne.n	8008a1c <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0xe0>
	{
	  ssd1306_WriteCommand(0x8F);
 8008a16:	208f      	movs	r0, #143	; 0x8f
 8008a18:	f000 fef4 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	}

	ssd1306_WriteCommand(SETPRECHARGE);
 8008a1c:	20d9      	movs	r0, #217	; 0xd9
 8008a1e:	f000 fef1 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xF1);
 8008a22:	20f1      	movs	r0, #241	; 0xf1
 8008a24:	f000 feee 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8008a28:	20db      	movs	r0, #219	; 0xdb
 8008a2a:	f000 feeb 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8008a2e:	2040      	movs	r0, #64	; 0x40
 8008a30:	f000 fee8 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8008a34:	20a4      	movs	r0, #164	; 0xa4
 8008a36:	f000 fee5 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8008a3a:	20a6      	movs	r0, #166	; 0xa6
 8008a3c:	f000 fee2 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8008a40:	202e      	movs	r0, #46	; 0x2e
 8008a42:	f000 fedf 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(DISPLAYON);
 8008a46:	20af      	movs	r0, #175	; 0xaf
 8008a48:	f000 fedc 	bl	8009804 <_ZL20ssd1306_WriteCommandh>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8008a4c:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x140>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8008a52:	4b0a      	ldr	r3, [pc, #40]	; (8008a7c <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x140>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 8008a58:	4b08      	ldr	r3, [pc, #32]	; (8008a7c <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x140>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	715a      	strb	r2, [r3, #5]

	// Clear screen
	ssd1306_Clear();
 8008a5e:	f000 fe27 	bl	80096b0 <_Z13ssd1306_Clearv>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8008a62:	f000 f80f 	bl	8008a84 <_Z20ssd1306_UpdateScreenv>

	SSD1306.Initialized = 1;
 8008a66:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x140>)
 8008a68:	2201      	movs	r2, #1
 8008a6a:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return 1;
 8008a6c:	2301      	movs	r3, #1
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20002df4 	.word	0x20002df4
 8008a7c:	20002dec 	.word	0x20002dec
 8008a80:	200031f8 	.word	0x200031f8

08008a84 <_Z20ssd1306_UpdateScreenv>:
}
//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8008a84:	b590      	push	{r4, r7, lr}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < 8; i++)
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	71fb      	strb	r3, [r7, #7]
 8008a8e:	79fb      	ldrb	r3, [r7, #7]
 8008a90:	2b07      	cmp	r3, #7
 8008a92:	d81a      	bhi.n	8008aca <_Z20ssd1306_UpdateScreenv+0x46>
	{
		ssd1306_WriteCommand(0xB0 + i);
 8008a94:	79fb      	ldrb	r3, [r7, #7]
 8008a96:	3b50      	subs	r3, #80	; 0x50
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 feb2 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	f000 feaf 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8008aa6:	2010      	movs	r0, #16
 8008aa8:	f000 feac 	bl	8009804 <_ZL20ssd1306_WriteCommandh>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	01db      	lsls	r3, r3, #7
 8008ab0:	4a08      	ldr	r2, [pc, #32]	; (8008ad4 <_Z20ssd1306_UpdateScreenv+0x50>)
 8008ab2:	189c      	adds	r4, r3, r2
 8008ab4:	f7ff ff11 	bl	80088da <_ZL5widthv>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	4619      	mov	r1, r3
 8008abc:	4620      	mov	r0, r4
 8008abe:	f000 fec5 	bl	800984c <_ZL17ssd1306_WriteDataPht>
	for (i = 0; i < 8; i++)
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	71fb      	strb	r3, [r7, #7]
 8008ac8:	e7e1      	b.n	8008a8e <_Z20ssd1306_UpdateScreenv+0xa>
	}
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd90      	pop	{r4, r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20002df8 	.word	0x20002df8

08008ad8 <_Z17ssd1306_DrawPixelhh>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 8008ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	460a      	mov	r2, r1
 8008ae2:	71fb      	strb	r3, [r7, #7]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 8008ae8:	4b35      	ldr	r3, [pc, #212]	; (8008bc0 <_Z17ssd1306_DrawPixelhh+0xe8>)
 8008aea:	795b      	ldrb	r3, [r3, #5]
 8008aec:	73fb      	strb	r3, [r7, #15]

	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8008aee:	79fc      	ldrb	r4, [r7, #7]
 8008af0:	f7ff ff03 	bl	80088fa <_Z16ssd1306_GetWidthv>
 8008af4:	4603      	mov	r3, r0
 8008af6:	429c      	cmp	r4, r3
 8008af8:	da05      	bge.n	8008b06 <_Z17ssd1306_DrawPixelhh+0x2e>
 8008afa:	79bc      	ldrb	r4, [r7, #6]
 8008afc:	f7ff ff05 	bl	800890a <_Z17ssd1306_GetHeightv>
 8008b00:	4603      	mov	r3, r0
 8008b02:	429c      	cmp	r4, r3
 8008b04:	db01      	blt.n	8008b0a <_Z17ssd1306_DrawPixelhh+0x32>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <_Z17ssd1306_DrawPixelhh+0x34>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d153      	bne.n	8008bb8 <_Z17ssd1306_DrawPixelhh+0xe0>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8008b10:	4b2b      	ldr	r3, [pc, #172]	; (8008bc0 <_Z17ssd1306_DrawPixelhh+0xe8>)
 8008b12:	791b      	ldrb	r3, [r3, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d006      	beq.n	8008b26 <_Z17ssd1306_DrawPixelhh+0x4e>
	{
		color = (SSD1306_COLOR) !color;
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	bf0c      	ite	eq
 8008b1e:	2301      	moveq	r3, #1
 8008b20:	2300      	movne	r3, #0
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	73fb      	strb	r3, [r7, #15]
	}

	// Draw in the right color
	if (color == White)
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d121      	bne.n	8008b70 <_Z17ssd1306_DrawPixelhh+0x98>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8008b2c:	79fc      	ldrb	r4, [r7, #7]
 8008b2e:	79bb      	ldrb	r3, [r7, #6]
 8008b30:	08db      	lsrs	r3, r3, #3
 8008b32:	b2dd      	uxtb	r5, r3
 8008b34:	462e      	mov	r6, r5
 8008b36:	f7ff fed0 	bl	80088da <_ZL5widthv>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	4603      	mov	r3, r0
 8008b40:	fb03 f306 	mul.w	r3, r3, r6
 8008b44:	4423      	add	r3, r4
 8008b46:	4a1f      	ldr	r2, [pc, #124]	; (8008bc4 <_Z17ssd1306_DrawPixelhh+0xec>)
 8008b48:	5cd3      	ldrb	r3, [r2, r3]
 8008b4a:	b25a      	sxtb	r2, r3
 8008b4c:	79bb      	ldrb	r3, [r7, #6]
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	2101      	movs	r1, #1
 8008b54:	fa01 f303 	lsl.w	r3, r1, r3
 8008b58:	b25b      	sxtb	r3, r3
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	b25b      	sxtb	r3, r3
 8008b5e:	b2d9      	uxtb	r1, r3
 8008b60:	79fa      	ldrb	r2, [r7, #7]
 8008b62:	462b      	mov	r3, r5
 8008b64:	fb00 f303 	mul.w	r3, r0, r3
 8008b68:	4413      	add	r3, r2
 8008b6a:	4a16      	ldr	r2, [pc, #88]	; (8008bc4 <_Z17ssd1306_DrawPixelhh+0xec>)
 8008b6c:	54d1      	strb	r1, [r2, r3]
 8008b6e:	e024      	b.n	8008bba <_Z17ssd1306_DrawPixelhh+0xe2>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8008b70:	79fc      	ldrb	r4, [r7, #7]
 8008b72:	79bb      	ldrb	r3, [r7, #6]
 8008b74:	08db      	lsrs	r3, r3, #3
 8008b76:	b2dd      	uxtb	r5, r3
 8008b78:	462e      	mov	r6, r5
 8008b7a:	f7ff feae 	bl	80088da <_ZL5widthv>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	4618      	mov	r0, r3
 8008b82:	4603      	mov	r3, r0
 8008b84:	fb03 f306 	mul.w	r3, r3, r6
 8008b88:	4423      	add	r3, r4
 8008b8a:	4a0e      	ldr	r2, [pc, #56]	; (8008bc4 <_Z17ssd1306_DrawPixelhh+0xec>)
 8008b8c:	5cd3      	ldrb	r3, [r2, r3]
 8008b8e:	b25a      	sxtb	r2, r3
 8008b90:	79bb      	ldrb	r3, [r7, #6]
 8008b92:	f003 0307 	and.w	r3, r3, #7
 8008b96:	2101      	movs	r1, #1
 8008b98:	fa01 f303 	lsl.w	r3, r1, r3
 8008b9c:	b25b      	sxtb	r3, r3
 8008b9e:	43db      	mvns	r3, r3
 8008ba0:	b25b      	sxtb	r3, r3
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	b25b      	sxtb	r3, r3
 8008ba6:	b2d9      	uxtb	r1, r3
 8008ba8:	79fa      	ldrb	r2, [r7, #7]
 8008baa:	462b      	mov	r3, r5
 8008bac:	fb00 f303 	mul.w	r3, r0, r3
 8008bb0:	4413      	add	r3, r2
 8008bb2:	4a04      	ldr	r2, [pc, #16]	; (8008bc4 <_Z17ssd1306_DrawPixelhh+0xec>)
 8008bb4:	54d1      	strb	r1, [r2, r3]
 8008bb6:	e000      	b.n	8008bba <_Z17ssd1306_DrawPixelhh+0xe2>
		return;
 8008bb8:	bf00      	nop
	}
}
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc0:	20002dec 	.word	0x20002dec
 8008bc4:	20002df8 	.word	0x20002df8

08008bc8 <_Z26ssd1306_DrawHorizontalLinesss>:
		}
	}
}
//-------------------------------------------------------------------
void ssd1306_DrawHorizontalLine(int16_t x, int16_t y, int16_t length)
{
 8008bc8:	b590      	push	{r4, r7, lr}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	80fb      	strh	r3, [r7, #6]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	80bb      	strh	r3, [r7, #4]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	807b      	strh	r3, [r7, #2]
    if (y < 0 || y >= height()) { return; }
 8008bda:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	db06      	blt.n	8008bf0 <_Z26ssd1306_DrawHorizontalLinesss+0x28>
 8008be2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8008be6:	f7ff fe80 	bl	80088ea <_ZL6heightv>
 8008bea:	4603      	mov	r3, r0
 8008bec:	429c      	cmp	r4, r3
 8008bee:	db01      	blt.n	8008bf4 <_Z26ssd1306_DrawHorizontalLinesss+0x2c>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e000      	b.n	8008bf6 <_Z26ssd1306_DrawHorizontalLinesss+0x2e>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f040 808f 	bne.w	8008d1a <_Z26ssd1306_DrawHorizontalLinesss+0x152>

    if (x < 0)
 8008bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	da06      	bge.n	8008c12 <_Z26ssd1306_DrawHorizontalLinesss+0x4a>
    {
        length += x;
 8008c04:	887a      	ldrh	r2, [r7, #2]
 8008c06:	88fb      	ldrh	r3, [r7, #6]
 8008c08:	4413      	add	r3, r2
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	807b      	strh	r3, [r7, #2]
        x = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	80fb      	strh	r3, [r7, #6]
    }

    if ( (x + length) > width())
 8008c12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008c16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c1a:	18d4      	adds	r4, r2, r3
 8008c1c:	f7ff fe5d 	bl	80088da <_ZL5widthv>
 8008c20:	4603      	mov	r3, r0
 8008c22:	429c      	cmp	r4, r3
 8008c24:	bfcc      	ite	gt
 8008c26:	2301      	movgt	r3, #1
 8008c28:	2300      	movle	r3, #0
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d007      	beq.n	8008c40 <_Z26ssd1306_DrawHorizontalLinesss+0x78>
    {
        length = (width() - x);
 8008c30:	f7ff fe53 	bl	80088da <_ZL5widthv>
 8008c34:	4603      	mov	r3, r0
 8008c36:	461a      	mov	r2, r3
 8008c38:	88fb      	ldrh	r3, [r7, #6]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	807b      	strh	r3, [r7, #2]
    }

    if (length <= 0) { return; }
 8008c40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dd6a      	ble.n	8008d1e <_Z26ssd1306_DrawHorizontalLinesss+0x156>

    uint8_t * bufferPtr = SSD1306_Buffer;
 8008c48:	4b3a      	ldr	r3, [pc, #232]	; (8008d34 <_Z26ssd1306_DrawHorizontalLinesss+0x16c>)
 8008c4a:	60fb      	str	r3, [r7, #12]
    bufferPtr += (y >> 3) * width();
 8008c4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008c50:	10dc      	asrs	r4, r3, #3
 8008c52:	f7ff fe42 	bl	80088da <_ZL5widthv>
 8008c56:	4603      	mov	r3, r0
 8008c58:	fb03 f304 	mul.w	r3, r3, r4
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4413      	add	r3, r2
 8008c62:	60fb      	str	r3, [r7, #12]
    bufferPtr += x;
 8008c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]

    uint8_t drawBit = 1 << (y & 7);
 8008c6e:	88bb      	ldrh	r3, [r7, #4]
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	2201      	movs	r2, #1
 8008c76:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7a:	72fb      	strb	r3, [r7, #11]

    switch (SSD1306.Color)
 8008c7c:	4b2e      	ldr	r3, [pc, #184]	; (8008d38 <_Z26ssd1306_DrawHorizontalLinesss+0x170>)
 8008c7e:	795b      	ldrb	r3, [r3, #5]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d034      	beq.n	8008cee <_Z26ssd1306_DrawHorizontalLinesss+0x126>
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	dc51      	bgt.n	8008d2c <_Z26ssd1306_DrawHorizontalLinesss+0x164>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d017      	beq.n	8008cbc <_Z26ssd1306_DrawHorizontalLinesss+0xf4>
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d14d      	bne.n	8008d2c <_Z26ssd1306_DrawHorizontalLinesss+0x164>
    {
        case White:
            while (length--)
 8008c90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	3a01      	subs	r2, #1
 8008c98:	b292      	uxth	r2, r2
 8008c9a:	807a      	strh	r2, [r7, #2]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	bf14      	ite	ne
 8008ca0:	2301      	movne	r3, #1
 8008ca2:	2300      	moveq	r3, #0
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d03b      	beq.n	8008d22 <_Z26ssd1306_DrawHorizontalLinesss+0x15a>
            {
                *bufferPtr++ |= drawBit;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	1c5a      	adds	r2, r3, #1
 8008cae:	60fa      	str	r2, [r7, #12]
 8008cb0:	7819      	ldrb	r1, [r3, #0]
 8008cb2:	7afa      	ldrb	r2, [r7, #11]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	b2d2      	uxtb	r2, r2
 8008cb8:	701a      	strb	r2, [r3, #0]
            while (length--)
 8008cba:	e7e9      	b.n	8008c90 <_Z26ssd1306_DrawHorizontalLinesss+0xc8>
            };
        break;

        case Black:
            drawBit = ~drawBit;
 8008cbc:	7afb      	ldrb	r3, [r7, #11]
 8008cbe:	43db      	mvns	r3, r3
 8008cc0:	72fb      	strb	r3, [r7, #11]
            while (length--)
 8008cc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	3a01      	subs	r2, #1
 8008cca:	b292      	uxth	r2, r2
 8008ccc:	807a      	strh	r2, [r7, #2]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	bf14      	ite	ne
 8008cd2:	2301      	movne	r3, #1
 8008cd4:	2300      	moveq	r3, #0
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d024      	beq.n	8008d26 <_Z26ssd1306_DrawHorizontalLinesss+0x15e>
            {
                *bufferPtr++ &= drawBit;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	1c5a      	adds	r2, r3, #1
 8008ce0:	60fa      	str	r2, [r7, #12]
 8008ce2:	7819      	ldrb	r1, [r3, #0]
 8008ce4:	7afa      	ldrb	r2, [r7, #11]
 8008ce6:	400a      	ands	r2, r1
 8008ce8:	b2d2      	uxtb	r2, r2
 8008cea:	701a      	strb	r2, [r3, #0]
            while (length--)
 8008cec:	e7e9      	b.n	8008cc2 <_Z26ssd1306_DrawHorizontalLinesss+0xfa>
            };
        break;

        case Inverse:
            while (length--)
 8008cee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	3a01      	subs	r2, #1
 8008cf6:	b292      	uxth	r2, r2
 8008cf8:	807a      	strh	r2, [r7, #2]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	bf14      	ite	ne
 8008cfe:	2301      	movne	r3, #1
 8008d00:	2300      	moveq	r3, #0
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d010      	beq.n	8008d2a <_Z26ssd1306_DrawHorizontalLinesss+0x162>
            {
                *bufferPtr++ ^= drawBit;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	60fa      	str	r2, [r7, #12]
 8008d0e:	7819      	ldrb	r1, [r3, #0]
 8008d10:	7afa      	ldrb	r2, [r7, #11]
 8008d12:	404a      	eors	r2, r1
 8008d14:	b2d2      	uxtb	r2, r2
 8008d16:	701a      	strb	r2, [r3, #0]
            while (length--)
 8008d18:	e7e9      	b.n	8008cee <_Z26ssd1306_DrawHorizontalLinesss+0x126>
    if (y < 0 || y >= height()) { return; }
 8008d1a:	bf00      	nop
 8008d1c:	e006      	b.n	8008d2c <_Z26ssd1306_DrawHorizontalLinesss+0x164>
    if (length <= 0) { return; }
 8008d1e:	bf00      	nop
 8008d20:	e004      	b.n	8008d2c <_Z26ssd1306_DrawHorizontalLinesss+0x164>
        break;
 8008d22:	bf00      	nop
 8008d24:	e002      	b.n	8008d2c <_Z26ssd1306_DrawHorizontalLinesss+0x164>
        break;
 8008d26:	bf00      	nop
 8008d28:	e000      	b.n	8008d2c <_Z26ssd1306_DrawHorizontalLinesss+0x164>
            };
        break;
 8008d2a:	bf00      	nop
    }
}
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd90      	pop	{r4, r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20002df8 	.word	0x20002df8
 8008d38:	20002dec 	.word	0x20002dec

08008d3c <_Z24ssd1306_DrawVerticalLinesss>:
//-----------------------------------------------------------------
void ssd1306_DrawVerticalLine(int16_t x, int16_t y, int16_t length)
{
 8008d3c:	b590      	push	{r4, r7, lr}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	80fb      	strh	r3, [r7, #6]
 8008d46:	460b      	mov	r3, r1
 8008d48:	80bb      	strh	r3, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	807b      	strh	r3, [r7, #2]
    if (x < 0 || x >= width()) return;
 8008d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	db06      	blt.n	8008d64 <_Z24ssd1306_DrawVerticalLinesss+0x28>
 8008d56:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8008d5a:	f7ff fdbe 	bl	80088da <_ZL5widthv>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	429c      	cmp	r4, r3
 8008d62:	db01      	blt.n	8008d68 <_Z24ssd1306_DrawVerticalLinesss+0x2c>
 8008d64:	2301      	movs	r3, #1
 8008d66:	e000      	b.n	8008d6a <_Z24ssd1306_DrawVerticalLinesss+0x2e>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f040 810f 	bne.w	8008f8e <_Z24ssd1306_DrawVerticalLinesss+0x252>

    if (y < 0)
 8008d70:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	da06      	bge.n	8008d86 <_Z24ssd1306_DrawVerticalLinesss+0x4a>
    {
        length += y;
 8008d78:	887a      	ldrh	r2, [r7, #2]
 8008d7a:	88bb      	ldrh	r3, [r7, #4]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	807b      	strh	r3, [r7, #2]
        y = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	80bb      	strh	r3, [r7, #4]
    }

    if ( (y + length) > height())
 8008d86:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008d8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d8e:	18d4      	adds	r4, r2, r3
 8008d90:	f7ff fdab 	bl	80088ea <_ZL6heightv>
 8008d94:	4603      	mov	r3, r0
 8008d96:	429c      	cmp	r4, r3
 8008d98:	bfcc      	ite	gt
 8008d9a:	2301      	movgt	r3, #1
 8008d9c:	2300      	movle	r3, #0
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d007      	beq.n	8008db4 <_Z24ssd1306_DrawVerticalLinesss+0x78>
    {
        length = (height() - y);
 8008da4:	f7ff fda1 	bl	80088ea <_ZL6heightv>
 8008da8:	4603      	mov	r3, r0
 8008daa:	461a      	mov	r2, r3
 8008dac:	88bb      	ldrh	r3, [r7, #4]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	807b      	strh	r3, [r7, #2]
    }

    if (length <= 0) return;
 8008db4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f340 80ea 	ble.w	8008f92 <_Z24ssd1306_DrawVerticalLinesss+0x256>


    uint8_t yOffset = y & 7;
 8008dbe:	88bb      	ldrh	r3, [r7, #4]
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	73fb      	strb	r3, [r7, #15]
    uint8_t drawBit;
    uint8_t *bufferPtr = SSD1306_Buffer;
 8008dc8:	4b75      	ldr	r3, [pc, #468]	; (8008fa0 <_Z24ssd1306_DrawVerticalLinesss+0x264>)
 8008dca:	613b      	str	r3, [r7, #16]

    bufferPtr += (y >> 3) * width();
 8008dcc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008dd0:	10dc      	asrs	r4, r3, #3
 8008dd2:	f7ff fd82 	bl	80088da <_ZL5widthv>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	fb03 f304 	mul.w	r3, r3, r4
 8008ddc:	461a      	mov	r2, r3
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	4413      	add	r3, r2
 8008de2:	613b      	str	r3, [r7, #16]
    bufferPtr += x;
 8008de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	4413      	add	r3, r2
 8008dec:	613b      	str	r3, [r7, #16]

    if (yOffset)
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d056      	beq.n	8008ea2 <_Z24ssd1306_DrawVerticalLinesss+0x166>
    {
        yOffset = 8 - yOffset;
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	f1c3 0308 	rsb	r3, r3, #8
 8008dfa:	73fb      	strb	r3, [r7, #15]
        drawBit = ~(0xFF >> (yOffset));
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	22ff      	movs	r2, #255	; 0xff
 8008e00:	fa42 f303 	asr.w	r3, r2, r3
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	43db      	mvns	r3, r3
 8008e08:	75fb      	strb	r3, [r7, #23]

        if (length < yOffset)
 8008e0a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	da0c      	bge.n	8008e2e <_Z24ssd1306_DrawVerticalLinesss+0xf2>
        {
            drawBit &= (0xFF >> (yOffset - length));
 8008e14:	7bfa      	ldrb	r2, [r7, #15]
 8008e16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	22ff      	movs	r2, #255	; 0xff
 8008e1e:	fa42 f303 	asr.w	r3, r2, r3
 8008e22:	b25a      	sxtb	r2, r3
 8008e24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e28:	4013      	ands	r3, r2
 8008e2a:	b25b      	sxtb	r3, r3
 8008e2c:	75fb      	strb	r3, [r7, #23]
        }

        switch (SSD1306.Color)
 8008e2e:	4b5d      	ldr	r3, [pc, #372]	; (8008fa4 <_Z24ssd1306_DrawVerticalLinesss+0x268>)
 8008e30:	795b      	ldrb	r3, [r3, #5]
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d01a      	beq.n	8008e6c <_Z24ssd1306_DrawVerticalLinesss+0x130>
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	dc20      	bgt.n	8008e7c <_Z24ssd1306_DrawVerticalLinesss+0x140>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d009      	beq.n	8008e52 <_Z24ssd1306_DrawVerticalLinesss+0x116>
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d11c      	bne.n	8008e7c <_Z24ssd1306_DrawVerticalLinesss+0x140>
        {
              case White:   *bufferPtr |=  drawBit; break;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	701a      	strb	r2, [r3, #0]
 8008e50:	e014      	b.n	8008e7c <_Z24ssd1306_DrawVerticalLinesss+0x140>
              case Black:   *bufferPtr &= ~drawBit; break;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	b25a      	sxtb	r2, r3
 8008e58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e5c:	43db      	mvns	r3, r3
 8008e5e:	b25b      	sxtb	r3, r3
 8008e60:	4013      	ands	r3, r2
 8008e62:	b25b      	sxtb	r3, r3
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	701a      	strb	r2, [r3, #0]
 8008e6a:	e007      	b.n	8008e7c <_Z24ssd1306_DrawVerticalLinesss+0x140>
              case Inverse: *bufferPtr ^=  drawBit; break;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	781a      	ldrb	r2, [r3, #0]
 8008e70:	7dfb      	ldrb	r3, [r7, #23]
 8008e72:	4053      	eors	r3, r2
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	701a      	strb	r2, [r3, #0]
 8008e7a:	bf00      	nop
        }

        if (length < yOffset) return;
 8008e7c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	f2c0 8087 	blt.w	8008f96 <_Z24ssd1306_DrawVerticalLinesss+0x25a>

        length -= yOffset;
 8008e88:	887a      	ldrh	r2, [r7, #2]
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	807b      	strh	r3, [r7, #2]
        bufferPtr += width();
 8008e94:	f7ff fd21 	bl	80088da <_ZL5widthv>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	613b      	str	r3, [r7, #16]
    }

    if (length >= 8)
 8008ea2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ea6:	2b07      	cmp	r3, #7
 8008ea8:	dd3d      	ble.n	8008f26 <_Z24ssd1306_DrawVerticalLinesss+0x1ea>
    {
        switch (SSD1306.Color)
 8008eaa:	4b3e      	ldr	r3, [pc, #248]	; (8008fa4 <_Z24ssd1306_DrawVerticalLinesss+0x268>)
 8008eac:	795b      	ldrb	r3, [r3, #5]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	dc02      	bgt.n	8008eb8 <_Z24ssd1306_DrawVerticalLinesss+0x17c>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	da03      	bge.n	8008ebe <_Z24ssd1306_DrawVerticalLinesss+0x182>
 8008eb6:	e036      	b.n	8008f26 <_Z24ssd1306_DrawVerticalLinesss+0x1ea>
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d01b      	beq.n	8008ef4 <_Z24ssd1306_DrawVerticalLinesss+0x1b8>
 8008ebc:	e033      	b.n	8008f26 <_Z24ssd1306_DrawVerticalLinesss+0x1ea>
        {
            case White:
            case Black:
                drawBit = (SSD1306.Color == White) ? 0xFF : 0x00;
 8008ebe:	4b39      	ldr	r3, [pc, #228]	; (8008fa4 <_Z24ssd1306_DrawVerticalLinesss+0x268>)
 8008ec0:	795b      	ldrb	r3, [r3, #5]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d101      	bne.n	8008eca <_Z24ssd1306_DrawVerticalLinesss+0x18e>
 8008ec6:	23ff      	movs	r3, #255	; 0xff
 8008ec8:	e000      	b.n	8008ecc <_Z24ssd1306_DrawVerticalLinesss+0x190>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	75fb      	strb	r3, [r7, #23]
                do
                {
                    *bufferPtr = drawBit;
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	7dfa      	ldrb	r2, [r7, #23]
 8008ed2:	701a      	strb	r2, [r3, #0]
                    bufferPtr += width();
 8008ed4:	f7ff fd01 	bl	80088da <_ZL5widthv>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	461a      	mov	r2, r3
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	4413      	add	r3, r2
 8008ee0:	613b      	str	r3, [r7, #16]
                    length -= 8;
 8008ee2:	887b      	ldrh	r3, [r7, #2]
 8008ee4:	3b08      	subs	r3, #8
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	807b      	strh	r3, [r7, #2]
                } while (length >= 8);
 8008eea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008eee:	2b07      	cmp	r3, #7
 8008ef0:	dd16      	ble.n	8008f20 <_Z24ssd1306_DrawVerticalLinesss+0x1e4>
                do
 8008ef2:	e7ec      	b.n	8008ece <_Z24ssd1306_DrawVerticalLinesss+0x192>
            break;

            case Inverse:
                do
                {
                    *bufferPtr = ~(*bufferPtr);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	701a      	strb	r2, [r3, #0]
                    bufferPtr += width();
 8008f00:	f7ff fceb 	bl	80088da <_ZL5widthv>
 8008f04:	4603      	mov	r3, r0
 8008f06:	461a      	mov	r2, r3
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	613b      	str	r3, [r7, #16]
                    length -= 8;
 8008f0e:	887b      	ldrh	r3, [r7, #2]
 8008f10:	3b08      	subs	r3, #8
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	807b      	strh	r3, [r7, #2]
                } while (length >= 8);
 8008f16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f1a:	2b07      	cmp	r3, #7
 8008f1c:	dd02      	ble.n	8008f24 <_Z24ssd1306_DrawVerticalLinesss+0x1e8>
                do
 8008f1e:	e7e9      	b.n	8008ef4 <_Z24ssd1306_DrawVerticalLinesss+0x1b8>
            break;
 8008f20:	bf00      	nop
 8008f22:	e000      	b.n	8008f26 <_Z24ssd1306_DrawVerticalLinesss+0x1ea>
            break;
 8008f24:	bf00      	nop
        }
    }

    if (length > 0)
 8008f26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	dd34      	ble.n	8008f98 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
    {
        drawBit = (1 << (length & 7)) - 1;
 8008f2e:	887b      	ldrh	r3, [r7, #2]
 8008f30:	f003 0307 	and.w	r3, r3, #7
 8008f34:	2201      	movs	r2, #1
 8008f36:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	75fb      	strb	r3, [r7, #23]
        switch (SSD1306.Color)
 8008f40:	4b18      	ldr	r3, [pc, #96]	; (8008fa4 <_Z24ssd1306_DrawVerticalLinesss+0x268>)
 8008f42:	795b      	ldrb	r3, [r3, #5]
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d01a      	beq.n	8008f7e <_Z24ssd1306_DrawVerticalLinesss+0x242>
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	dc25      	bgt.n	8008f98 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d009      	beq.n	8008f64 <_Z24ssd1306_DrawVerticalLinesss+0x228>
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d121      	bne.n	8008f98 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
        {
            case White:   *bufferPtr |=  drawBit; break;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	781a      	ldrb	r2, [r3, #0]
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	b2da      	uxtb	r2, r3
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	e019      	b.n	8008f98 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
            case Black:   *bufferPtr &= ~drawBit; break;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	b25a      	sxtb	r2, r3
 8008f6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f6e:	43db      	mvns	r3, r3
 8008f70:	b25b      	sxtb	r3, r3
 8008f72:	4013      	ands	r3, r2
 8008f74:	b25b      	sxtb	r3, r3
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	701a      	strb	r2, [r3, #0]
 8008f7c:	e00c      	b.n	8008f98 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
            case Inverse: *bufferPtr ^=  drawBit; break;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	781a      	ldrb	r2, [r3, #0]
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	4053      	eors	r3, r2
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	701a      	strb	r2, [r3, #0]
 8008f8c:	e004      	b.n	8008f98 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
    if (x < 0 || x >= width()) return;
 8008f8e:	bf00      	nop
 8008f90:	e002      	b.n	8008f98 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
    if (length <= 0) return;
 8008f92:	bf00      	nop
 8008f94:	e000      	b.n	8008f98 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
        if (length < yOffset) return;
 8008f96:	bf00      	nop
        }
    }
}
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd90      	pop	{r4, r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20002df8 	.word	0x20002df8
 8008fa4:	20002dec 	.word	0x20002dec

08008fa8 <_Z16ssd1306_DrawRectssss>:
//------------------------------------------------------------------------
void ssd1306_DrawRect(int16_t x, int16_t y, int16_t width, int16_t height)
{
 8008fa8:	b590      	push	{r4, r7, lr}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	4604      	mov	r4, r0
 8008fb0:	4608      	mov	r0, r1
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	4623      	mov	r3, r4
 8008fb8:	80fb      	strh	r3, [r7, #6]
 8008fba:	4603      	mov	r3, r0
 8008fbc:	80bb      	strh	r3, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	807b      	strh	r3, [r7, #2]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	803b      	strh	r3, [r7, #0]
	ssd1306_DrawHorizontalLine(x, y, width);
 8008fc6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008fca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7ff fdf8 	bl	8008bc8 <_Z26ssd1306_DrawHorizontalLinesss>
	ssd1306_DrawVerticalLine(x, y, height);
 8008fd8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008fdc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff fea9 	bl	8008d3c <_Z24ssd1306_DrawVerticalLinesss>
	ssd1306_DrawVerticalLine(x + width - 1, y, height);
 8008fea:	88fa      	ldrh	r2, [r7, #6]
 8008fec:	887b      	ldrh	r3, [r7, #2]
 8008fee:	4413      	add	r3, r2
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	b21b      	sxth	r3, r3
 8008ff8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008ffc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff fe9b 	bl	8008d3c <_Z24ssd1306_DrawVerticalLinesss>
	ssd1306_DrawHorizontalLine(x, y + height - 1, width);
 8009006:	88ba      	ldrh	r2, [r7, #4]
 8009008:	883b      	ldrh	r3, [r7, #0]
 800900a:	4413      	add	r3, r2
 800900c:	b29b      	uxth	r3, r3
 800900e:	3b01      	subs	r3, #1
 8009010:	b29b      	uxth	r3, r3
 8009012:	b219      	sxth	r1, r3
 8009014:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800901c:	4618      	mov	r0, r3
 800901e:	f7ff fdd3 	bl	8008bc8 <_Z26ssd1306_DrawHorizontalLinesss>
}
 8009022:	bf00      	nop
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	bd90      	pop	{r4, r7, pc}

0800902a <_Z16ssd1306_DrawRectRK9Rectangle>:
//-------------------------------------
void ssd1306_DrawRect(const Rectangle& rect)
{
 800902a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
	if(rect.isValid())
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff fc29 	bl	800888a <_ZNK9Rectangle7isValidEv>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d026      	beq.n	800908c <_Z16ssd1306_DrawRectRK9Rectangle+0x62>
	{
		ssd1306_SetCursor(rect.X(), rect.Y());
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff f837 	bl	80080b2 <_ZNK9Rectangle1XEv>
 8009044:	4603      	mov	r3, r0
 8009046:	b2dc      	uxtb	r4, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7ff f83e 	bl	80080ca <_ZNK9Rectangle1YEv>
 800904e:	4603      	mov	r3, r0
 8009050:	b2db      	uxtb	r3, r3
 8009052:	4619      	mov	r1, r3
 8009054:	4620      	mov	r0, r4
 8009056:	f000 fb13 	bl	8009680 <_Z17ssd1306_SetCursorhh>
		ssd1306_DrawRect(rect.X(), rect.Y(), rect.Width(), rect.Height());
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7ff f829 	bl	80080b2 <_ZNK9Rectangle1XEv>
 8009060:	4603      	mov	r3, r0
 8009062:	b21c      	sxth	r4, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7ff f830 	bl	80080ca <_ZNK9Rectangle1YEv>
 800906a:	4603      	mov	r3, r0
 800906c:	b21d      	sxth	r5, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7ff f843 	bl	80080fa <_ZNK9Rectangle5WidthEv>
 8009074:	4603      	mov	r3, r0
 8009076:	b21e      	sxth	r6, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7ff f832 	bl	80080e2 <_ZNK9Rectangle6HeightEv>
 800907e:	4603      	mov	r3, r0
 8009080:	b21b      	sxth	r3, r3
 8009082:	4632      	mov	r2, r6
 8009084:	4629      	mov	r1, r5
 8009086:	4620      	mov	r0, r4
 8009088:	f7ff ff8e 	bl	8008fa8 <_Z16ssd1306_DrawRectssss>
	}
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009094 <_Z20ssd1306_DrawFillRectssss>:
//------------------------------------------------------------------------------------
void ssd1306_DrawFillRect(int16_t xMove, int16_t yMove, int16_t width, int16_t height)
{
 8009094:	b590      	push	{r4, r7, lr}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	4604      	mov	r4, r0
 800909c:	4608      	mov	r0, r1
 800909e:	4611      	mov	r1, r2
 80090a0:	461a      	mov	r2, r3
 80090a2:	4623      	mov	r3, r4
 80090a4:	80fb      	strh	r3, [r7, #6]
 80090a6:	4603      	mov	r3, r0
 80090a8:	80bb      	strh	r3, [r7, #4]
 80090aa:	460b      	mov	r3, r1
 80090ac:	807b      	strh	r3, [r7, #2]
 80090ae:	4613      	mov	r3, r2
 80090b0:	803b      	strh	r3, [r7, #0]
    for (int16_t x = xMove; x < xMove + width; x++)
 80090b2:	88fb      	ldrh	r3, [r7, #6]
 80090b4:	81fb      	strh	r3, [r7, #14]
 80090b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80090ba:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80090be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80090c2:	440b      	add	r3, r1
 80090c4:	429a      	cmp	r2, r3
 80090c6:	da0f      	bge.n	80090e8 <_Z20ssd1306_DrawFillRectssss+0x54>
    {
        ssd1306_DrawVerticalLine(x, yMove, height);
 80090c8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80090cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80090d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff fe31 	bl	8008d3c <_Z24ssd1306_DrawVerticalLinesss>
    for (int16_t x = xMove; x < xMove + width; x++)
 80090da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80090de:	b29b      	uxth	r3, r3
 80090e0:	3301      	adds	r3, #1
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	81fb      	strh	r3, [r7, #14]
 80090e6:	e7e6      	b.n	80090b6 <_Z20ssd1306_DrawFillRectssss+0x22>
    }
}
 80090e8:	bf00      	nop
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd90      	pop	{r4, r7, pc}

080090f0 <_Z20ssd1306_DrawFillRectRK9Rectangle>:
//-----------------------------------------
void ssd1306_DrawFillRect(const Rectangle& rect)
{
 80090f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
	if(rect.isValid())
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7ff fbc6 	bl	800888a <_ZNK9Rectangle7isValidEv>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d026      	beq.n	8009152 <_Z20ssd1306_DrawFillRectRK9Rectangle+0x62>
	{
		ssd1306_SetCursor(rect.X(), rect.Y());
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7fe ffd4 	bl	80080b2 <_ZNK9Rectangle1XEv>
 800910a:	4603      	mov	r3, r0
 800910c:	b2dc      	uxtb	r4, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7fe ffdb 	bl	80080ca <_ZNK9Rectangle1YEv>
 8009114:	4603      	mov	r3, r0
 8009116:	b2db      	uxtb	r3, r3
 8009118:	4619      	mov	r1, r3
 800911a:	4620      	mov	r0, r4
 800911c:	f000 fab0 	bl	8009680 <_Z17ssd1306_SetCursorhh>
		ssd1306_DrawFillRect(rect.X(), rect.Y(), rect.Width(), rect.Height());
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7fe ffc6 	bl	80080b2 <_ZNK9Rectangle1XEv>
 8009126:	4603      	mov	r3, r0
 8009128:	b21c      	sxth	r4, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7fe ffcd 	bl	80080ca <_ZNK9Rectangle1YEv>
 8009130:	4603      	mov	r3, r0
 8009132:	b21d      	sxth	r5, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7fe ffe0 	bl	80080fa <_ZNK9Rectangle5WidthEv>
 800913a:	4603      	mov	r3, r0
 800913c:	b21e      	sxth	r6, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7fe ffcf 	bl	80080e2 <_ZNK9Rectangle6HeightEv>
 8009144:	4603      	mov	r3, r0
 8009146:	b21b      	sxth	r3, r3
 8009148:	4632      	mov	r2, r6
 800914a:	4629      	mov	r1, r5
 800914c:	4620      	mov	r0, r4
 800914e:	f7ff ffa1 	bl	8009094 <_Z20ssd1306_DrawFillRectssss>
	}
}
 8009152:	bf00      	nop
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800915c <_Z16ssd1306_DrawCharcRK6font_t>:
		}
	}
}
//--------------------------------------------------
char ssd1306_DrawChar(char ch, const font_t& font)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af00      	add	r7, sp, #0
 8009162:	4603      	mov	r3, r0
 8009164:	6039      	str	r1, [r7, #0]
 8009166:	71fb      	strb	r3, [r7, #7]
//		// Not enough space on current line
//		return 0;
//	}

	// Use the font to write
	uint32_t byteCountPos = (ch - 32) * (font.width*2 + 1);
 8009168:	79fb      	ldrb	r3, [r7, #7]
 800916a:	3b20      	subs	r3, #32
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	7812      	ldrb	r2, [r2, #0]
 8009170:	0052      	lsls	r2, r2, #1
 8009172:	3201      	adds	r2, #1
 8009174:	fb02 f303 	mul.w	r3, r2, r3
 8009178:	617b      	str	r3, [r7, #20]
	uint32_t byteCount    = font.data[byteCountPos];
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	4413      	add	r3, r2
 8009184:	881b      	ldrh	r3, [r3, #0]
 8009186:	613b      	str	r3, [r7, #16]

	for (uint32_t i = 1; i < byteCount*2; i += 2)
 8009188:	2301      	movs	r3, #1
 800918a:	61fb      	str	r3, [r7, #28]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	69fa      	ldr	r2, [r7, #28]
 8009192:	429a      	cmp	r2, r3
 8009194:	d279      	bcs.n	800928a <_Z16ssd1306_DrawCharcRK6font_t+0x12e>
	{
		uint32_t posByte = (ch - 32) * (font.width*2 + 1) + i;
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	3b20      	subs	r3, #32
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	7812      	ldrb	r2, [r2, #0]
 800919e:	0052      	lsls	r2, r2, #1
 80091a0:	3201      	adds	r2, #1
 80091a2:	fb02 f303 	mul.w	r3, r2, r3
 80091a6:	461a      	mov	r2, r3
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	4413      	add	r3, r2
 80091ac:	60fb      	str	r3, [r7, #12]
		uint32_t byte =font.data[posByte];
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	4413      	add	r3, r2
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	60bb      	str	r3, [r7, #8]
		byte |= (font.data[(ch - 32) * (font.width*2 + 1) + i + 1]) << 8;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	79fb      	ldrb	r3, [r7, #7]
 80091c2:	3b20      	subs	r3, #32
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	7809      	ldrb	r1, [r1, #0]
 80091c8:	0049      	lsls	r1, r1, #1
 80091ca:	3101      	adds	r1, #1
 80091cc:	fb01 f303 	mul.w	r3, r1, r3
 80091d0:	4619      	mov	r1, r3
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	440b      	add	r3, r1
 80091d6:	3301      	adds	r3, #1
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	4413      	add	r3, r2
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	021b      	lsls	r3, r3, #8
 80091e0:	461a      	mov	r2, r3
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	60bb      	str	r3, [r7, #8]

		for (uint32_t j = 0; j < font.height; j++)
 80091e8:	2300      	movs	r3, #0
 80091ea:	61bb      	str	r3, [r7, #24]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	461a      	mov	r2, r3
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d244      	bcs.n	8009282 <_Z16ssd1306_DrawCharcRK6font_t+0x126>
		{
			if ((byte >> j) & 0x0001)
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	2b00      	cmp	r3, #0
 8009206:	d012      	beq.n	800922e <_Z16ssd1306_DrawCharcRK6font_t+0xd2>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + i/2, SSD1306.CurrentY + j);
 8009208:	4b27      	ldr	r3, [pc, #156]	; (80092a8 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	b2da      	uxtb	r2, r3
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	085b      	lsrs	r3, r3, #1
 8009212:	b2db      	uxtb	r3, r3
 8009214:	4413      	add	r3, r2
 8009216:	b2d8      	uxtb	r0, r3
 8009218:	4b23      	ldr	r3, [pc, #140]	; (80092a8 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 800921a:	885b      	ldrh	r3, [r3, #2]
 800921c:	b2da      	uxtb	r2, r3
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	4413      	add	r3, r2
 8009224:	b2db      	uxtb	r3, r3
 8009226:	4619      	mov	r1, r3
 8009228:	f7ff fc56 	bl	8008ad8 <_Z17ssd1306_DrawPixelhh>
 800922c:	e025      	b.n	800927a <_Z16ssd1306_DrawCharcRK6font_t+0x11e>
			}
			else
			{
				SSD1306.Color = (SSD1306_COLOR)!SSD1306.Color;
 800922e:	4b1e      	ldr	r3, [pc, #120]	; (80092a8 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 8009230:	795b      	ldrb	r3, [r3, #5]
 8009232:	2b00      	cmp	r3, #0
 8009234:	bf0c      	ite	eq
 8009236:	2301      	moveq	r3, #1
 8009238:	2300      	movne	r3, #0
 800923a:	b2db      	uxtb	r3, r3
 800923c:	461a      	mov	r2, r3
 800923e:	4b1a      	ldr	r3, [pc, #104]	; (80092a8 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 8009240:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + i/2, SSD1306.CurrentY + j);
 8009242:	4b19      	ldr	r3, [pc, #100]	; (80092a8 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	b2da      	uxtb	r2, r3
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	085b      	lsrs	r3, r3, #1
 800924c:	b2db      	uxtb	r3, r3
 800924e:	4413      	add	r3, r2
 8009250:	b2d8      	uxtb	r0, r3
 8009252:	4b15      	ldr	r3, [pc, #84]	; (80092a8 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 8009254:	885b      	ldrh	r3, [r3, #2]
 8009256:	b2da      	uxtb	r2, r3
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	b2db      	uxtb	r3, r3
 800925c:	4413      	add	r3, r2
 800925e:	b2db      	uxtb	r3, r3
 8009260:	4619      	mov	r1, r3
 8009262:	f7ff fc39 	bl	8008ad8 <_Z17ssd1306_DrawPixelhh>
				SSD1306.Color = (SSD1306_COLOR)!SSD1306.Color;
 8009266:	4b10      	ldr	r3, [pc, #64]	; (80092a8 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 8009268:	795b      	ldrb	r3, [r3, #5]
 800926a:	2b00      	cmp	r3, #0
 800926c:	bf0c      	ite	eq
 800926e:	2301      	moveq	r3, #1
 8009270:	2300      	movne	r3, #0
 8009272:	b2db      	uxtb	r3, r3
 8009274:	461a      	mov	r2, r3
 8009276:	4b0c      	ldr	r3, [pc, #48]	; (80092a8 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 8009278:	715a      	strb	r2, [r3, #5]
		for (uint32_t j = 0; j < font.height; j++)
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	3301      	adds	r3, #1
 800927e:	61bb      	str	r3, [r7, #24]
 8009280:	e7b4      	b.n	80091ec <_Z16ssd1306_DrawCharcRK6font_t+0x90>
	for (uint32_t i = 1; i < byteCount*2; i += 2)
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	3302      	adds	r3, #2
 8009286:	61fb      	str	r3, [r7, #28]
 8009288:	e780      	b.n	800918c <_Z16ssd1306_DrawCharcRK6font_t+0x30>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += byteCount + 2;
 800928a:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 800928c:	881a      	ldrh	r2, [r3, #0]
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	b29b      	uxth	r3, r3
 8009292:	4413      	add	r3, r2
 8009294:	b29b      	uxth	r3, r3
 8009296:	3302      	adds	r3, #2
 8009298:	b29a      	uxth	r2, r3
 800929a:	4b03      	ldr	r3, [pc, #12]	; (80092a8 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 800929c:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800929e:	79fb      	ldrb	r3, [r7, #7]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3720      	adds	r7, #32
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	20002dec 	.word	0x20002dec

080092ac <_Z20ssd1306_DrawUtf8ChartRK6font_t>:
//--------------------------------------------------------------
uint16_t ssd1306_DrawUtf8Char(uint16_t ch, const font_t& font)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	6039      	str	r1, [r7, #0]
 80092b6:	80fb      	strh	r3, [r7, #6]
	uint8_t ch_pos;

	if(ch >= 0xd090 && ch < 0xd180)
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	f24d 028f 	movw	r2, #53391	; 0xd08f
 80092be:	4293      	cmp	r3, r2
 80092c0:	d909      	bls.n	80092d6 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x2a>
 80092c2:	88fb      	ldrh	r3, [r7, #6]
 80092c4:	f24d 127f 	movw	r2, #53631	; 0xd17f
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d804      	bhi.n	80092d6 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x2a>
		ch_pos = (ch - 0xd090) + (0x80 - (0x20 + 1));
 80092cc:	88fb      	ldrh	r3, [r7, #6]
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	3b31      	subs	r3, #49	; 0x31
 80092d2:	77fb      	strb	r3, [r7, #31]
 80092d4:	e00d      	b.n	80092f2 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x46>
	else if(ch >= 0xd180)
 80092d6:	88fb      	ldrh	r3, [r7, #6]
 80092d8:	f24d 127f 	movw	r2, #53631	; 0xd17f
 80092dc:	4293      	cmp	r3, r2
 80092de:	d904      	bls.n	80092ea <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x3e>
		ch_pos = (ch - 0xd090) - (0x80 - (0x20 - 1));
 80092e0:	88fb      	ldrh	r3, [r7, #6]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	330f      	adds	r3, #15
 80092e6:	77fb      	strb	r3, [r7, #31]
 80092e8:	e003      	b.n	80092f2 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x46>
	else
		ch_pos = ch - 32;
 80092ea:	88fb      	ldrh	r3, [r7, #6]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	3b20      	subs	r3, #32
 80092f0:	77fb      	strb	r3, [r7, #31]

	// Use the font to write
	uint32_t byte_count = font.data[ch_pos * (font.width*2 + 1)];
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	7ffb      	ldrb	r3, [r7, #31]
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	7809      	ldrb	r1, [r1, #0]
 80092fc:	0049      	lsls	r1, r1, #1
 80092fe:	3101      	adds	r1, #1
 8009300:	fb01 f303 	mul.w	r3, r1, r3
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	4413      	add	r3, r2
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	613b      	str	r3, [r7, #16]

	for (uint32_t i = 1; i < byte_count*2; i += 2)
 800930c:	2301      	movs	r3, #1
 800930e:	61bb      	str	r3, [r7, #24]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	429a      	cmp	r2, r3
 8009318:	d275      	bcs.n	8009406 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x15a>
	{
		uint32_t byte = font.data[ch_pos * (font.width*2 + 1) + i];
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	7ffb      	ldrb	r3, [r7, #31]
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	7809      	ldrb	r1, [r1, #0]
 8009324:	0049      	lsls	r1, r1, #1
 8009326:	3101      	adds	r1, #1
 8009328:	fb01 f303 	mul.w	r3, r1, r3
 800932c:	4619      	mov	r1, r3
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	440b      	add	r3, r1
 8009332:	005b      	lsls	r3, r3, #1
 8009334:	4413      	add	r3, r2
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	60fb      	str	r3, [r7, #12]
		byte |= (font.data[ch_pos * (font.width*2 + 1) + i + 1]) << 8;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	7ffb      	ldrb	r3, [r7, #31]
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	7809      	ldrb	r1, [r1, #0]
 8009344:	0049      	lsls	r1, r1, #1
 8009346:	3101      	adds	r1, #1
 8009348:	fb01 f303 	mul.w	r3, r1, r3
 800934c:	4619      	mov	r1, r3
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	440b      	add	r3, r1
 8009352:	3301      	adds	r3, #1
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	4413      	add	r3, r2
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	021b      	lsls	r3, r3, #8
 800935c:	461a      	mov	r2, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	4313      	orrs	r3, r2
 8009362:	60fb      	str	r3, [r7, #12]

		for (uint32_t j = 0; j < font.height; j++)
 8009364:	2300      	movs	r3, #0
 8009366:	617b      	str	r3, [r7, #20]
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	785b      	ldrb	r3, [r3, #1]
 800936c:	461a      	mov	r2, r3
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	4293      	cmp	r3, r2
 8009372:	d244      	bcs.n	80093fe <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x152>
		{
			if ((byte >> j) & 0x0001)
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	fa22 f303 	lsr.w	r3, r2, r3
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	d012      	beq.n	80093aa <_Z20ssd1306_DrawUtf8ChartRK6font_t+0xfe>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + i/2, SSD1306.CurrentY + j);
 8009384:	4b27      	ldr	r3, [pc, #156]	; (8009424 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	b2da      	uxtb	r2, r3
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	085b      	lsrs	r3, r3, #1
 800938e:	b2db      	uxtb	r3, r3
 8009390:	4413      	add	r3, r2
 8009392:	b2d8      	uxtb	r0, r3
 8009394:	4b23      	ldr	r3, [pc, #140]	; (8009424 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 8009396:	885b      	ldrh	r3, [r3, #2]
 8009398:	b2da      	uxtb	r2, r3
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	b2db      	uxtb	r3, r3
 800939e:	4413      	add	r3, r2
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	4619      	mov	r1, r3
 80093a4:	f7ff fb98 	bl	8008ad8 <_Z17ssd1306_DrawPixelhh>
 80093a8:	e025      	b.n	80093f6 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x14a>
			}
			else
			{
				SSD1306.Color = (SSD1306_COLOR)!SSD1306.Color;
 80093aa:	4b1e      	ldr	r3, [pc, #120]	; (8009424 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 80093ac:	795b      	ldrb	r3, [r3, #5]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bf0c      	ite	eq
 80093b2:	2301      	moveq	r3, #1
 80093b4:	2300      	movne	r3, #0
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	461a      	mov	r2, r3
 80093ba:	4b1a      	ldr	r3, [pc, #104]	; (8009424 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 80093bc:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + i/2, SSD1306.CurrentY + j);
 80093be:	4b19      	ldr	r3, [pc, #100]	; (8009424 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	085b      	lsrs	r3, r3, #1
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	4413      	add	r3, r2
 80093cc:	b2d8      	uxtb	r0, r3
 80093ce:	4b15      	ldr	r3, [pc, #84]	; (8009424 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 80093d0:	885b      	ldrh	r3, [r3, #2]
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	4413      	add	r3, r2
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	4619      	mov	r1, r3
 80093de:	f7ff fb7b 	bl	8008ad8 <_Z17ssd1306_DrawPixelhh>
				SSD1306.Color = (SSD1306_COLOR)!SSD1306.Color;
 80093e2:	4b10      	ldr	r3, [pc, #64]	; (8009424 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 80093e4:	795b      	ldrb	r3, [r3, #5]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bf0c      	ite	eq
 80093ea:	2301      	moveq	r3, #1
 80093ec:	2300      	movne	r3, #0
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	461a      	mov	r2, r3
 80093f2:	4b0c      	ldr	r3, [pc, #48]	; (8009424 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 80093f4:	715a      	strb	r2, [r3, #5]
		for (uint32_t j = 0; j < font.height; j++)
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	3301      	adds	r3, #1
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	e7b4      	b.n	8009368 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0xbc>
	for (uint32_t i = 1; i < byte_count*2; i += 2)
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	3302      	adds	r3, #2
 8009402:	61bb      	str	r3, [r7, #24]
 8009404:	e784      	b.n	8009310 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x64>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += byte_count + 2;
 8009406:	4b07      	ldr	r3, [pc, #28]	; (8009424 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 8009408:	881a      	ldrh	r2, [r3, #0]
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	b29b      	uxth	r3, r3
 800940e:	4413      	add	r3, r2
 8009410:	b29b      	uxth	r3, r3
 8009412:	3302      	adds	r3, #2
 8009414:	b29a      	uxth	r2, r3
 8009416:	4b03      	ldr	r3, [pc, #12]	; (8009424 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 8009418:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800941a:	88fb      	ldrh	r3, [r7, #6]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3720      	adds	r7, #32
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	20002dec 	.word	0x20002dec

08009428 <_Z18ssd1306_DrawStringPcRK6font_t>:
//
//  Write full string to screenbuffer
//
char ssd1306_DrawString(char* str, const font_t& font)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
	uint8_t len = strlen(str);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7f6 fecc 	bl	80001d0 <strlen>
 8009438:	4603      	mov	r3, r0
 800943a:	73bb      	strb	r3, [r7, #14]

	if(len > 0)
 800943c:	7bbb      	ldrb	r3, [r7, #14]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d04b      	beq.n	80094da <_Z18ssd1306_DrawStringPcRK6font_t+0xb2>
	{
		uint8_t i = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	73fb      	strb	r3, [r7, #15]

		while(i < len)
 8009446:	7bfa      	ldrb	r2, [r7, #15]
 8009448:	7bbb      	ldrb	r3, [r7, #14]
 800944a:	429a      	cmp	r2, r3
 800944c:	d245      	bcs.n	80094da <_Z18ssd1306_DrawStringPcRK6font_t+0xb2>
		{
			uint16_t ch1 = (*(str + i));
 800944e:	7bfb      	ldrb	r3, [r7, #15]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	4413      	add	r3, r2
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	81bb      	strh	r3, [r7, #12]

			if(ch1 == 0xd0 || ch1 == 0xd1)
 8009458:	89bb      	ldrh	r3, [r7, #12]
 800945a:	2bd0      	cmp	r3, #208	; 0xd0
 800945c:	d002      	beq.n	8009464 <_Z18ssd1306_DrawStringPcRK6font_t+0x3c>
 800945e:	89bb      	ldrh	r3, [r7, #12]
 8009460:	2bd1      	cmp	r3, #209	; 0xd1
 8009462:	d123      	bne.n	80094ac <_Z18ssd1306_DrawStringPcRK6font_t+0x84>
			{
				uint16_t ch2 = *(str + i + 1);
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	3301      	adds	r3, #1
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	4413      	add	r3, r2
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	817b      	strh	r3, [r7, #10]
				uint16_t s = ((ch1 << 8) | ch2);
 8009470:	89bb      	ldrh	r3, [r7, #12]
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	b21a      	sxth	r2, r3
 8009476:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800947a:	4313      	orrs	r3, r2
 800947c:	b21b      	sxth	r3, r3
 800947e:	813b      	strh	r3, [r7, #8]

				if(ssd1306_DrawUtf8Char(s, font) != s)
 8009480:	893b      	ldrh	r3, [r7, #8]
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff ff11 	bl	80092ac <_Z20ssd1306_DrawUtf8ChartRK6font_t>
 800948a:	4603      	mov	r3, r0
 800948c:	461a      	mov	r2, r3
 800948e:	893b      	ldrh	r3, [r7, #8]
 8009490:	4293      	cmp	r3, r2
 8009492:	bf14      	ite	ne
 8009494:	2301      	movne	r3, #1
 8009496:	2300      	moveq	r3, #0
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <_Z18ssd1306_DrawStringPcRK6font_t+0x7c>
				{
					// Char could not be written
					return *str;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	e01c      	b.n	80094de <_Z18ssd1306_DrawStringPcRK6font_t+0xb6>
				}

				i += 2;
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	3302      	adds	r3, #2
 80094a8:	73fb      	strb	r3, [r7, #15]
 80094aa:	e015      	b.n	80094d8 <_Z18ssd1306_DrawStringPcRK6font_t+0xb0>
			}
			else
			{
				if(ssd1306_DrawChar(ch1, font) != ch1)
 80094ac:	89bb      	ldrh	r3, [r7, #12]
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff fe52 	bl	800915c <_Z16ssd1306_DrawCharcRK6font_t>
 80094b8:	4603      	mov	r3, r0
 80094ba:	461a      	mov	r2, r3
 80094bc:	89bb      	ldrh	r3, [r7, #12]
 80094be:	429a      	cmp	r2, r3
 80094c0:	bf14      	ite	ne
 80094c2:	2301      	movne	r3, #1
 80094c4:	2300      	moveq	r3, #0
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <_Z18ssd1306_DrawStringPcRK6font_t+0xaa>
				{
					// Char could not be written
					return *str;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	e005      	b.n	80094de <_Z18ssd1306_DrawStringPcRK6font_t+0xb6>
				}

				i++;
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	3301      	adds	r3, #1
 80094d6:	73fb      	strb	r3, [r7, #15]
		while(i < len)
 80094d8:	e7b5      	b.n	8009446 <_Z18ssd1306_DrawStringPcRK6font_t+0x1e>
			}
		}
	}

	// Everything ok
	return *str;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	781b      	ldrb	r3, [r3, #0]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment>:
//-------------------------------------------------------------------------------------------------------
char ssd1306_DrawString(const Rectangle& rect, char* str, const font_t& font, const SSD1306_Alignment align)
{
 80094e6:	b590      	push	{r4, r7, lr}
 80094e8:	b095      	sub	sp, #84	; 0x54
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	60f8      	str	r0, [r7, #12]
 80094ee:	60b9      	str	r1, [r7, #8]
 80094f0:	607a      	str	r2, [r7, #4]
 80094f2:	70fb      	strb	r3, [r7, #3]
	Rectangle rect_str = ssd1306_BoundString(str, font);
 80094f4:	f107 0314 	add.w	r3, r7, #20
 80094f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	68b9      	ldr	r1, [r7, #8]
 8009500:	4618      	mov	r0, r3
 8009502:	f000 f8e1 	bl	80096c8 <_Z19ssd1306_BoundStringPKcRK6font_tf>
	char ch = '\0';
 8009506:	2300      	movs	r3, #0
 8009508:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(rect.isValid() && rect_str.isValid())
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f7ff f9bc 	bl	800888a <_ZNK9Rectangle7isValidEv>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d009      	beq.n	800952c <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0x46>
 8009518:	f107 0314 	add.w	r3, r7, #20
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff f9b4 	bl	800888a <_ZNK9Rectangle7isValidEv>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0x46>
 8009528:	2301      	movs	r3, #1
 800952a:	e000      	b.n	800952e <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0x48>
 800952c:	2300      	movs	r3, #0
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 809f 	beq.w	8009672 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0x18c>
	{
		uint32_t pos_x = rect.X();
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f7fe fdbc 	bl	80080b2 <_ZNK9Rectangle1XEv>
 800953a:	64b8      	str	r0, [r7, #72]	; 0x48
		uint32_t pos_y = rect.Y();
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7fe fdc4 	bl	80080ca <_ZNK9Rectangle1YEv>
 8009542:	6478      	str	r0, [r7, #68]	; 0x44

		if(align & ALIGN_LEFT)
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0x78>
		{
			pos_x += rect.left();
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f7ff f958 	bl	8008804 <_ZNK9Rectangle4leftEv>
 8009554:	4602      	mov	r2, r0
 8009556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009558:	4413      	add	r3, r2
 800955a:	64bb      	str	r3, [r7, #72]	; 0x48
 800955c:	e036      	b.n	80095cc <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0xe6>
		}
		else if(align & ALIGN_RIGHT)
 800955e:	78fb      	ldrb	r3, [r7, #3]
 8009560:	f003 0302 	and.w	r3, r3, #2
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00e      	beq.n	8009586 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0xa0>
		{
			pos_x += rect.right() - rect_str.Width();
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f7ff f957 	bl	800881c <_ZNK9Rectangle5rightEv>
 800956e:	4604      	mov	r4, r0
 8009570:	f107 0314 	add.w	r3, r7, #20
 8009574:	4618      	mov	r0, r3
 8009576:	f7fe fdc0 	bl	80080fa <_ZNK9Rectangle5WidthEv>
 800957a:	4603      	mov	r3, r0
 800957c:	1ae3      	subs	r3, r4, r3
 800957e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009580:	4413      	add	r3, r2
 8009582:	64bb      	str	r3, [r7, #72]	; 0x48
 8009584:	e022      	b.n	80095cc <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0xe6>
		}
		else if(align & ALIGN_HCENTER)
 8009586:	78fb      	ldrb	r3, [r7, #3]
 8009588:	f003 0310 	and.w	r3, r3, #16
 800958c:	2b00      	cmp	r3, #0
 800958e:	d01d      	beq.n	80095cc <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0xe6>
		{
			pos_x += rect.center().x() - rect_str.center().x();
 8009590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009594:	68f9      	ldr	r1, [r7, #12]
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff f98c 	bl	80088b4 <_ZNK9Rectangle6centerEv>
 800959c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff f908 	bl	80087b6 <_ZNK5Point1xEv>
 80095a6:	4604      	mov	r4, r0
 80095a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095ac:	f107 0214 	add.w	r2, r7, #20
 80095b0:	4611      	mov	r1, r2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7ff f97e 	bl	80088b4 <_ZNK9Rectangle6centerEv>
 80095b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff f8fa 	bl	80087b6 <_ZNK5Point1xEv>
 80095c2:	4603      	mov	r3, r0
 80095c4:	1ae3      	subs	r3, r4, r3
 80095c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095c8:	4413      	add	r3, r2
 80095ca:	64bb      	str	r3, [r7, #72]	; 0x48
		}

		if(align & ALIGN_TOP)
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	f003 0304 	and.w	r3, r3, #4
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d007      	beq.n	80095e6 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0x100>
		{
			pos_y += rect.top();
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f7ff f92f 	bl	800883a <_ZNK9Rectangle3topEv>
 80095dc:	4602      	mov	r2, r0
 80095de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e0:	4413      	add	r3, r2
 80095e2:	647b      	str	r3, [r7, #68]	; 0x44
 80095e4:	e036      	b.n	8009654 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0x16e>
		}
		else if(align & ALIGN_BOTTOM)
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	f003 0308 	and.w	r3, r3, #8
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00e      	beq.n	800960e <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0x128>
		{
			pos_y += rect.bottom() - rect_str.Height();
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f7ff f8f8 	bl	80087e6 <_ZNK9Rectangle6bottomEv>
 80095f6:	4604      	mov	r4, r0
 80095f8:	f107 0314 	add.w	r3, r7, #20
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe fd70 	bl	80080e2 <_ZNK9Rectangle6HeightEv>
 8009602:	4603      	mov	r3, r0
 8009604:	1ae3      	subs	r3, r4, r3
 8009606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009608:	4413      	add	r3, r2
 800960a:	647b      	str	r3, [r7, #68]	; 0x44
 800960c:	e022      	b.n	8009654 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0x16e>
		}
		else if(align & ALIGN_VCENTER)
 800960e:	78fb      	ldrb	r3, [r7, #3]
 8009610:	f003 0320 	and.w	r3, r3, #32
 8009614:	2b00      	cmp	r3, #0
 8009616:	d01d      	beq.n	8009654 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t17SSD1306_Alignment+0x16e>
		{
			pos_y += rect.center().y() - rect_str.center().y();
 8009618:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800961c:	68f9      	ldr	r1, [r7, #12]
 800961e:	4618      	mov	r0, r3
 8009620:	f7ff f948 	bl	80088b4 <_ZNK9Rectangle6centerEv>
 8009624:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff f8d0 	bl	80087ce <_ZNK5Point1yEv>
 800962e:	4604      	mov	r4, r0
 8009630:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009634:	f107 0214 	add.w	r2, r7, #20
 8009638:	4611      	mov	r1, r2
 800963a:	4618      	mov	r0, r3
 800963c:	f7ff f93a 	bl	80088b4 <_ZNK9Rectangle6centerEv>
 8009640:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009644:	4618      	mov	r0, r3
 8009646:	f7ff f8c2 	bl	80087ce <_ZNK5Point1yEv>
 800964a:	4603      	mov	r3, r0
 800964c:	1ae3      	subs	r3, r4, r3
 800964e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009650:	4413      	add	r3, r2
 8009652:	647b      	str	r3, [r7, #68]	; 0x44
		}

		ssd1306_SetCursor(pos_x, pos_y);
 8009654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009656:	b2db      	uxtb	r3, r3
 8009658:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800965a:	b2d2      	uxtb	r2, r2
 800965c:	4611      	mov	r1, r2
 800965e:	4618      	mov	r0, r3
 8009660:	f000 f80e 	bl	8009680 <_Z17ssd1306_SetCursorhh>
		ch = ssd1306_DrawString(str, font);
 8009664:	6879      	ldr	r1, [r7, #4]
 8009666:	68b8      	ldr	r0, [r7, #8]
 8009668:	f7ff fede 	bl	8009428 <_Z18ssd1306_DrawStringPcRK6font_t>
 800966c:	4603      	mov	r3, r0
 800966e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}

	return ch;
 8009672:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009676:	4618      	mov	r0, r3
 8009678:	3754      	adds	r7, #84	; 0x54
 800967a:	46bd      	mov	sp, r7
 800967c:	bd90      	pop	{r4, r7, pc}
	...

08009680 <_Z17ssd1306_SetCursorhh>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	460a      	mov	r2, r1
 800968a:	71fb      	strb	r3, [r7, #7]
 800968c:	4613      	mov	r3, r2
 800968e:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8009690:	79fb      	ldrb	r3, [r7, #7]
 8009692:	b29a      	uxth	r2, r3
 8009694:	4b05      	ldr	r3, [pc, #20]	; (80096ac <_Z17ssd1306_SetCursorhh+0x2c>)
 8009696:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8009698:	79bb      	ldrb	r3, [r7, #6]
 800969a:	b29a      	uxth	r2, r3
 800969c:	4b03      	ldr	r3, [pc, #12]	; (80096ac <_Z17ssd1306_SetCursorhh+0x2c>)
 800969e:	805a      	strh	r2, [r3, #2]
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	20002dec 	.word	0x20002dec

080096b0 <_Z13ssd1306_Clearv>:
	ssd1306_WriteCommand(SEGREMAP);
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}
//------------------
void ssd1306_Clear()
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 80096b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096b8:	2100      	movs	r1, #0
 80096ba:	4802      	ldr	r0, [pc, #8]	; (80096c4 <_Z13ssd1306_Clearv+0x14>)
 80096bc:	f000 f928 	bl	8009910 <memset>
}
 80096c0:	bf00      	nop
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	20002df8 	.word	0x20002df8

080096c8 <_Z19ssd1306_BoundStringPKcRK6font_tf>:
		ssd1306_SetColor(Inverse);
	}
}
//-------------------------------------------------------------------------------
Rectangle ssd1306_BoundString(const char *str, const font_t& font, float factor)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	ed87 0a00 	vstr	s0, [r7]
	Rectangle rect;
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7fe fcd3 	bl	8008084 <_ZN9RectangleC1Ev>
	uint8_t len = strlen(str);
 80096de:	68b8      	ldr	r0, [r7, #8]
 80096e0:	f7f6 fd76 	bl	80001d0 <strlen>
 80096e4:	4603      	mov	r3, r0
 80096e6:	753b      	strb	r3, [r7, #20]
	uint8_t ch_count = 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	77fb      	strb	r3, [r7, #31]

	if(len > 0)
 80096ec:	7d3b      	ldrb	r3, [r7, #20]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 8082 	beq.w	80097f8 <_Z19ssd1306_BoundStringPKcRK6font_tf+0x130>
	{
		uint8_t i = 0;
 80096f4:	2300      	movs	r3, #0
 80096f6:	77bb      	strb	r3, [r7, #30]
		uint32_t w = 0;
 80096f8:	2300      	movs	r3, #0
 80096fa:	61bb      	str	r3, [r7, #24]

		while(i < len)
 80096fc:	7fba      	ldrb	r2, [r7, #30]
 80096fe:	7d3b      	ldrb	r3, [r7, #20]
 8009700:	429a      	cmp	r2, r3
 8009702:	d24e      	bcs.n	80097a2 <_Z19ssd1306_BoundStringPKcRK6font_tf+0xda>
		{
			uint16_t ch = (*(str + i));
 8009704:	7fbb      	ldrb	r3, [r7, #30]
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	4413      	add	r3, r2
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	82fb      	strh	r3, [r7, #22]

			if(ch == 0xd0 || ch == 0xd1)
 800970e:	8afb      	ldrh	r3, [r7, #22]
 8009710:	2bd0      	cmp	r3, #208	; 0xd0
 8009712:	d002      	beq.n	800971a <_Z19ssd1306_BoundStringPKcRK6font_tf+0x52>
 8009714:	8afb      	ldrh	r3, [r7, #22]
 8009716:	2bd1      	cmp	r3, #209	; 0xd1
 8009718:	d10f      	bne.n	800973a <_Z19ssd1306_BoundStringPKcRK6font_tf+0x72>
			{
				ch = (ch << 8) | *(str + i + 1);
 800971a:	8afb      	ldrh	r3, [r7, #22]
 800971c:	021b      	lsls	r3, r3, #8
 800971e:	b21a      	sxth	r2, r3
 8009720:	7fbb      	ldrb	r3, [r7, #30]
 8009722:	3301      	adds	r3, #1
 8009724:	68b9      	ldr	r1, [r7, #8]
 8009726:	440b      	add	r3, r1
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	b21b      	sxth	r3, r3
 800972c:	4313      	orrs	r3, r2
 800972e:	b21b      	sxth	r3, r3
 8009730:	82fb      	strh	r3, [r7, #22]
				i += 2;
 8009732:	7fbb      	ldrb	r3, [r7, #30]
 8009734:	3302      	adds	r3, #2
 8009736:	77bb      	strb	r3, [r7, #30]
 8009738:	e002      	b.n	8009740 <_Z19ssd1306_BoundStringPKcRK6font_tf+0x78>
			}
			else
			{
				i++;
 800973a:	7fbb      	ldrb	r3, [r7, #30]
 800973c:	3301      	adds	r3, #1
 800973e:	77bb      	strb	r3, [r7, #30]
			}

			uint8_t ch_pos;

			if(ch >= 0xd090 && ch < 0xd180)
 8009740:	8afb      	ldrh	r3, [r7, #22]
 8009742:	f24d 028f 	movw	r2, #53391	; 0xd08f
 8009746:	4293      	cmp	r3, r2
 8009748:	d909      	bls.n	800975e <_Z19ssd1306_BoundStringPKcRK6font_tf+0x96>
 800974a:	8afb      	ldrh	r3, [r7, #22]
 800974c:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8009750:	4293      	cmp	r3, r2
 8009752:	d804      	bhi.n	800975e <_Z19ssd1306_BoundStringPKcRK6font_tf+0x96>
				ch_pos = (ch - 0xd090) + (0x80 - (0x20 + 1));
 8009754:	8afb      	ldrh	r3, [r7, #22]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	3b31      	subs	r3, #49	; 0x31
 800975a:	757b      	strb	r3, [r7, #21]
 800975c:	e00d      	b.n	800977a <_Z19ssd1306_BoundStringPKcRK6font_tf+0xb2>
			else if(ch >= 0xd180)
 800975e:	8afb      	ldrh	r3, [r7, #22]
 8009760:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8009764:	4293      	cmp	r3, r2
 8009766:	d904      	bls.n	8009772 <_Z19ssd1306_BoundStringPKcRK6font_tf+0xaa>
				ch_pos = (ch - 0xd090) - (0x80 - (0x20 - 1));
 8009768:	8afb      	ldrh	r3, [r7, #22]
 800976a:	b2db      	uxtb	r3, r3
 800976c:	330f      	adds	r3, #15
 800976e:	757b      	strb	r3, [r7, #21]
 8009770:	e003      	b.n	800977a <_Z19ssd1306_BoundStringPKcRK6font_tf+0xb2>
			else
				ch_pos = ch - 32;
 8009772:	8afb      	ldrh	r3, [r7, #22]
 8009774:	b2db      	uxtb	r3, r3
 8009776:	3b20      	subs	r3, #32
 8009778:	757b      	strb	r3, [r7, #21]

			w += font.data[ch_pos * (font.width*2 + 1)];
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	7d7b      	ldrb	r3, [r7, #21]
 8009780:	6879      	ldr	r1, [r7, #4]
 8009782:	7809      	ldrb	r1, [r1, #0]
 8009784:	0049      	lsls	r1, r1, #1
 8009786:	3101      	adds	r1, #1
 8009788:	fb01 f303 	mul.w	r3, r1, r3
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	4413      	add	r3, r2
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	461a      	mov	r2, r3
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	4413      	add	r3, r2
 8009798:	61bb      	str	r3, [r7, #24]
			ch_count++;
 800979a:	7ffb      	ldrb	r3, [r7, #31]
 800979c:	3301      	adds	r3, #1
 800979e:	77fb      	strb	r3, [r7, #31]
		while(i < len)
 80097a0:	e7ac      	b.n	80096fc <_Z19ssd1306_BoundStringPKcRK6font_tf+0x34>
		}

		if(ch_count > 1)
 80097a2:	7ffb      	ldrb	r3, [r7, #31]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d906      	bls.n	80097b6 <_Z19ssd1306_BoundStringPKcRK6font_tf+0xee>
			w += 2*(ch_count - 1);
 80097a8:	7ffb      	ldrb	r3, [r7, #31]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	461a      	mov	r2, r3
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	4413      	add	r3, r2
 80097b4:	61bb      	str	r3, [r7, #24]

		rect.setWidth(w*factor);
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	ee07 3a90 	vmov	s15, r3
 80097bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80097c0:	edd7 7a00 	vldr	s15, [r7]
 80097c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097cc:	ee17 1a90 	vmov	r1, s15
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f7ff f83e 	bl	8008852 <_ZN9Rectangle8setWidthEm>
		rect.setHeight(font.height*factor);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	785b      	ldrb	r3, [r3, #1]
 80097da:	ee07 3a90 	vmov	s15, r3
 80097de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097e2:	edd7 7a00 	vldr	s15, [r7]
 80097e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ee:	ee17 1a90 	vmov	r1, s15
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f7ff f83b 	bl	800886e <_ZN9Rectangle9setHeightEm>
	}

	return rect;
 80097f8:	bf00      	nop
}
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	3720      	adds	r7, #32
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <_ZL20ssd1306_WriteCommandh>:
///
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af02      	add	r7, sp, #8
 800980a:	4603      	mov	r3, r0
 800980c:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(_hi2c) != HAL_I2C_STATE_READY);
 800980e:	4b0e      	ldr	r3, [pc, #56]	; (8009848 <_ZL20ssd1306_WriteCommandh+0x44>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f7f8 fa8b 	bl	8001d2e <HAL_I2C_GetState>
 8009818:	4603      	mov	r3, r0
 800981a:	2b20      	cmp	r3, #32
 800981c:	bf14      	ite	ne
 800981e:	2301      	movne	r3, #1
 8009820:	2300      	moveq	r3, #0
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	d000      	beq.n	800982a <_ZL20ssd1306_WriteCommandh+0x26>
 8009828:	e7f1      	b.n	800980e <_ZL20ssd1306_WriteCommandh+0xa>
	HAL_I2C_Mem_Write_DMA(_hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 800982a:	4b07      	ldr	r3, [pc, #28]	; (8009848 <_ZL20ssd1306_WriteCommandh+0x44>)
 800982c:	6818      	ldr	r0, [r3, #0]
 800982e:	2301      	movs	r3, #1
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	1dfb      	adds	r3, r7, #7
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	2301      	movs	r3, #1
 8009838:	2200      	movs	r2, #0
 800983a:	2178      	movs	r1, #120	; 0x78
 800983c:	f7f8 f802 	bl	8001844 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(_hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
#endif
}
 8009840:	bf00      	nop
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20002df4 	.word	0x20002df4

0800984c <_ZL17ssd1306_WriteDataPht>:

static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af02      	add	r7, sp, #8
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	460b      	mov	r3, r1
 8009856:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(_hi2c) != HAL_I2C_STATE_READY);
 8009858:	4b0e      	ldr	r3, [pc, #56]	; (8009894 <_ZL17ssd1306_WriteDataPht+0x48>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4618      	mov	r0, r3
 800985e:	f7f8 fa66 	bl	8001d2e <HAL_I2C_GetState>
 8009862:	4603      	mov	r3, r0
 8009864:	2b20      	cmp	r3, #32
 8009866:	bf14      	ite	ne
 8009868:	2301      	movne	r3, #1
 800986a:	2300      	moveq	r3, #0
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d000      	beq.n	8009874 <_ZL17ssd1306_WriteDataPht+0x28>
 8009872:	e7f1      	b.n	8009858 <_ZL17ssd1306_WriteDataPht+0xc>
	HAL_I2C_Mem_Write_DMA(_hi2c, SSD1306_I2C_ADDR, 0x40, 1, data, size);
 8009874:	4b07      	ldr	r3, [pc, #28]	; (8009894 <_ZL17ssd1306_WriteDataPht+0x48>)
 8009876:	6818      	ldr	r0, [r3, #0]
 8009878:	887b      	ldrh	r3, [r7, #2]
 800987a:	9301      	str	r3, [sp, #4]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	2301      	movs	r3, #1
 8009882:	2240      	movs	r2, #64	; 0x40
 8009884:	2178      	movs	r1, #120	; 0x78
 8009886:	f7f7 ffdd 	bl	8001844 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(_hi2c, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
#endif
}
 800988a:	bf00      	nop
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20002df4 	.word	0x20002df4

08009898 <HAL_I2C_MemTxCpltCallback>:

#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == _hi2c->Instance)
	{
		//TODO:
	}
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <__libc_init_array>:
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	4d0d      	ldr	r5, [pc, #52]	; (80098e4 <__libc_init_array+0x38>)
 80098b0:	4c0d      	ldr	r4, [pc, #52]	; (80098e8 <__libc_init_array+0x3c>)
 80098b2:	1b64      	subs	r4, r4, r5
 80098b4:	10a4      	asrs	r4, r4, #2
 80098b6:	2600      	movs	r6, #0
 80098b8:	42a6      	cmp	r6, r4
 80098ba:	d109      	bne.n	80098d0 <__libc_init_array+0x24>
 80098bc:	4d0b      	ldr	r5, [pc, #44]	; (80098ec <__libc_init_array+0x40>)
 80098be:	4c0c      	ldr	r4, [pc, #48]	; (80098f0 <__libc_init_array+0x44>)
 80098c0:	f000 f836 	bl	8009930 <_init>
 80098c4:	1b64      	subs	r4, r4, r5
 80098c6:	10a4      	asrs	r4, r4, #2
 80098c8:	2600      	movs	r6, #0
 80098ca:	42a6      	cmp	r6, r4
 80098cc:	d105      	bne.n	80098da <__libc_init_array+0x2e>
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098d4:	4798      	blx	r3
 80098d6:	3601      	adds	r6, #1
 80098d8:	e7ee      	b.n	80098b8 <__libc_init_array+0xc>
 80098da:	f855 3b04 	ldr.w	r3, [r5], #4
 80098de:	4798      	blx	r3
 80098e0:	3601      	adds	r6, #1
 80098e2:	e7f2      	b.n	80098ca <__libc_init_array+0x1e>
 80098e4:	0800c3d4 	.word	0x0800c3d4
 80098e8:	0800c3d4 	.word	0x0800c3d4
 80098ec:	0800c3d4 	.word	0x0800c3d4
 80098f0:	0800c3d8 	.word	0x0800c3d8

080098f4 <memcpy>:
 80098f4:	440a      	add	r2, r1
 80098f6:	4291      	cmp	r1, r2
 80098f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80098fc:	d100      	bne.n	8009900 <memcpy+0xc>
 80098fe:	4770      	bx	lr
 8009900:	b510      	push	{r4, lr}
 8009902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800990a:	4291      	cmp	r1, r2
 800990c:	d1f9      	bne.n	8009902 <memcpy+0xe>
 800990e:	bd10      	pop	{r4, pc}

08009910 <memset>:
 8009910:	4402      	add	r2, r0
 8009912:	4603      	mov	r3, r0
 8009914:	4293      	cmp	r3, r2
 8009916:	d100      	bne.n	800991a <memset+0xa>
 8009918:	4770      	bx	lr
 800991a:	f803 1b01 	strb.w	r1, [r3], #1
 800991e:	e7f9      	b.n	8009914 <memset+0x4>

08009920 <strcpy>:
 8009920:	4603      	mov	r3, r0
 8009922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009926:	f803 2b01 	strb.w	r2, [r3], #1
 800992a:	2a00      	cmp	r2, #0
 800992c:	d1f9      	bne.n	8009922 <strcpy+0x2>
 800992e:	4770      	bx	lr

08009930 <_init>:
 8009930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009932:	bf00      	nop
 8009934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009936:	bc08      	pop	{r3}
 8009938:	469e      	mov	lr, r3
 800993a:	4770      	bx	lr

0800993c <_fini>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	bf00      	nop
 8009940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009942:	bc08      	pop	{r3}
 8009944:	469e      	mov	lr, r3
 8009946:	4770      	bx	lr
