
3DPetController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002aa8  08009b90  08009b90  00019b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c638  0800c638  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c638  0800c638  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c638  0800c638  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c638  0800c638  0001c638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c63c  0800c63c  0001c63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800c640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003270  2000001c  0800c65c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000328c  0800c65c  0002328c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026071  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ac1  00000000  00000000  000460bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  0004ab80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001968  00000000  00000000  0004c678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000785b  00000000  00000000  0004dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dcbc  00000000  00000000  0005583b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe788  00000000  00000000  000734f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171c7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e4  00000000  00000000  00171cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b78 	.word	0x08009b78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08009b78 	.word	0x08009b78

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <_ZN9RectangleC1Emmmm>:
//--------
class Rectangle
{
	public:
		Rectangle(): _x(0), _y(0), _width(0), _height(0) {}
		Rectangle(uint32_t x, uint32_t y, uint32_t w, uint32_t h): _x(x), _y(y), _width(w), _height(h) {}
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
 80001ec:	603b      	str	r3, [r7, #0]
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	68ba      	ldr	r2, [r7, #8]
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	687a      	ldr	r2, [r7, #4]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	683a      	ldr	r2, [r7, #0]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	69ba      	ldr	r2, [r7, #24]
 8000204:	60da      	str	r2, [r3, #12]
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	4618      	mov	r0, r3
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000218:	f000 fd71 	bl	8000cfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021c:	f000 f842 	bl	80002a4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000220:	f000 f912 	bl	8000448 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000224:	f000 f8f2 	bl	800040c <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8000228:	f000 f89e 	bl	8000368 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800022c:	f004 fe7a 	bl	8004f24 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueMessages */
  queueMessagesHandle = osMessageQueueNew (5, sizeof(Message_TypeDef), &queueMessages_attributes);
 8000230:	4a11      	ldr	r2, [pc, #68]	; (8000278 <main+0x64>)
 8000232:	2108      	movs	r1, #8
 8000234:	2005      	movs	r0, #5
 8000236:	f004 ff6c 	bl	8005112 <osMessageQueueNew>
 800023a:	4603      	mov	r3, r0
 800023c:	4a0f      	ldr	r2, [pc, #60]	; (800027c <main+0x68>)
 800023e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000240:	4a0f      	ldr	r2, [pc, #60]	; (8000280 <main+0x6c>)
 8000242:	2100      	movs	r1, #0
 8000244:	480f      	ldr	r0, [pc, #60]	; (8000284 <main+0x70>)
 8000246:	f004 feb7 	bl	8004fb8 <osThreadNew>
 800024a:	4603      	mov	r3, r0
 800024c:	4a0e      	ldr	r2, [pc, #56]	; (8000288 <main+0x74>)
 800024e:	6013      	str	r3, [r2, #0]

  /* creation of display */
  displayHandle = osThreadNew(StartDisplay, NULL, &display_attributes);
 8000250:	4a0e      	ldr	r2, [pc, #56]	; (800028c <main+0x78>)
 8000252:	2100      	movs	r1, #0
 8000254:	480e      	ldr	r0, [pc, #56]	; (8000290 <main+0x7c>)
 8000256:	f004 feaf 	bl	8004fb8 <osThreadNew>
 800025a:	4603      	mov	r3, r0
 800025c:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <main+0x80>)
 800025e:	6013      	str	r3, [r2, #0]

  /* creation of buttonScan */
  buttonScanHandle = osThreadNew(StartButtonScan, NULL, &buttonScan_attributes);
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <main+0x84>)
 8000262:	2100      	movs	r1, #0
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <main+0x88>)
 8000266:	f004 fea7 	bl	8004fb8 <osThreadNew>
 800026a:	4603      	mov	r3, r0
 800026c:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <main+0x8c>)
 800026e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000270:	f004 fe7c 	bl	8004f6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000274:	e7fe      	b.n	8000274 <main+0x60>
 8000276:	bf00      	nop
 8000278:	08009c98 	.word	0x08009c98
 800027c:	200000d8 	.word	0x200000d8
 8000280:	08009c2c 	.word	0x08009c2c
 8000284:	080004b9 	.word	0x080004b9
 8000288:	200000cc 	.word	0x200000cc
 800028c:	08009c50 	.word	0x08009c50
 8000290:	080004c9 	.word	0x080004c9
 8000294:	200000d0 	.word	0x200000d0
 8000298:	08009c74 	.word	0x08009c74
 800029c:	080006bd 	.word	0x080006bd
 80002a0:	200000d4 	.word	0x200000d4

080002a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b096      	sub	sp, #88	; 0x58
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	2244      	movs	r2, #68	; 0x44
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f009 fc50 	bl	8009b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	463b      	mov	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002ca:	f002 fffb 	bl	80032c4 <HAL_PWREx_ControlVoltageScaling>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	bf14      	ite	ne
 80002d4:	2301      	movne	r3, #1
 80002d6:	2300      	moveq	r3, #0
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80002de:	f000 fb69 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002e2:	2310      	movs	r3, #16
 80002e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002e6:	2301      	movs	r3, #1
 80002e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ee:	2360      	movs	r3, #96	; 0x60
 80002f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002f6:	2301      	movs	r3, #1
 80002f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002fa:	2301      	movs	r3, #1
 80002fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002fe:	2328      	movs	r3, #40	; 0x28
 8000300:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000302:	2307      	movs	r3, #7
 8000304:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000306:	2302      	movs	r3, #2
 8000308:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800030a:	2302      	movs	r3, #2
 800030c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	4618      	mov	r0, r3
 8000314:	f003 f82c 	bl	8003370 <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	bf14      	ite	ne
 800031e:	2301      	movne	r3, #1
 8000320:	2300      	moveq	r3, #0
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000328:	f000 fb44 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2303      	movs	r3, #3
 8000332:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000340:	463b      	mov	r3, r7
 8000342:	2104      	movs	r1, #4
 8000344:	4618      	mov	r0, r3
 8000346:	f003 fbf9 	bl	8003b3c <HAL_RCC_ClockConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	bf14      	ite	ne
 8000350:	2301      	movne	r3, #1
 8000352:	2300      	moveq	r3, #0
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800035a:	f000 fb2b 	bl	80009b4 <Error_Handler>
  }
}
 800035e:	bf00      	nop
 8000360:	3758      	adds	r7, #88	; 0x58
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800036c:	4b24      	ldr	r3, [pc, #144]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 800036e:	4a25      	ldr	r2, [pc, #148]	; (8000404 <_ZL12MX_I2C1_Initv+0x9c>)
 8000370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F33;
 8000372:	4b23      	ldr	r3, [pc, #140]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 8000374:	4a24      	ldr	r2, [pc, #144]	; (8000408 <_ZL12MX_I2C1_Initv+0xa0>)
 8000376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037e:	4b20      	ldr	r3, [pc, #128]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 8000380:	2201      	movs	r2, #1
 8000382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000384:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800038a:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 8000398:	2200      	movs	r2, #0
 800039a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a2:	4817      	ldr	r0, [pc, #92]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 80003a4:	f001 f9ce 	bl	8001744 <HAL_I2C_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	bf14      	ite	ne
 80003ae:	2301      	movne	r3, #1
 80003b0:	2300      	moveq	r3, #0
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80003b8:	f000 fafc 	bl	80009b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003bc:	2100      	movs	r1, #0
 80003be:	4810      	ldr	r0, [pc, #64]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 80003c0:	f002 feba 	bl	8003138 <HAL_I2CEx_ConfigAnalogFilter>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	bf14      	ite	ne
 80003ca:	2301      	movne	r3, #1
 80003cc:	2300      	moveq	r3, #0
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80003d4:	f000 faee 	bl	80009b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003d8:	2100      	movs	r1, #0
 80003da:	4809      	ldr	r0, [pc, #36]	; (8000400 <_ZL12MX_I2C1_Initv+0x98>)
 80003dc:	f002 fef7 	bl	80031ce <HAL_I2CEx_ConfigDigitalFilter>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	bf14      	ite	ne
 80003e6:	2301      	movne	r3, #1
 80003e8:	2300      	moveq	r3, #0
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80003f0:	f000 fae0 	bl	80009b4 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80003f4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80003f8:	f002 ff36 	bl	8003268 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000038 	.word	0x20000038
 8000404:	40005400 	.word	0x40005400
 8000408:	00300f33 	.word	0x00300f33

0800040c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <_ZL11MX_DMA_Initv+0x38>)
 8000414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000416:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <_ZL11MX_DMA_Initv+0x38>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6493      	str	r3, [r2, #72]	; 0x48
 800041e:	4b09      	ldr	r3, [pc, #36]	; (8000444 <_ZL11MX_DMA_Initv+0x38>)
 8000420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	2105      	movs	r1, #5
 800042e:	2010      	movs	r0, #16
 8000430:	f000 fd56 	bl	8000ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000434:	2010      	movs	r0, #16
 8000436:	f000 fd6f 	bl	8000f18 <HAL_NVIC_EnableIRQ>

}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <_ZL12MX_GPIO_Initv+0x68>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4a13      	ldr	r2, [pc, #76]	; (80004b0 <_ZL12MX_GPIO_Initv+0x68>)
 8000464:	f043 0302 	orr.w	r3, r3, #2
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <_ZL12MX_GPIO_Initv+0x68>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0302 	and.w	r3, r3, #2
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <_ZL12MX_GPIO_Initv+0x68>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <_ZL12MX_GPIO_Initv+0x68>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <_ZL12MX_GPIO_Initv+0x68>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : BUTTON_LEFT_Pin BUTTON_RIGHT_Pin BUTTON_DOWN_Pin BUTTON_UP_Pin
                           BUTTON_SELECT_Pin */
  GPIO_InitStruct.Pin = BUTTON_LEFT_Pin|BUTTON_RIGHT_Pin|BUTTON_DOWN_Pin|BUTTON_UP_Pin
 800048e:	f24e 0306 	movw	r3, #57350	; 0xe006
 8000492:	60fb      	str	r3, [r7, #12]
                          |BUTTON_SELECT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000494:	2300      	movs	r3, #0
 8000496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049c:	f107 030c 	add.w	r3, r7, #12
 80004a0:	4619      	mov	r1, r3
 80004a2:	4804      	ldr	r0, [pc, #16]	; (80004b4 <_ZL12MX_GPIO_Initv+0x6c>)
 80004a4:	f000 ff8c 	bl	80013c0 <HAL_GPIO_Init>

}
 80004a8:	bf00      	nop
 80004aa:	3720      	adds	r7, #32
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000400 	.word	0x48000400

080004b8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f004 fe0b 	bl	80050dc <osDelay>
 80004c6:	e7fb      	b.n	80004c0 <_Z16StartDefaultTaskPv+0x8>

080004c8 <_Z12StartDisplayPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplay */
void StartDisplay(void *argument)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b0f0      	sub	sp, #448	; 0x1c0
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDisplay */
	ssd1306_Init(&hi2c1);
 80004d2:	4872      	ldr	r0, [pc, #456]	; (800069c <_Z12StartDisplayPv+0x1d4>)
 80004d4:	f008 fb5e 	bl	8008b94 <_Z12ssd1306_InitP19__I2C_HandleTypeDef>
	Rectangle rectMain(0, 0, SSD1306_WIDTH, SSD1306_HEIGHT);
 80004d8:	f507 70ca 	add.w	r0, r7, #404	; 0x194
 80004dc:	2340      	movs	r3, #64	; 0x40
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	f7ff fe7b 	bl	80001e0 <_ZN9RectangleC1Emmmm>
	Rectangle rectButton(0, 0, SSD1306_WIDTH, 32);
 80004ea:	f507 70c2 	add.w	r0, r7, #388	; 0x184
 80004ee:	2320      	movs	r3, #32
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	2200      	movs	r2, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	f7ff fe72 	bl	80001e0 <_ZN9RectangleC1Emmmm>
	menu::Button buttonHeating("НАГРЕВ", rectButton, FontVerdana_16x16);
 80004fc:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8000500:	f507 70a2 	add.w	r0, r7, #324	; 0x144
 8000504:	2300      	movs	r3, #0
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	4b65      	ldr	r3, [pc, #404]	; (80006a0 <_Z12StartDisplayPv+0x1d8>)
 800050a:	4966      	ldr	r1, [pc, #408]	; (80006a4 <_Z12StartDisplayPv+0x1dc>)
 800050c:	f008 f908 	bl	8008720 <_ZN4menu6ButtonC1EPKcRK9RectangleRK6font_tPFvvE>
	menu::Button buttonMotor("ДВИГАТЕЛЬ", rectButton, FontVerdana_16x16);
 8000510:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8000514:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000518:	2300      	movs	r3, #0
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	4b60      	ldr	r3, [pc, #384]	; (80006a0 <_Z12StartDisplayPv+0x1d8>)
 800051e:	4962      	ldr	r1, [pc, #392]	; (80006a8 <_Z12StartDisplayPv+0x1e0>)
 8000520:	f008 f8fe 	bl	8008720 <_ZN4menu6ButtonC1EPKcRK9RectangleRK6font_tPFvvE>
	menu::CheckBox checkBox1("CheckBox", rectButton, FontVerdana_16x16, ALIGN_LEFT);
 8000524:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8000528:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 800052c:	2301      	movs	r3, #1
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	4b5b      	ldr	r3, [pc, #364]	; (80006a0 <_Z12StartDisplayPv+0x1d8>)
 8000532:	495e      	ldr	r1, [pc, #376]	; (80006ac <_Z12StartDisplayPv+0x1e4>)
 8000534:	f008 f940 	bl	80087b8 <_ZN4menu8CheckBoxC1EPKcRK9RectangleRK6font_t11alignment_t>
	menu::Button buttonItem1("Пункт 1", rectButton, FontVerdana_16x16);
 8000538:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 800053c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8000540:	2300      	movs	r3, #0
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	4b56      	ldr	r3, [pc, #344]	; (80006a0 <_Z12StartDisplayPv+0x1d8>)
 8000546:	495a      	ldr	r1, [pc, #360]	; (80006b0 <_Z12StartDisplayPv+0x1e8>)
 8000548:	f008 f8ea 	bl	8008720 <_ZN4menu6ButtonC1EPKcRK9RectangleRK6font_tPFvvE>
	menu::Button buttonItem2("Пункт 2", rectButton, FontVerdana_16x16);
 800054c:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8000550:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000554:	2300      	movs	r3, #0
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	4b51      	ldr	r3, [pc, #324]	; (80006a0 <_Z12StartDisplayPv+0x1d8>)
 800055a:	4956      	ldr	r1, [pc, #344]	; (80006b4 <_Z12StartDisplayPv+0x1ec>)
 800055c:	f008 f8e0 	bl	8008720 <_ZN4menu6ButtonC1EPKcRK9RectangleRK6font_tPFvvE>
	buttonHeating.is_toggle = buttonMotor.is_toggle = true;
 8000560:	2301      	movs	r3, #1
 8000562:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
 8000566:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 800056a:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
	buttonMotor.focused = true;
 800056e:	2301      	movs	r3, #1
 8000570:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
	menu::Control *controls[] = { &buttonHeating, &buttonMotor, &checkBox1, &buttonItem1, &buttonItem2 };
 8000574:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000578:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000582:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800058c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000596:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80005a4:	611a      	str	r2, [r3, #16]
	menu::Screen screenMain(rectMain, nullptr, nullptr, controls, 5);
 80005a6:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 80005aa:	f107 0010 	add.w	r0, r7, #16
 80005ae:	2305      	movs	r3, #5
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	2200      	movs	r2, #0
 80005bc:	f007 fde4 	bl	8008188 <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh>
	Message_TypeDef message;
	osStatus_t status;
	/* Infinite loop */
	for(;;)
	{
		uint8_t msg_count = osMessageQueueGetCount(queueMessagesHandle);
 80005c0:	4b3d      	ldr	r3, [pc, #244]	; (80006b8 <_Z12StartDisplayPv+0x1f0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f004 fed5 	bl	8005374 <osMessageQueueGetCount>
 80005ca:	4603      	mov	r3, r0
 80005cc:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
		if(msg_count > 0)
 80005d0:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d058      	beq.n	800068a <_Z12StartDisplayPv+0x1c2>
		{
			for(uint8_t i = 0; i < msg_count; i++)
 80005d8:	2300      	movs	r3, #0
 80005da:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 80005de:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 80005e2:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d24f      	bcs.n	800068a <_Z12StartDisplayPv+0x1c2>
			{
				status = osMessageQueueGet(queueMessagesHandle, &message, 0U, 0);
 80005ea:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <_Z12StartDisplayPv+0x1f0>)
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	f107 0108 	add.w	r1, r7, #8
 80005f2:	2300      	movs	r3, #0
 80005f4:	2200      	movs	r2, #0
 80005f6:	f004 fe5f 	bl	80052b8 <osMessageQueueGet>
 80005fa:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
				if(status == osOK)
 80005fe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000602:	2b00      	cmp	r3, #0
 8000604:	d13b      	bne.n	800067e <_Z12StartDisplayPv+0x1b6>
				{
					switch(message.id)
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d136      	bne.n	800067e <_Z12StartDisplayPv+0x1b6>
					{
						case ID_BUTTON:
						{
							uint32_t id_buttons = *((uint32_t*)message.param);
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

							if(id_buttons > 0)
 800061c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d02b      	beq.n	800067c <_Z12StartDisplayPv+0x1b4>
							{
								for(uint8_t bit_pos = 0; bit_pos < 32; bit_pos++)
 8000624:	2300      	movs	r3, #0
 8000626:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 800062a:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 800062e:	2b1f      	cmp	r3, #31
 8000630:	d824      	bhi.n	800067c <_Z12StartDisplayPv+0x1b4>
								{
									uint8_t bit = (1 << bit_pos);
 8000632:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8000636:	2201      	movs	r2, #1
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
									if(id_buttons & bit)
 8000640:	f897 21a7 	ldrb.w	r2, [r7, #423]	; 0x1a7
 8000644:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000648:	4013      	ands	r3, r2
 800064a:	2b00      	cmp	r3, #0
 800064c:	d010      	beq.n	8000670 <_Z12StartDisplayPv+0x1a8>
									{
										screenMain.onClick((menu::key_t)bit);
 800064e:	f897 21a7 	ldrb.w	r2, [r7, #423]	; 0x1a7
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	4611      	mov	r1, r2
 8000658:	4618      	mov	r0, r3
 800065a:	f007 fe91 	bl	8008380 <_ZN4menu6Screen7onClickENS_5key_tE>
										id_buttons &= ~bit;
 800065e:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8000662:	43db      	mvns	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800066a:	4013      	ands	r3, r2
 800066c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
								for(uint8_t bit_pos = 0; bit_pos < 32; bit_pos++)
 8000670:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8000674:	3301      	adds	r3, #1
 8000676:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 800067a:	e7d6      	b.n	800062a <_Z12StartDisplayPv+0x162>
//									if(id_buttons == 0)
//										break;
								}
							}
						}
						break;
 800067c:	bf00      	nop
			for(uint8_t i = 0; i < msg_count; i++)
 800067e:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8000682:	3301      	adds	r3, #1
 8000684:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 8000688:	e7a9      	b.n	80005de <_Z12StartDisplayPv+0x116>
					}
				}
			}
		}

		screenMain.draw();
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4618      	mov	r0, r3
 8000690:	f007 fdcb 	bl	800822a <_ZN4menu6Screen4drawEv>
		osDelay(50);
 8000694:	2032      	movs	r0, #50	; 0x32
 8000696:	f004 fd21 	bl	80050dc <osDelay>
	}
 800069a:	e791      	b.n	80005c0 <_Z12StartDisplayPv+0xf8>
 800069c:	20000038 	.word	0x20000038
 80006a0:	20000014 	.word	0x20000014
 80006a4:	08009bc0 	.word	0x08009bc0
 80006a8:	08009bd0 	.word	0x08009bd0
 80006ac:	08009be4 	.word	0x08009be4
 80006b0:	08009bf0 	.word	0x08009bf0
 80006b4:	08009c00 	.word	0x08009c00
 80006b8:	200000d8 	.word	0x200000d8

080006bc <_Z15StartButtonScanPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonScan */
void StartButtonScan(void *argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b0d8      	sub	sp, #352	; 0x160
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartButtonScan */
	key::key_set_t set_left =
 80006c6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
 80006d6:	615a      	str	r2, [r3, #20]
 80006d8:	4baa      	ldr	r3, [pc, #680]	; (8000984 <_Z15StartButtonScanPv+0x2c8>)
 80006da:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80006de:	2302      	movs	r3, #2
 80006e0:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
 80006e4:	2302      	movs	r3, #2
 80006e6:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
		menu::BUTTON_LEFT,
		GPIO_PIN_RESET,
		key::PRESSED_STATE,
		key::Keyboard::period,
		false
	};
 80006ea:	4ba7      	ldr	r3, [pc, #668]	; (8000988 <_Z15StartButtonScanPv+0x2cc>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	key::key_set_t set_right =
 80006f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
 8000702:	615a      	str	r2, [r3, #20]
 8000704:	4b9f      	ldr	r3, [pc, #636]	; (8000984 <_Z15StartButtonScanPv+0x2c8>)
 8000706:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800070a:	2304      	movs	r3, #4
 800070c:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
 8000710:	2301      	movs	r3, #1
 8000712:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000716:	2302      	movs	r3, #2
 8000718:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		menu::BUTTON_RIGHT,
		GPIO_PIN_RESET,
		key::PRESSED_STATE,
		key::Keyboard::period,
		false
	};
 800071c:	4b9a      	ldr	r3, [pc, #616]	; (8000988 <_Z15StartButtonScanPv+0x2cc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	key::key_set_t set_up =
 8000724:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
 8000734:	615a      	str	r2, [r3, #20]
 8000736:	4b93      	ldr	r3, [pc, #588]	; (8000984 <_Z15StartButtonScanPv+0x2c8>)
 8000738:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800073c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000740:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
 8000744:	2302      	movs	r3, #2
 8000746:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800074a:	2302      	movs	r3, #2
 800074c:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
		menu::BUTTON_UP,
		GPIO_PIN_RESET,
		key::PRESSED_STATE,
		key::Keyboard::period,
		false
	};
 8000750:	4b8d      	ldr	r3, [pc, #564]	; (8000988 <_Z15StartButtonScanPv+0x2cc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	key::key_set_t set_down =
 8000758:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
 8000768:	615a      	str	r2, [r3, #20]
 800076a:	4b86      	ldr	r3, [pc, #536]	; (8000984 <_Z15StartButtonScanPv+0x2c8>)
 800076c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000774:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 8000778:	2304      	movs	r3, #4
 800077a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800077e:	2302      	movs	r3, #2
 8000780:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
		menu::BUTTON_DOWN,
		GPIO_PIN_RESET,
		key::PRESSED_STATE,
		key::Keyboard::period,
		false
	};
 8000784:	4b80      	ldr	r3, [pc, #512]	; (8000988 <_Z15StartButtonScanPv+0x2cc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	key::key_set_t set_select =
 800078c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	4b79      	ldr	r3, [pc, #484]	; (8000984 <_Z15StartButtonScanPv+0x2c8>)
 80007a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80007a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007a8:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 80007ac:	2308      	movs	r3, #8
 80007ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80007b2:	2302      	movs	r3, #2
 80007b4:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
		menu::BUTTON_SELECT,
		GPIO_PIN_RESET,
		key::PRESSED_STATE,
		key::Keyboard::period,
		true
	};
 80007be:	4b72      	ldr	r3, [pc, #456]	; (8000988 <_Z15StartButtonScanPv+0x2cc>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	key::Key button_left(set_left);
 80007c6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80007ca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fb3b 	bl	8007e4c <_ZN3key3KeyC1ERKNS_9key_set_tE>
	key::Key button_right(set_right);
 80007d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80007da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f007 fb33 	bl	8007e4c <_ZN3key3KeyC1ERKNS_9key_set_tE>
	key::Key button_up(set_up);
 80007e6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80007ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f007 fb2b 	bl	8007e4c <_ZN3key3KeyC1ERKNS_9key_set_tE>
	key::Key button_down(set_down);
 80007f6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80007fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f007 fb23 	bl	8007e4c <_ZN3key3KeyC1ERKNS_9key_set_tE>
	key::Key button_select(set_select);
 8000806:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800080a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f007 fb1b 	bl	8007e4c <_ZN3key3KeyC1ERKNS_9key_set_tE>
	key::Key *buttons[] = { &button_left, &button_right, &button_select, &button_up, &button_down };
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000846:	611a      	str	r2, [r3, #16]
	key::Keyboard keyboard(buttons, 5);
 8000848:	f107 0120 	add.w	r1, r7, #32
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	2205      	movs	r2, #5
 8000852:	4618      	mov	r0, r3
 8000854:	f007 fb75 	bl	8007f42 <_ZN3key8KeyboardC1EPPNS_3KeyEj>
	Message_TypeDef message;
	uint32_t active_buttons;
	/* Infinite loop */
	for(;;)
	{
		active_buttons = 0;
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
		keyboard.scan();
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	4618      	mov	r0, r3
 8000866:	f007 fb7f 	bl	8007f68 <_ZN3key8Keyboard4scanEv>
		if(button_left.is_active)
 800086a:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800086e:	2b00      	cmp	r3, #0
 8000870:	d011      	beq.n	8000896 <_Z15StartButtonScanPv+0x1da>
		{
			active_buttons |= button_left.id();
 8000872:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000876:	4618      	mov	r0, r3
 8000878:	f007 fb07 	bl	8007e8a <_ZNK3key3Key2idEv>
 800087c:	4602      	mov	r2, r0
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	431a      	orrs	r2, r3
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	601a      	str	r2, [r3, #0]
			button_left.reset();
 800088c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000890:	4618      	mov	r0, r3
 8000892:	f007 fb2b 	bl	8007eec <_ZN3key3Key5resetEv>
		}
		if(button_right.is_active)
 8000896:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d011      	beq.n	80008c2 <_Z15StartButtonScanPv+0x206>
		{
			active_buttons |= button_right.id();
 800089e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f007 faf1 	bl	8007e8a <_ZNK3key3Key2idEv>
 80008a8:	4602      	mov	r2, r0
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	431a      	orrs	r2, r3
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	601a      	str	r2, [r3, #0]
			button_right.reset();
 80008b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80008bc:	4618      	mov	r0, r3
 80008be:	f007 fb15 	bl	8007eec <_ZN3key3Key5resetEv>
		}
		if(button_up.is_active)
 80008c2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d011      	beq.n	80008ee <_Z15StartButtonScanPv+0x232>
		{
			active_buttons |= button_up.id();
 80008ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008ce:	4618      	mov	r0, r3
 80008d0:	f007 fadb 	bl	8007e8a <_ZNK3key3Key2idEv>
 80008d4:	4602      	mov	r2, r0
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	431a      	orrs	r2, r3
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	601a      	str	r2, [r3, #0]
			button_up.reset();
 80008e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008e8:	4618      	mov	r0, r3
 80008ea:	f007 faff 	bl	8007eec <_ZN3key3Key5resetEv>
		}
		if(button_down.is_active)
 80008ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d011      	beq.n	800091c <_Z15StartButtonScanPv+0x260>
		{
			active_buttons |= button_down.id();
 80008f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008fc:	4618      	mov	r0, r3
 80008fe:	f007 fac4 	bl	8007e8a <_ZNK3key3Key2idEv>
 8000902:	4602      	mov	r2, r0
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	431a      	orrs	r2, r3
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	601a      	str	r2, [r3, #0]
			button_down.reset();
 8000912:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000916:	4618      	mov	r0, r3
 8000918:	f007 fae8 	bl	8007eec <_ZN3key3Key5resetEv>
		}
		if(button_select.is_active)
 800091c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d011      	beq.n	800094a <_Z15StartButtonScanPv+0x28e>
		{
			active_buttons |= button_select.id();
 8000926:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800092a:	4618      	mov	r0, r3
 800092c:	f007 faad 	bl	8007e8a <_ZNK3key3Key2idEv>
 8000930:	4602      	mov	r2, r0
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	431a      	orrs	r2, r3
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	601a      	str	r2, [r3, #0]
			button_select.reset();
 8000940:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000944:	4618      	mov	r0, r3
 8000946:	f007 fad1 	bl	8007eec <_ZN3key3Key5resetEv>
		}

		if(active_buttons != 0)
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d010      	beq.n	8000976 <_Z15StartButtonScanPv+0x2ba>
		{
			message.id = ID_BUTTON;
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
			message.param = (void*)&active_buttons;
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	f107 020c 	add.w	r2, r7, #12
 8000964:	605a      	str	r2, [r3, #4]
			osMessageQueuePut(queueMessagesHandle, &message, 0U, 0);
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <_Z15StartButtonScanPv+0x2d0>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	f107 0110 	add.w	r1, r7, #16
 800096e:	2300      	movs	r3, #0
 8000970:	2200      	movs	r2, #0
 8000972:	f004 fc41 	bl	80051f8 <osMessageQueuePut>
		}

		osDelay(keyboard.period);
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <_Z15StartButtonScanPv+0x2cc>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f004 fbae 	bl	80050dc <osDelay>
		active_buttons = 0;
 8000980:	e76a      	b.n	8000858 <_Z15StartButtonScanPv+0x19c>
 8000982:	bf00      	nop
 8000984:	48000400 	.word	0x48000400
 8000988:	20000010 	.word	0x20000010
 800098c:	200000d8 	.word	0x200000d8

08000990 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d101      	bne.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009a2:	f000 f9c5 	bl	8000d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40014800 	.word	0x40014800

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_MspInit+0x4c>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6613      	str	r3, [r2, #96]	; 0x60
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	210f      	movs	r1, #15
 80009fa:	f06f 0001 	mvn.w	r0, #1
 80009fe:	f000 fa6f 	bl	8000ee0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0ac      	sub	sp, #176	; 0xb0
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2288      	movs	r2, #136	; 0x88
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f009 f891 	bl	8009b58 <memset>
  if(hi2c->Instance==I2C1)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a39      	ldr	r2, [pc, #228]	; (8000b20 <HAL_I2C_MspInit+0x110>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d16b      	bne.n	8000b18 <HAL_I2C_MspInit+0x108>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a40:	2340      	movs	r3, #64	; 0x40
 8000a42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 fa97 	bl	8003f80 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a58:	f7ff ffac 	bl	80009b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <HAL_I2C_MspInit+0x114>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a60:	4a30      	ldr	r2, [pc, #192]	; (8000b24 <HAL_I2C_MspInit+0x114>)
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a68:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <HAL_I2C_MspInit+0x114>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a74:	23c0      	movs	r3, #192	; 0xc0
 8000a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7a:	2312      	movs	r3, #18
 8000a7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a96:	4619      	mov	r1, r3
 8000a98:	4823      	ldr	r0, [pc, #140]	; (8000b28 <HAL_I2C_MspInit+0x118>)
 8000a9a:	f000 fc91 	bl	80013c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <HAL_I2C_MspInit+0x114>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	4a20      	ldr	r2, [pc, #128]	; (8000b24 <HAL_I2C_MspInit+0x114>)
 8000aa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <HAL_I2C_MspInit+0x114>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <HAL_I2C_MspInit+0x11c>)
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <HAL_I2C_MspInit+0x120>)
 8000aba:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <HAL_I2C_MspInit+0x11c>)
 8000abe:	2203      	movs	r2, #3
 8000ac0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_I2C_MspInit+0x11c>)
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_I2C_MspInit+0x11c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_I2C_MspInit+0x11c>)
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_I2C_MspInit+0x11c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_I2C_MspInit+0x11c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_I2C_MspInit+0x11c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_I2C_MspInit+0x11c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000aec:	480f      	ldr	r0, [pc, #60]	; (8000b2c <HAL_I2C_MspInit+0x11c>)
 8000aee:	f000 fa21 	bl	8000f34 <HAL_DMA_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <HAL_I2C_MspInit+0xec>
    {
      Error_Handler();
 8000af8:	f7ff ff5c 	bl	80009b4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <HAL_I2C_MspInit+0x11c>)
 8000b00:	639a      	str	r2, [r3, #56]	; 0x38
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_I2C_MspInit+0x11c>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2105      	movs	r1, #5
 8000b0c:	201f      	movs	r0, #31
 8000b0e:	f000 f9e7 	bl	8000ee0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b12:	201f      	movs	r0, #31
 8000b14:	f000 fa00 	bl	8000f18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	37b0      	adds	r7, #176	; 0xb0
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40005400 	.word	0x40005400
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	20000084 	.word	0x20000084
 8000b30:	4002006c 	.word	0x4002006c

08000b34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	201a      	movs	r0, #26
 8000b4a:	f000 f9c9 	bl	8000ee0 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000b4e:	201a      	movs	r0, #26
 8000b50:	f000 f9e2 	bl	8000f18 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <HAL_InitTick+0x9c>)
 8000b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b58:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <HAL_InitTick+0x9c>)
 8000b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b5e:	6613      	str	r3, [r2, #96]	; 0x60
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <HAL_InitTick+0x9c>)
 8000b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b6c:	f107 0210 	add.w	r2, r7, #16
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 f970 	bl	8003e5c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b7c:	f003 f958 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8000b80:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <HAL_InitTick+0xa0>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	0c9b      	lsrs	r3, r3, #18
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_InitTick+0xa4>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <HAL_InitTick+0xa8>)
 8000b94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_InitTick+0xa4>)
 8000b98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b9c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <HAL_InitTick+0xa4>)
 8000ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba2:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <HAL_InitTick+0xa4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_InitTick+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <HAL_InitTick+0xa4>)
 8000bb2:	f003 fea1 	bl	80048f8 <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d104      	bne.n	8000bc6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000bbc:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <HAL_InitTick+0xa4>)
 8000bbe:	f003 fefd 	bl	80049bc <HAL_TIM_Base_Start_IT>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	431bde83 	.word	0x431bde83
 8000bd8:	200031fc 	.word	0x200031fc
 8000bdc:	40014800 	.word	0x40014800

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler+0x4>

08000bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <DMA1_Channel6_IRQHandler+0x10>)
 8000c12:	f000 fae8 	bl	80011e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000084 	.word	0x20000084

08000c20 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000c26:	f003 ff39 	bl	8004a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200031fc 	.word	0x200031fc

08000c34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <I2C1_EV_IRQHandler+0x10>)
 8000c3a:	f001 f810 	bl	8001c5e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000038 	.word	0x20000038

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <SystemInit+0x5c>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <SystemInit+0x5c>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <SystemInit+0x60>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <SystemInit+0x60>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <SystemInit+0x60>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <SystemInit+0x60>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <SystemInit+0x60>)
 8000c74:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c78:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <SystemInit+0x60>)
 8000c80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <SystemInit+0x60>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <SystemInit+0x60>)
 8000c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <SystemInit+0x60>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00
 8000ca8:	40021000 	.word	0x40021000

08000cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb0:	f7ff ffca 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cb6:	e003      	b.n	8000cc0 <LoopCopyDataInit>

08000cb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cbe:	3104      	adds	r1, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cc0:	480a      	ldr	r0, [pc, #40]	; (8000cec <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cc8:	d3f6      	bcc.n	8000cb8 <CopyDataInit>
	ldr	r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ccc:	e002      	b.n	8000cd4 <LoopFillZerobss>

08000cce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cd0:	f842 3b04 	str.w	r3, [r2], #4

08000cd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <LoopForever+0x16>)
	cmp	r2, r3
 8000cd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cd8:	d3f9      	bcc.n	8000cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cda:	f008 ff0b 	bl	8009af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cde:	f7ff fa99 	bl	8000214 <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ce8:	0800c640 	.word	0x0800c640
	ldr	r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cf0:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8000cf4:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8000cf8:	2000328c 	.word	0x2000328c

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>

08000cfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 f8de 	bl	8000eca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d0e:	200f      	movs	r0, #15
 8000d10:	f7ff ff10 	bl	8000b34 <HAL_InitTick>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	e001      	b.n	8000d24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d20:	f7ff fe4e 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d24:	79fb      	ldrb	r3, [r7, #7]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20003248 	.word	0x20003248

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20003248 	.word	0x20003248

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff4c 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef2:	f7ff ff61 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000ef6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	6978      	ldr	r0, [r7, #20]
 8000efe:	f7ff ffb1 	bl	8000e64 <NVIC_EncodePriority>
 8000f02:	4602      	mov	r2, r0
 8000f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff80 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff54 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e098      	b.n	8001078 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <HAL_DMA_Init+0x150>)
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d80f      	bhi.n	8000f72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b4b      	ldr	r3, [pc, #300]	; (8001088 <HAL_DMA_Init+0x154>)
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a4b      	ldr	r2, [pc, #300]	; (800108c <HAL_DMA_Init+0x158>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	091b      	lsrs	r3, r3, #4
 8000f64:	009a      	lsls	r2, r3, #2
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a48      	ldr	r2, [pc, #288]	; (8001090 <HAL_DMA_Init+0x15c>)
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f70:	e00e      	b.n	8000f90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b46      	ldr	r3, [pc, #280]	; (8001094 <HAL_DMA_Init+0x160>)
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a43      	ldr	r2, [pc, #268]	; (800108c <HAL_DMA_Init+0x158>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	009a      	lsls	r2, r3, #2
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a42      	ldr	r2, [pc, #264]	; (8001098 <HAL_DMA_Init+0x164>)
 8000f8e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2202      	movs	r2, #2
 8000f94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000faa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fea:	d039      	beq.n	8001060 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a27      	ldr	r2, [pc, #156]	; (8001090 <HAL_DMA_Init+0x15c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d11a      	bne.n	800102c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ff6:	4b29      	ldr	r3, [pc, #164]	; (800109c <HAL_DMA_Init+0x168>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f003 031c 	and.w	r3, r3, #28
 8001002:	210f      	movs	r1, #15
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	4924      	ldr	r1, [pc, #144]	; (800109c <HAL_DMA_Init+0x168>)
 800100c:	4013      	ands	r3, r2
 800100e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <HAL_DMA_Init+0x168>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6859      	ldr	r1, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101c:	f003 031c 	and.w	r3, r3, #28
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	491d      	ldr	r1, [pc, #116]	; (800109c <HAL_DMA_Init+0x168>)
 8001026:	4313      	orrs	r3, r2
 8001028:	600b      	str	r3, [r1, #0]
 800102a:	e019      	b.n	8001060 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_DMA_Init+0x16c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001034:	f003 031c 	and.w	r3, r3, #28
 8001038:	210f      	movs	r1, #15
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	4917      	ldr	r1, [pc, #92]	; (80010a0 <HAL_DMA_Init+0x16c>)
 8001042:	4013      	ands	r3, r2
 8001044:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_DMA_Init+0x16c>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6859      	ldr	r1, [r3, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f003 031c 	and.w	r3, r3, #28
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	4911      	ldr	r1, [pc, #68]	; (80010a0 <HAL_DMA_Init+0x16c>)
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	40020407 	.word	0x40020407
 8001088:	bffdfff8 	.word	0xbffdfff8
 800108c:	cccccccd 	.word	0xcccccccd
 8001090:	40020000 	.word	0x40020000
 8001094:	bffdfbf8 	.word	0xbffdfbf8
 8001098:	40020400 	.word	0x40020400
 800109c:	400200a8 	.word	0x400200a8
 80010a0:	400204a8 	.word	0x400204a8

080010a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d101      	bne.n	80010c4 <HAL_DMA_Start_IT+0x20>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e04b      	b.n	800115c <HAL_DMA_Start_IT+0xb8>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d13a      	bne.n	800114e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2202      	movs	r2, #2
 80010dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0201 	bic.w	r2, r2, #1
 80010f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 f92f 	bl	8001360 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	2b00      	cmp	r3, #0
 8001108:	d008      	beq.n	800111c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 020e 	orr.w	r2, r2, #14
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e00f      	b.n	800113c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0204 	bic.w	r2, r2, #4
 800112a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 020a 	orr.w	r2, r2, #10
 800113a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0201 	orr.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e005      	b.n	800115a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001156:	2302      	movs	r3, #2
 8001158:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800115a:	7dfb      	ldrb	r3, [r7, #23]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d005      	beq.n	8001188 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2204      	movs	r2, #4
 8001180:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	e029      	b.n	80011dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 020e 	bic.w	r2, r2, #14
 8001196:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0201 	bic.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	f003 021c 	and.w	r2, r3, #28
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	4798      	blx	r3
    }
  }
  return status;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f003 031c 	and.w	r3, r3, #28
 8001206:	2204      	movs	r2, #4
 8001208:	409a      	lsls	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d026      	beq.n	8001260 <HAL_DMA_IRQHandler+0x7a>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d021      	beq.n	8001260 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	2b00      	cmp	r3, #0
 8001228:	d107      	bne.n	800123a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0204 	bic.w	r2, r2, #4
 8001238:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f003 021c 	and.w	r2, r3, #28
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	2104      	movs	r1, #4
 8001248:	fa01 f202 	lsl.w	r2, r1, r2
 800124c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	2b00      	cmp	r3, #0
 8001254:	d071      	beq.n	800133a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800125e:	e06c      	b.n	800133a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	f003 031c 	and.w	r3, r3, #28
 8001268:	2202      	movs	r2, #2
 800126a:	409a      	lsls	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d02e      	beq.n	80012d2 <HAL_DMA_IRQHandler+0xec>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d029      	beq.n	80012d2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10b      	bne.n	80012a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 020a 	bic.w	r2, r2, #10
 800129a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a8:	f003 021c 	and.w	r2, r3, #28
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	2102      	movs	r1, #2
 80012b2:	fa01 f202 	lsl.w	r2, r1, r2
 80012b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d038      	beq.n	800133a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80012d0:	e033      	b.n	800133a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f003 031c 	and.w	r3, r3, #28
 80012da:	2208      	movs	r2, #8
 80012dc:	409a      	lsls	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d02a      	beq.n	800133c <HAL_DMA_IRQHandler+0x156>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d025      	beq.n	800133c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 020e 	bic.w	r2, r2, #14
 80012fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001304:	f003 021c 	and.w	r2, r3, #28
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	2101      	movs	r1, #1
 800130e:	fa01 f202 	lsl.w	r2, r1, r2
 8001312:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132e:	2b00      	cmp	r3, #0
 8001330:	d004      	beq.n	800133c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800133a:	bf00      	nop
 800133c:	bf00      	nop
}
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001352:	b2db      	uxtb	r3, r3
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f003 021c 	and.w	r2, r3, #28
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	2101      	movs	r1, #1
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d108      	bne.n	80013a4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013a2:	e007      	b.n	80013b4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e17f      	b.n	80016d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8171 	beq.w	80016ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d00b      	beq.n	8001408 <HAL_GPIO_Init+0x48>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d007      	beq.n	8001408 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b12      	cmp	r3, #18
 8001406:	d130      	bne.n	800146a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800143e:	2201      	movs	r2, #1
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f003 0201 	and.w	r2, r3, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b03      	cmp	r3, #3
 8001474:	d118      	bne.n	80014a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	08db      	lsrs	r3, r3, #3
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x128>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b12      	cmp	r3, #18
 80014e6:	d123      	bne.n	8001530 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	08da      	lsrs	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3208      	adds	r2, #8
 80014f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	08da      	lsrs	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3208      	adds	r2, #8
 800152a:	6939      	ldr	r1, [r7, #16]
 800152c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0203 	and.w	r2, r3, #3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80ac 	beq.w	80016ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b5f      	ldr	r3, [pc, #380]	; (80016f0 <HAL_GPIO_Init+0x330>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001576:	4a5e      	ldr	r2, [pc, #376]	; (80016f0 <HAL_GPIO_Init+0x330>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6613      	str	r3, [r2, #96]	; 0x60
 800157e:	4b5c      	ldr	r3, [pc, #368]	; (80016f0 <HAL_GPIO_Init+0x330>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800158a:	4a5a      	ldr	r2, [pc, #360]	; (80016f4 <HAL_GPIO_Init+0x334>)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015b4:	d025      	beq.n	8001602 <HAL_GPIO_Init+0x242>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4f      	ldr	r2, [pc, #316]	; (80016f8 <HAL_GPIO_Init+0x338>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d01f      	beq.n	80015fe <HAL_GPIO_Init+0x23e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4e      	ldr	r2, [pc, #312]	; (80016fc <HAL_GPIO_Init+0x33c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d019      	beq.n	80015fa <HAL_GPIO_Init+0x23a>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4d      	ldr	r2, [pc, #308]	; (8001700 <HAL_GPIO_Init+0x340>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0x236>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4c      	ldr	r2, [pc, #304]	; (8001704 <HAL_GPIO_Init+0x344>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00d      	beq.n	80015f2 <HAL_GPIO_Init+0x232>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4b      	ldr	r2, [pc, #300]	; (8001708 <HAL_GPIO_Init+0x348>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x22e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4a      	ldr	r2, [pc, #296]	; (800170c <HAL_GPIO_Init+0x34c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_GPIO_Init+0x22a>
 80015e6:	2306      	movs	r3, #6
 80015e8:	e00c      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015ea:	2307      	movs	r3, #7
 80015ec:	e00a      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e008      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e004      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_GPIO_Init+0x244>
 8001602:	2300      	movs	r3, #0
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	f002 0203 	and.w	r2, r2, #3
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	4093      	lsls	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001614:	4937      	ldr	r1, [pc, #220]	; (80016f4 <HAL_GPIO_Init+0x334>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <HAL_GPIO_Init+0x350>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001646:	4a32      	ldr	r2, [pc, #200]	; (8001710 <HAL_GPIO_Init+0x350>)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800164c:	4b30      	ldr	r3, [pc, #192]	; (8001710 <HAL_GPIO_Init+0x350>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001670:	4a27      	ldr	r2, [pc, #156]	; (8001710 <HAL_GPIO_Init+0x350>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_GPIO_Init+0x350>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800169a:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <HAL_GPIO_Init+0x350>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_GPIO_Init+0x350>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016c4:	4a12      	ldr	r2, [pc, #72]	; (8001710 <HAL_GPIO_Init+0x350>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa22 f303 	lsr.w	r3, r2, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f47f ae78 	bne.w	80013d0 <HAL_GPIO_Init+0x10>
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010000 	.word	0x40010000
 80016f8:	48000400 	.word	0x48000400
 80016fc:	48000800 	.word	0x48000800
 8001700:	48000c00 	.word	0x48000c00
 8001704:	48001000 	.word	0x48001000
 8001708:	48001400 	.word	0x48001400
 800170c:	48001800 	.word	0x48001800
 8001710:	40010400 	.word	0x40010400

08001714 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	887b      	ldrh	r3, [r7, #2]
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	e001      	b.n	8001736 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001736:	7bfb      	ldrb	r3, [r7, #15]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e081      	b.n	800185a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d106      	bne.n	8001770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff f950 	bl	8000a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2224      	movs	r2, #36	; 0x24
 8001774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0201 	bic.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001794:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	e006      	b.n	80017cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d104      	bne.n	80017de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001800:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	ea42 0103 	orr.w	r1, r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	021a      	lsls	r2, r3, #8
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69d9      	ldr	r1, [r3, #28]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1a      	ldr	r2, [r3, #32]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4603      	mov	r3, r0
 8001874:	817b      	strh	r3, [r7, #10]
 8001876:	460b      	mov	r3, r1
 8001878:	813b      	strh	r3, [r7, #8]
 800187a:	4613      	mov	r3, r2
 800187c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b20      	cmp	r3, #32
 8001888:	f040 80d5 	bne.w	8001a36 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 800188c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_I2C_Mem_Write_DMA+0x34>
 8001892:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0c9      	b.n	8001a38 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018b2:	d101      	bne.n	80018b8 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 80018b4:	2302      	movs	r3, #2
 80018b6:	e0bf      	b.n	8001a38 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_I2C_Mem_Write_DMA+0x62>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e0b8      	b.n	8001a38 <HAL_I2C_Mem_Write_DMA+0x1d4>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018ce:	f7ff fa43 	bl	8000d58 <HAL_GetTick>
 80018d2:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2221      	movs	r2, #33	; 0x21
 80018d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2240      	movs	r2, #64	; 0x40
 80018e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80018f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a51      	ldr	r2, [pc, #324]	; (8001a40 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4a51      	ldr	r2, [pc, #324]	; (8001a44 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8001900:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001906:	b29b      	uxth	r3, r3
 8001908:	2bff      	cmp	r3, #255	; 0xff
 800190a:	d906      	bls.n	800191a <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	22ff      	movs	r2, #255	; 0xff
 8001910:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001912:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	e007      	b.n	800192a <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001928:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800192a:	88f8      	ldrh	r0, [r7, #6]
 800192c:	893a      	ldrh	r2, [r7, #8]
 800192e:	8979      	ldrh	r1, [r7, #10]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2319      	movs	r3, #25
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	4603      	mov	r3, r0
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f000 fcec 	bl	8002318 <I2C_RequestMemoryWrite>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e072      	b.n	8001a38 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001956:	2b00      	cmp	r3, #0
 8001958:	d020      	beq.n	800199c <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195e:	4a3a      	ldr	r2, [pc, #232]	; (8001a48 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8001960:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001966:	4a39      	ldr	r2, [pc, #228]	; (8001a4c <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8001968:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196e:	2200      	movs	r2, #0
 8001970:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001976:	2200      	movs	r2, #0
 8001978:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800197e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3328      	adds	r3, #40	; 0x28
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198c:	f7ff fb8a 	bl	80010a4 <HAL_DMA_Start_IT>
 8001990:	4603      	mov	r3, r0
 8001992:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d139      	bne.n	8001a0e <HAL_I2C_Mem_Write_DMA+0x1aa>
 800199a:	e013      	b.n	80019c4 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e039      	b.n	8001a38 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	8979      	ldrh	r1, [r7, #10]
 80019cc:	2300      	movs	r3, #0
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f001 fac0 	bl	8002f58 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80019f2:	2110      	movs	r1, #16
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f001 fadd 	bl	8002fb4 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a08:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e014      	b.n	8001a38 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2220      	movs	r2, #32
 8001a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f043 0210 	orr.w	r2, r3, #16
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8001a36:	2302      	movs	r3, #2
  }
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	ffff0000 	.word	0xffff0000
 8001a44:	08001f71 	.word	0x08001f71
 8001a48:	08002c8b 	.word	0x08002c8b
 8001a4c:	08002d21 	.word	0x08002d21

08001a50 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b20      	cmp	r3, #32
 8001a6e:	f040 80f1 	bne.w	8001c54 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a80:	d101      	bne.n	8001a86 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001a82:	2302      	movs	r3, #2
 8001a84:	e0e7      	b.n	8001c56 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_I2C_IsDeviceReady+0x44>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e0e0      	b.n	8001c56 <HAL_I2C_IsDeviceReady+0x206>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2224      	movs	r2, #36	; 0x24
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d107      	bne.n	8001ac2 <HAL_I2C_IsDeviceReady+0x72>
 8001ab2:	897b      	ldrh	r3, [r7, #10]
 8001ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ab8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001abc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ac0:	e004      	b.n	8001acc <HAL_I2C_IsDeviceReady+0x7c>
 8001ac2:	897b      	ldrh	r3, [r7, #10]
 8001ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f941 	bl	8000d58 <HAL_GetTick>
 8001ad6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0320 	and.w	r3, r3, #32
 8001ae2:	2b20      	cmp	r3, #32
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	2300      	movne	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	2b10      	cmp	r3, #16
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b04:	e034      	b.n	8001b70 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d01a      	beq.n	8001b44 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b0e:	f7ff f923 	bl	8000d58 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d302      	bcc.n	8001b24 <HAL_I2C_IsDeviceReady+0xd4>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10f      	bne.n	8001b44 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	f043 0220 	orr.w	r2, r3, #32
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e088      	b.n	8001c56 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	2b20      	cmp	r3, #32
 8001b50:	bf0c      	ite	eq
 8001b52:	2301      	moveq	r3, #1
 8001b54:	2300      	movne	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b70:	7ffb      	ldrb	r3, [r7, #31]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <HAL_I2C_IsDeviceReady+0x12c>
 8001b76:	7fbb      	ldrb	r3, [r7, #30]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0c4      	beq.n	8001b06 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d01a      	beq.n	8001bc0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2200      	movs	r2, #0
 8001b92:	2120      	movs	r1, #32
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f001 f8f8 	bl	8002d8a <I2C_WaitOnFlagUntilTimeout>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e058      	b.n	8001c56 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e04a      	b.n	8001c56 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2120      	movs	r1, #32
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f001 f8dd 	bl	8002d8a <I2C_WaitOnFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e03d      	b.n	8001c56 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2210      	movs	r2, #16
 8001be0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2220      	movs	r2, #32
 8001be8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d118      	bne.n	8001c24 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c00:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f001 f8bc 	bl	8002d8a <I2C_WaitOnFlagUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e01c      	b.n	8001c56 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2220      	movs	r2, #32
 8001c22:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3301      	adds	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	f63f af3b 	bhi.w	8001aaa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	f043 0220 	orr.w	r2, r3, #32
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001c54:	2302      	movs	r3, #2
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	68f9      	ldr	r1, [r7, #12]
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	4798      	blx	r3
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	70fb      	strb	r3, [r7, #3]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d5c:	b2db      	uxtb	r3, r3
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <I2C_Slave_ISR_IT+0x24>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e0ec      	b.n	8001f68 <I2C_Slave_ISR_IT+0x1fe>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <I2C_Slave_ISR_IT+0x4c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001dae:	6939      	ldr	r1, [r7, #16]
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fcef 	bl	8002794 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d04d      	beq.n	8001e5e <I2C_Slave_ISR_IT+0xf4>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d047      	beq.n	8001e5e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d128      	bne.n	8001e2a <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b28      	cmp	r3, #40	; 0x28
 8001de2:	d108      	bne.n	8001df6 <I2C_Slave_ISR_IT+0x8c>
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dea:	d104      	bne.n	8001df6 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001dec:	6939      	ldr	r1, [r7, #16]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fdda 	bl	80029a8 <I2C_ITListenCplt>
 8001df4:	e032      	b.n	8001e5c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b29      	cmp	r3, #41	; 0x29
 8001e00:	d10e      	bne.n	8001e20 <I2C_Slave_ISR_IT+0xb6>
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e08:	d00a      	beq.n	8001e20 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2210      	movs	r2, #16
 8001e10:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 ff15 	bl	8002c42 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fb92 	bl	8002542 <I2C_ITSlaveSeqCplt>
 8001e1e:	e01d      	b.n	8001e5c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2210      	movs	r2, #16
 8001e26:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001e28:	e096      	b.n	8001f58 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2210      	movs	r2, #16
 8001e30:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f043 0204 	orr.w	r2, r3, #4
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d004      	beq.n	8001e4e <I2C_Slave_ISR_IT+0xe4>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4a:	f040 8085 	bne.w	8001f58 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	4619      	mov	r1, r3
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 fdfd 	bl	8002a54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001e5a:	e07d      	b.n	8001f58 <I2C_Slave_ISR_IT+0x1ee>
 8001e5c:	e07c      	b.n	8001f58 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d030      	beq.n	8001ecc <I2C_Slave_ISR_IT+0x162>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d02a      	beq.n	8001ecc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d018      	beq.n	8001eb2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d14f      	bne.n	8001f5c <I2C_Slave_ISR_IT+0x1f2>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ec2:	d04b      	beq.n	8001f5c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 fb3c 	bl	8002542 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001eca:	e047      	b.n	8001f5c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	08db      	lsrs	r3, r3, #3
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	08db      	lsrs	r3, r3, #3
 8001edc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d004      	beq.n	8001eee <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001ee4:	6939      	ldr	r1, [r7, #16]
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fa6a 	bl	80023c0 <I2C_ITAddrCplt>
 8001eec:	e037      	b.n	8001f5e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d031      	beq.n	8001f5e <I2C_Slave_ISR_IT+0x1f4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	085b      	lsrs	r3, r3, #1
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d02b      	beq.n	8001f5e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d018      	beq.n	8001f42 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	851a      	strh	r2, [r3, #40]	; 0x28
 8001f40:	e00d      	b.n	8001f5e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f48:	d002      	beq.n	8001f50 <I2C_Slave_ISR_IT+0x1e6>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d106      	bne.n	8001f5e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 faf6 	bl	8002542 <I2C_ITSlaveSeqCplt>
 8001f56:	e002      	b.n	8001f5e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001f58:	bf00      	nop
 8001f5a:	e000      	b.n	8001f5e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001f5c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <I2C_Master_ISR_DMA+0x1a>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e0e1      	b.n	800214e <I2C_Master_ISR_DMA+0x1de>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d017      	beq.n	8001fce <I2C_Master_ISR_DMA+0x5e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d011      	beq.n	8001fce <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2210      	movs	r2, #16
 8001fb0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f043 0204 	orr.w	r2, r3, #4
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001fbe:	2120      	movs	r1, #32
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 fff7 	bl	8002fb4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 fe3b 	bl	8002c42 <I2C_Flush_TXDR>
 8001fcc:	e0ba      	b.n	8002144 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	09db      	lsrs	r3, r3, #7
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d072      	beq.n	80020c0 <I2C_Master_ISR_DMA+0x150>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	099b      	lsrs	r3, r3, #6
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d06c      	beq.n	80020c0 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ff4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d04e      	beq.n	800209e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	b29b      	uxth	r3, r3
 8002008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	2bff      	cmp	r3, #255	; 0xff
 8002016:	d906      	bls.n	8002026 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800201e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	e010      	b.n	8002048 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002038:	d003      	beq.n	8002042 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	e002      	b.n	8002048 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002046:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204c:	b2da      	uxtb	r2, r3
 800204e:	8a79      	ldrh	r1, [r7, #18]
 8002050:	2300      	movs	r3, #0
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 ff7e 	bl	8002f58 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b22      	cmp	r3, #34	; 0x22
 8002078:	d108      	bne.n	800208c <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002088:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800208a:	e05b      	b.n	8002144 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800209a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800209c:	e052      	b.n	8002144 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020ac:	d003      	beq.n	80020b6 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 fa0a 	bl	80024c8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80020b4:	e046      	b.n	8002144 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80020b6:	2140      	movs	r1, #64	; 0x40
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fccb 	bl	8002a54 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80020be:	e041      	b.n	8002144 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	099b      	lsrs	r3, r3, #6
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d029      	beq.n	8002120 <I2C_Master_ISR_DMA+0x1b0>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	099b      	lsrs	r3, r3, #6
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d023      	beq.n	8002120 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d119      	bne.n	8002116 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020f0:	d027      	beq.n	8002142 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020fa:	d108      	bne.n	800210e <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800210a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800210c:	e019      	b.n	8002142 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f9da 	bl	80024c8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002114:	e015      	b.n	8002142 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002116:	2140      	movs	r1, #64	; 0x40
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fc9b 	bl	8002a54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800211e:	e010      	b.n	8002142 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00b      	beq.n	8002144 <I2C_Master_ISR_DMA+0x1d4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 fa60 	bl	8002600 <I2C_ITMasterCplt>
 8002140:	e000      	b.n	8002144 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002142:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b088      	sub	sp, #32
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <I2C_Slave_ISR_DMA+0x24>
 8002176:	2302      	movs	r3, #2
 8002178:	e0c9      	b.n	800230e <I2C_Slave_ISR_DMA+0x1b8>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	095b      	lsrs	r3, r3, #5
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <I2C_Slave_ISR_DMA+0x4c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 faf9 	bl	8002794 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 809a 	beq.w	80022e4 <I2C_Slave_ISR_DMA+0x18e>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 8093 	beq.w	80022e4 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0b9b      	lsrs	r3, r3, #14
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0bdb      	lsrs	r3, r3, #15
 80021ce:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d07f      	beq.n	80022d6 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0bdb      	lsrs	r3, r3, #15
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	0b9b      	lsrs	r3, r3, #14
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800221a:	2301      	movs	r3, #1
 800221c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d128      	bne.n	8002276 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b28      	cmp	r3, #40	; 0x28
 800222e:	d108      	bne.n	8002242 <I2C_Slave_ISR_DMA+0xec>
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002236:	d104      	bne.n	8002242 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fbb4 	bl	80029a8 <I2C_ITListenCplt>
 8002240:	e048      	b.n	80022d4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b29      	cmp	r3, #41	; 0x29
 800224c:	d10e      	bne.n	800226c <I2C_Slave_ISR_DMA+0x116>
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002254:	d00a      	beq.n	800226c <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2210      	movs	r2, #16
 800225c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fcef 	bl	8002c42 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f96c 	bl	8002542 <I2C_ITSlaveSeqCplt>
 800226a:	e033      	b.n	80022d4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2210      	movs	r2, #16
 8002272:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002274:	e034      	b.n	80022e0 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2210      	movs	r2, #16
 800227c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	f043 0204 	orr.w	r2, r3, #4
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002290:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <I2C_Slave_ISR_DMA+0x14a>
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800229e:	d11f      	bne.n	80022e0 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	2b21      	cmp	r3, #33	; 0x21
 80022a4:	d002      	beq.n	80022ac <I2C_Slave_ISR_DMA+0x156>
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
 80022a8:	2b29      	cmp	r3, #41	; 0x29
 80022aa:	d103      	bne.n	80022b4 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2221      	movs	r2, #33	; 0x21
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
 80022b2:	e008      	b.n	80022c6 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80022b4:	7dfb      	ldrb	r3, [r7, #23]
 80022b6:	2b22      	cmp	r3, #34	; 0x22
 80022b8:	d002      	beq.n	80022c0 <I2C_Slave_ISR_DMA+0x16a>
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
 80022bc:	2b2a      	cmp	r3, #42	; 0x2a
 80022be:	d102      	bne.n	80022c6 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2222      	movs	r2, #34	; 0x22
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4619      	mov	r1, r3
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 fbc1 	bl	8002a54 <I2C_ITError>
      if (treatdmanack == 1U)
 80022d2:	e005      	b.n	80022e0 <I2C_Slave_ISR_DMA+0x18a>
 80022d4:	e004      	b.n	80022e0 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2210      	movs	r2, #16
 80022dc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80022de:	e011      	b.n	8002304 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80022e0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80022e2:	e00f      	b.n	8002304 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	08db      	lsrs	r3, r3, #3
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d009      	beq.n	8002304 <I2C_Slave_ISR_DMA+0x1ae>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	08db      	lsrs	r3, r3, #3
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f85e 	bl	80023c0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4603      	mov	r3, r0
 8002328:	817b      	strh	r3, [r7, #10]
 800232a:	460b      	mov	r3, r1
 800232c:	813b      	strh	r3, [r7, #8]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	8979      	ldrh	r1, [r7, #10]
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <I2C_RequestMemoryWrite+0xa4>)
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fe09 	bl	8002f58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	69b9      	ldr	r1, [r7, #24]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fd5d 	bl	8002e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e02c      	b.n	80023b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d105      	bne.n	800236c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002360:	893b      	ldrh	r3, [r7, #8]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
 800236a:	e015      	b.n	8002398 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800236c:	893b      	ldrh	r3, [r7, #8]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	b29b      	uxth	r3, r3
 8002372:	b2da      	uxtb	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	69b9      	ldr	r1, [r7, #24]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 fd43 	bl	8002e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e012      	b.n	80023b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800238e:	893b      	ldrh	r3, [r7, #8]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2200      	movs	r2, #0
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 fcf1 	bl	8002d8a <I2C_WaitOnFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	80002000 	.word	0x80002000

080023c0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023d6:	2b28      	cmp	r3, #40	; 0x28
 80023d8:	d16a      	bne.n	80024b0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	0c1b      	lsrs	r3, r3, #16
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80023f8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	b29b      	uxth	r3, r3
 8002402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002406:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	b29b      	uxth	r3, r3
 8002410:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002414:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d138      	bne.n	8002490 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800241e:	897b      	ldrh	r3, [r7, #10]
 8002420:	09db      	lsrs	r3, r3, #7
 8002422:	b29a      	uxth	r2, r3
 8002424:	89bb      	ldrh	r3, [r7, #12]
 8002426:	4053      	eors	r3, r2
 8002428:	b29b      	uxth	r3, r3
 800242a:	f003 0306 	and.w	r3, r3, #6
 800242e:	2b00      	cmp	r3, #0
 8002430:	d11c      	bne.n	800246c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002432:	897b      	ldrh	r3, [r7, #10]
 8002434:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002444:	2b02      	cmp	r3, #2
 8002446:	d13b      	bne.n	80024c0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2208      	movs	r2, #8
 8002454:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800245e:	89ba      	ldrh	r2, [r7, #12]
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	4619      	mov	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff fc3c 	bl	8001ce2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800246a:	e029      	b.n	80024c0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800246c:	893b      	ldrh	r3, [r7, #8]
 800246e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002470:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fe01 	bl	800307c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002482:	89ba      	ldrh	r2, [r7, #12]
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff fc2a 	bl	8001ce2 <HAL_I2C_AddrCallback>
}
 800248e:	e017      	b.n	80024c0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fdf1 	bl	800307c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024a2:	89ba      	ldrh	r2, [r7, #12]
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	4619      	mov	r1, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff fc1a 	bl	8001ce2 <HAL_I2C_AddrCallback>
}
 80024ae:	e007      	b.n	80024c0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2208      	movs	r2, #8
 80024b6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b21      	cmp	r3, #33	; 0x21
 80024e2:	d115      	bne.n	8002510 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2211      	movs	r2, #17
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024f8:	2101      	movs	r1, #1
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fdbe 	bl	800307c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff fbc2 	bl	8001c92 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800250e:	e014      	b.n	800253a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2212      	movs	r2, #18
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002524:	2102      	movs	r1, #2
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fda8 	bl	800307c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fbb6 	bl	8001ca6 <HAL_I2C_MasterRxCpltCallback>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	0b9b      	lsrs	r3, r3, #14
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e00d      	b.n	8002594 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	0bdb      	lsrs	r3, r3, #15
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d007      	beq.n	8002594 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002592:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b29      	cmp	r3, #41	; 0x29
 800259e:	d112      	bne.n	80025c6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2228      	movs	r2, #40	; 0x28
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2221      	movs	r2, #33	; 0x21
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025ae:	2101      	movs	r1, #1
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fd63 	bl	800307c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff fb7b 	bl	8001cba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80025c4:	e017      	b.n	80025f6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b2a      	cmp	r3, #42	; 0x2a
 80025d0:	d111      	bne.n	80025f6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2228      	movs	r2, #40	; 0x28
 80025d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2222      	movs	r2, #34	; 0x22
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025e0:	2102      	movs	r1, #2
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fd4a 	bl	800307c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff fb6c 	bl	8001cce <HAL_I2C_SlaveRxCpltCallback>
}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2220      	movs	r2, #32
 8002614:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b21      	cmp	r3, #33	; 0x21
 8002620:	d107      	bne.n	8002632 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002622:	2101      	movs	r1, #1
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fd29 	bl	800307c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2211      	movs	r2, #17
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
 8002630:	e00c      	b.n	800264c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b22      	cmp	r3, #34	; 0x22
 800263c:	d106      	bne.n	800264c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800263e:	2102      	movs	r1, #2
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fd1b 	bl	800307c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2212      	movs	r2, #18
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b4d      	ldr	r3, [pc, #308]	; (800278c <I2C_ITMasterCplt+0x18c>)
 8002658:	400b      	ands	r3, r1
 800265a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4a      	ldr	r2, [pc, #296]	; (8002790 <I2C_ITMasterCplt+0x190>)
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d009      	beq.n	8002688 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2210      	movs	r2, #16
 800267a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f043 0204 	orr.w	r2, r3, #4
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b60      	cmp	r3, #96	; 0x60
 8002692:	d10b      	bne.n	80026ac <I2C_ITMasterCplt+0xac>
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80026aa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fac8 	bl	8002c42 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b60      	cmp	r3, #96	; 0x60
 80026c2:	d002      	beq.n	80026ca <I2C_ITMasterCplt+0xca>
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d006      	beq.n	80026d8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4619      	mov	r1, r3
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f9bf 	bl	8002a54 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80026d6:	e054      	b.n	8002782 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b21      	cmp	r3, #33	; 0x21
 80026e2:	d124      	bne.n	800272e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b40      	cmp	r3, #64	; 0x40
 80026fc:	d10b      	bne.n	8002716 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f007 f9e6 	bl	8009ae0 <HAL_I2C_MemTxCpltCallback>
}
 8002714:	e035      	b.n	8002782 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff fab3 	bl	8001c92 <HAL_I2C_MasterTxCpltCallback>
}
 800272c:	e029      	b.n	8002782 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b22      	cmp	r3, #34	; 0x22
 8002738:	d123      	bne.n	8002782 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d10b      	bne.n	800276c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff fad4 	bl	8001d12 <HAL_I2C_MemRxCpltCallback>
}
 800276a:	e00a      	b.n	8002782 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff fa92 	bl	8001ca6 <HAL_I2C_MasterRxCpltCallback>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	fe00e800 	.word	0xfe00e800
 8002790:	ffff0000 	.word	0xffff0000

08002794 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2220      	movs	r2, #32
 80027b8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b21      	cmp	r3, #33	; 0x21
 80027be:	d002      	beq.n	80027c6 <I2C_ITSlaveCplt+0x32>
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b29      	cmp	r3, #41	; 0x29
 80027c4:	d108      	bne.n	80027d8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80027c6:	f248 0101 	movw	r1, #32769	; 0x8001
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fc56 	bl	800307c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2221      	movs	r2, #33	; 0x21
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
 80027d6:	e00d      	b.n	80027f4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b22      	cmp	r3, #34	; 0x22
 80027dc:	d002      	beq.n	80027e4 <I2C_ITSlaveCplt+0x50>
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b2a      	cmp	r3, #42	; 0x2a
 80027e2:	d107      	bne.n	80027f4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80027e4:	f248 0102 	movw	r1, #32770	; 0x8002
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fc47 	bl	800307c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2222      	movs	r2, #34	; 0x22
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002802:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b64      	ldr	r3, [pc, #400]	; (80029a0 <I2C_ITSlaveCplt+0x20c>)
 8002810:	400b      	ands	r3, r1
 8002812:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fa14 	bl	8002c42 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	0b9b      	lsrs	r3, r3, #14
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d013      	beq.n	800284e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002834:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	2b00      	cmp	r3, #0
 800283c:	d020      	beq.n	8002880 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	b29a      	uxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800284c:	e018      	b.n	8002880 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	0bdb      	lsrs	r3, r3, #15
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d012      	beq.n	8002880 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002868:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d006      	beq.n	8002880 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	b29a      	uxth	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d020      	beq.n	80028ce <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f023 0304 	bic.w	r3, r3, #4
 8002892:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00c      	beq.n	80028ce <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d010      	beq.n	800291c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f8a7 	bl	8002a54 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b28      	cmp	r3, #40	; 0x28
 8002910:	d141      	bne.n	8002996 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002912:	6979      	ldr	r1, [r7, #20]
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f847 	bl	80029a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800291a:	e03c      	b.n	8002996 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002924:	d014      	beq.n	8002950 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff fe0b 	bl	8002542 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <I2C_ITSlaveCplt+0x210>)
 8002930:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff f9d8 	bl	8001cfe <HAL_I2C_ListenCpltCallback>
}
 800294e:	e022      	b.n	8002996 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b22      	cmp	r3, #34	; 0x22
 800295a:	d10e      	bne.n	800297a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff f9ab 	bl	8001cce <HAL_I2C_SlaveRxCpltCallback>
}
 8002978:	e00d      	b.n	8002996 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff f992 	bl	8001cba <HAL_I2C_SlaveTxCpltCallback>
}
 8002996:	bf00      	nop
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	fe00e800 	.word	0xfe00e800
 80029a4:	ffff0000 	.word	0xffff0000

080029a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <I2C_ITListenCplt+0xa8>)
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d022      	beq.n	8002a26 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d012      	beq.n	8002a26 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f043 0204 	orr.w	r2, r3, #4
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a26:	f248 0103 	movw	r1, #32771	; 0x8003
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fb26 	bl	800307c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2210      	movs	r2, #16
 8002a36:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff f95c 	bl	8001cfe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	ffff0000 	.word	0xffff0000

08002a54 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a5d      	ldr	r2, [pc, #372]	; (8002be8 <I2C_ITError+0x194>)
 8002a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	2b28      	cmp	r3, #40	; 0x28
 8002a8a:	d005      	beq.n	8002a98 <I2C_ITError+0x44>
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	2b29      	cmp	r3, #41	; 0x29
 8002a90:	d002      	beq.n	8002a98 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	2b2a      	cmp	r3, #42	; 0x2a
 8002a96:	d10b      	bne.n	8002ab0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a98:	2103      	movs	r1, #3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 faee 	bl	800307c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2228      	movs	r2, #40	; 0x28
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a50      	ldr	r2, [pc, #320]	; (8002bec <I2C_ITError+0x198>)
 8002aac:	635a      	str	r2, [r3, #52]	; 0x34
 8002aae:	e011      	b.n	8002ad4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ab0:	f248 0103 	movw	r1, #32771	; 0x8003
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fae1 	bl	800307c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b60      	cmp	r3, #96	; 0x60
 8002ac4:	d003      	beq.n	8002ace <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d039      	beq.n	8002b56 <I2C_ITError+0x102>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b11      	cmp	r3, #17
 8002ae6:	d002      	beq.n	8002aee <I2C_ITError+0x9a>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b21      	cmp	r3, #33	; 0x21
 8002aec:	d133      	bne.n	8002b56 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afc:	d107      	bne.n	8002b0e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b0c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe fc16 	bl	8001344 <HAL_DMA_GetState>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d017      	beq.n	8002b4e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	4a33      	ldr	r2, [pc, #204]	; (8002bf0 <I2C_ITError+0x19c>)
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fb16 	bl	8001164 <HAL_DMA_Abort_IT>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d04d      	beq.n	8002bda <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b4c:	e045      	b.n	8002bda <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f850 	bl	8002bf4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b54:	e041      	b.n	8002bda <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d039      	beq.n	8002bd2 <I2C_ITError+0x17e>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b12      	cmp	r3, #18
 8002b62:	d002      	beq.n	8002b6a <I2C_ITError+0x116>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b22      	cmp	r3, #34	; 0x22
 8002b68:	d133      	bne.n	8002bd2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b78:	d107      	bne.n	8002b8a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b88:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fbd8 	bl	8001344 <HAL_DMA_GetState>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d017      	beq.n	8002bca <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <I2C_ITError+0x19c>)
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fad8 	bl	8001164 <HAL_DMA_Abort_IT>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d011      	beq.n	8002bde <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bc8:	e009      	b.n	8002bde <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f812 	bl	8002bf4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bd0:	e005      	b.n	8002bde <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f80e 	bl	8002bf4 <I2C_TreatErrorCallback>
  }
}
 8002bd8:	e002      	b.n	8002be0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bde:	bf00      	nop
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	ffff0000 	.word	0xffff0000
 8002bec:	08001d6b 	.word	0x08001d6b
 8002bf0:	08002d4f 	.word	0x08002d4f

08002bf4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b60      	cmp	r3, #96	; 0x60
 8002c06:	d10e      	bne.n	8002c26 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff f88b 	bl	8001d3a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c24:	e009      	b.n	8002c3a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff f876 	bl	8001d26 <HAL_I2C_ErrorCallback>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d103      	bne.n	8002c60 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d007      	beq.n	8002c7e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699a      	ldr	r2, [r3, #24]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0201 	orr.w	r2, r2, #1
 8002c7c:	619a      	str	r2, [r3, #24]
  }
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ca6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d104      	bne.n	8002cbc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002cb2:	2120      	movs	r1, #32
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f97d 	bl	8002fb4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002cba:	e02d      	b.n	8002d18 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8002cc4:	441a      	add	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2bff      	cmp	r3, #255	; 0xff
 8002cd2:	d903      	bls.n	8002cdc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	22ff      	movs	r2, #255	; 0xff
 8002cd8:	851a      	strh	r2, [r3, #40]	; 0x28
 8002cda:	e004      	b.n	8002ce6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	4619      	mov	r1, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3328      	adds	r3, #40	; 0x28
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	f7fe f9d2 	bl	80010a4 <HAL_DMA_Start_IT>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002d06:	2110      	movs	r1, #16
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f7ff fea3 	bl	8002a54 <I2C_ITError>
}
 8002d0e:	e003      	b.n	8002d18 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002d10:	2140      	movs	r1, #64	; 0x40
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f94e 	bl	8002fb4 <I2C_Enable_IRQ>
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d3c:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002d3e:	2110      	movs	r1, #16
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff fe87 	bl	8002a54 <I2C_ITError>
}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	2200      	movs	r2, #0
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	2200      	movs	r2, #0
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff ff39 	bl	8002bf4 <I2C_TreatErrorCallback>
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	4613      	mov	r3, r2
 8002d98:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d9a:	e022      	b.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da2:	d01e      	beq.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da4:	f7fd ffd8 	bl	8000d58 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d302      	bcc.n	8002dba <I2C_WaitOnFlagUntilTimeout+0x30>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d113      	bne.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f043 0220 	orr.w	r2, r3, #32
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00f      	b.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4013      	ands	r3, r2
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d0cd      	beq.n	8002d9c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e16:	e02c      	b.n	8002e72 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f835 	bl	8002e8c <I2C_IsAcknowledgeFailed>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e02a      	b.n	8002e82 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d01e      	beq.n	8002e72 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e34:	f7fd ff90 	bl	8000d58 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d302      	bcc.n	8002e4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d113      	bne.n	8002e72 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e007      	b.n	8002e82 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d1cb      	bne.n	8002e18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b10      	cmp	r3, #16
 8002ea4:	d151      	bne.n	8002f4a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ea6:	e022      	b.n	8002eee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d01e      	beq.n	8002eee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb0:	f7fd ff52 	bl	8000d58 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d302      	bcc.n	8002ec6 <I2C_IsAcknowledgeFailed+0x3a>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d113      	bne.n	8002eee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e02e      	b.n	8002f4c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d1d5      	bne.n	8002ea8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2210      	movs	r2, #16
 8002f02:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff fe98 	bl	8002c42 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <I2C_IsAcknowledgeFailed+0xc8>)
 8002f1e:	400b      	ands	r3, r1
 8002f20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f043 0204 	orr.w	r2, r3, #4
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	fe00e800 	.word	0xfe00e800

08002f58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	460b      	mov	r3, r1
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	4613      	mov	r3, r2
 8002f68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	0d5b      	lsrs	r3, r3, #21
 8002f74:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <I2C_TransferConfig+0x58>)
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	ea02 0103 	and.w	r1, r2, r3
 8002f82:	897b      	ldrh	r3, [r7, #10]
 8002f84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f88:	7a7b      	ldrb	r3, [r7, #9]
 8002f8a:	041b      	lsls	r3, r3, #16
 8002f8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	03ff63ff 	.word	0x03ff63ff

08002fb4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc8:	4a2a      	ldr	r2, [pc, #168]	; (8003074 <I2C_Enable_IRQ+0xc0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002fd2:	4a29      	ldr	r2, [pc, #164]	; (8003078 <I2C_Enable_IRQ+0xc4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d11d      	bne.n	8003014 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002fd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da03      	bge.n	8002fe8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002fe6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002fe8:	887b      	ldrh	r3, [r7, #2]
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d103      	bne.n	8002ff6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002ff4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002ff6:	887b      	ldrh	r3, [r7, #2]
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d103      	bne.n	8003004 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003002:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003004:	887b      	ldrh	r3, [r7, #2]
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d125      	bne.n	8003056 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003010:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003012:	e020      	b.n	8003056 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003014:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003018:	2b00      	cmp	r3, #0
 800301a:	da03      	bge.n	8003024 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003022:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003034:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003046:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	2b20      	cmp	r3, #32
 800304c:	d103      	bne.n	8003056 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f043 0320 	orr.w	r3, r3, #32
 8003054:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6819      	ldr	r1, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	430a      	orrs	r2, r1
 8003064:	601a      	str	r2, [r3, #0]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	08001f71 	.word	0x08001f71
 8003078:	08002157 	.word	0x08002157

0800307c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800308c:	887b      	ldrh	r3, [r7, #2]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00f      	beq.n	80030b6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800309c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030aa:	2b28      	cmp	r3, #40	; 0x28
 80030ac:	d003      	beq.n	80030b6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80030b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00f      	beq.n	80030e0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80030c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030d4:	2b28      	cmp	r3, #40	; 0x28
 80030d6:	d003      	beq.n	80030e0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80030de:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80030e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	da03      	bge.n	80030f0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80030ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80030f0:	887b      	ldrh	r3, [r7, #2]
 80030f2:	2b10      	cmp	r3, #16
 80030f4:	d103      	bne.n	80030fe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80030fe:	887b      	ldrh	r3, [r7, #2]
 8003100:	2b20      	cmp	r3, #32
 8003102:	d103      	bne.n	800310c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f043 0320 	orr.w	r3, r3, #32
 800310a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800310c:	887b      	ldrh	r3, [r7, #2]
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d103      	bne.n	800311a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003118:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	43da      	mvns	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	400a      	ands	r2, r1
 800312a:	601a      	str	r2, [r3, #0]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	d138      	bne.n	80031c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003158:	2302      	movs	r3, #2
 800315a:	e032      	b.n	80031c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	; 0x24
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800318a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6819      	ldr	r1, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d139      	bne.n	8003258 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e033      	b.n	800325a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2224      	movs	r2, #36	; 0x24
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003220:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	e000      	b.n	800325a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6613      	str	r3, [r2, #96]	; 0x60
 800327c:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800327e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	4905      	ldr	r1, [pc, #20]	; (80032a4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40010000 	.word	0x40010000

080032a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40007000 	.word	0x40007000

080032c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d2:	d130      	bne.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032d4:	4b23      	ldr	r3, [pc, #140]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e0:	d038      	beq.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032ea:	4a1e      	ldr	r2, [pc, #120]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2232      	movs	r2, #50	; 0x32
 80032f8:	fb02 f303 	mul.w	r3, r2, r3
 80032fc:	4a1b      	ldr	r2, [pc, #108]	; (800336c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0c9b      	lsrs	r3, r3, #18
 8003304:	3301      	adds	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003308:	e002      	b.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3b01      	subs	r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331c:	d102      	bne.n	8003324 <HAL_PWREx_ControlVoltageScaling+0x60>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f2      	bne.n	800330a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003330:	d110      	bne.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e00f      	b.n	8003356 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800333e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003342:	d007      	beq.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003344:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800334c:	4a05      	ldr	r2, [pc, #20]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003352:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40007000 	.word	0x40007000
 8003368:	20000000 	.word	0x20000000
 800336c:	431bde83 	.word	0x431bde83

08003370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e3d4      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003382:	4ba1      	ldr	r3, [pc, #644]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800338c:	4b9e      	ldr	r3, [pc, #632]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80e4 	beq.w	800356c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <HAL_RCC_OscConfig+0x4a>
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b0c      	cmp	r3, #12
 80033ae:	f040 808b 	bne.w	80034c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	f040 8087 	bne.w	80034c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ba:	4b93      	ldr	r3, [pc, #588]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_RCC_OscConfig+0x62>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e3ac      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1a      	ldr	r2, [r3, #32]
 80033d6:	4b8c      	ldr	r3, [pc, #560]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d004      	beq.n	80033ec <HAL_RCC_OscConfig+0x7c>
 80033e2:	4b89      	ldr	r3, [pc, #548]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ea:	e005      	b.n	80033f8 <HAL_RCC_OscConfig+0x88>
 80033ec:	4b86      	ldr	r3, [pc, #536]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80033ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d223      	bcs.n	8003444 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fd5d 	bl	8003ec0 <RCC_SetFlashLatencyFromMSIRange>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e38d      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003410:	4b7d      	ldr	r3, [pc, #500]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a7c      	ldr	r2, [pc, #496]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003416:	f043 0308 	orr.w	r3, r3, #8
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b7a      	ldr	r3, [pc, #488]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4977      	ldr	r1, [pc, #476]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800342e:	4b76      	ldr	r3, [pc, #472]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	4972      	ldr	r1, [pc, #456]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 800343e:	4313      	orrs	r3, r2
 8003440:	604b      	str	r3, [r1, #4]
 8003442:	e025      	b.n	8003490 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003444:	4b70      	ldr	r3, [pc, #448]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a6f      	ldr	r2, [pc, #444]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 800344a:	f043 0308 	orr.w	r3, r3, #8
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b6d      	ldr	r3, [pc, #436]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	496a      	ldr	r1, [pc, #424]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003462:	4b69      	ldr	r3, [pc, #420]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	4965      	ldr	r1, [pc, #404]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fd1d 	bl	8003ec0 <RCC_SetFlashLatencyFromMSIRange>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e34d      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003490:	f000 fc36 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003494:	4602      	mov	r2, r0
 8003496:	4b5c      	ldr	r3, [pc, #368]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	495a      	ldr	r1, [pc, #360]	; (800360c <HAL_RCC_OscConfig+0x29c>)
 80034a2:	5ccb      	ldrb	r3, [r1, r3]
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ac:	4a58      	ldr	r2, [pc, #352]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 80034ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034b0:	4b58      	ldr	r3, [pc, #352]	; (8003614 <HAL_RCC_OscConfig+0x2a4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd fb3d 	bl	8000b34 <HAL_InitTick>
 80034ba:	4603      	mov	r3, r0
 80034bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d052      	beq.n	800356a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	e331      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d032      	beq.n	8003536 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034d0:	4b4d      	ldr	r3, [pc, #308]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a4c      	ldr	r2, [pc, #304]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034dc:	f7fd fc3c 	bl	8000d58 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034e4:	f7fd fc38 	bl	8000d58 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e31a      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034f6:	4b44      	ldr	r3, [pc, #272]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003502:	4b41      	ldr	r3, [pc, #260]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a40      	ldr	r2, [pc, #256]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003508:	f043 0308 	orr.w	r3, r3, #8
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	493b      	ldr	r1, [pc, #236]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003520:	4b39      	ldr	r3, [pc, #228]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	4936      	ldr	r1, [pc, #216]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
 8003534:	e01a      	b.n	800356c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003536:	4b34      	ldr	r3, [pc, #208]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a33      	ldr	r2, [pc, #204]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003542:	f7fd fc09 	bl	8000d58 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800354a:	f7fd fc05 	bl	8000d58 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e2e7      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800355c:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f0      	bne.n	800354a <HAL_RCC_OscConfig+0x1da>
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800356a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d074      	beq.n	8003662 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b08      	cmp	r3, #8
 800357c:	d005      	beq.n	800358a <HAL_RCC_OscConfig+0x21a>
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b0c      	cmp	r3, #12
 8003582:	d10e      	bne.n	80035a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d10b      	bne.n	80035a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d064      	beq.n	8003660 <HAL_RCC_OscConfig+0x2f0>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d160      	bne.n	8003660 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e2c4      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035aa:	d106      	bne.n	80035ba <HAL_RCC_OscConfig+0x24a>
 80035ac:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a15      	ldr	r2, [pc, #84]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80035b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	e01d      	b.n	80035f6 <HAL_RCC_OscConfig+0x286>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c2:	d10c      	bne.n	80035de <HAL_RCC_OscConfig+0x26e>
 80035c4:	4b10      	ldr	r3, [pc, #64]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0f      	ldr	r2, [pc, #60]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80035ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80035d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	e00b      	b.n	80035f6 <HAL_RCC_OscConfig+0x286>
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a09      	ldr	r2, [pc, #36]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80035e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b07      	ldr	r3, [pc, #28]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a06      	ldr	r2, [pc, #24]	; (8003608 <HAL_RCC_OscConfig+0x298>)
 80035f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01c      	beq.n	8003638 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fd fbab 	bl	8000d58 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003604:	e011      	b.n	800362a <HAL_RCC_OscConfig+0x2ba>
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	08009cb0 	.word	0x08009cb0
 8003610:	20000000 	.word	0x20000000
 8003614:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003618:	f7fd fb9e 	bl	8000d58 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e280      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800362a:	4baf      	ldr	r3, [pc, #700]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x2a8>
 8003636:	e014      	b.n	8003662 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fd fb8e 	bl	8000d58 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003640:	f7fd fb8a 	bl	8000d58 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e26c      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003652:	4ba5      	ldr	r3, [pc, #660]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x2d0>
 800365e:	e000      	b.n	8003662 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d060      	beq.n	8003730 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b04      	cmp	r3, #4
 8003672:	d005      	beq.n	8003680 <HAL_RCC_OscConfig+0x310>
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b0c      	cmp	r3, #12
 8003678:	d119      	bne.n	80036ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d116      	bne.n	80036ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003680:	4b99      	ldr	r3, [pc, #612]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_OscConfig+0x328>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e249      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003698:	4b93      	ldr	r3, [pc, #588]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	4990      	ldr	r1, [pc, #576]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ac:	e040      	b.n	8003730 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d023      	beq.n	80036fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b6:	4b8c      	ldr	r3, [pc, #560]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a8b      	ldr	r2, [pc, #556]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 80036bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7fd fb49 	bl	8000d58 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ca:	f7fd fb45 	bl	8000d58 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e227      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036dc:	4b82      	ldr	r3, [pc, #520]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e8:	4b7f      	ldr	r3, [pc, #508]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	497c      	ldr	r1, [pc, #496]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
 80036fc:	e018      	b.n	8003730 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fe:	4b7a      	ldr	r3, [pc, #488]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a79      	ldr	r2, [pc, #484]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fd fb25 	bl	8000d58 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003712:	f7fd fb21 	bl	8000d58 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e203      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003724:	4b70      	ldr	r3, [pc, #448]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d03c      	beq.n	80037b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01c      	beq.n	800377e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003744:	4b68      	ldr	r3, [pc, #416]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374a:	4a67      	ldr	r2, [pc, #412]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fd fb00 	bl	8000d58 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375c:	f7fd fafc 	bl	8000d58 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e1de      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800376e:	4b5e      	ldr	r3, [pc, #376]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0ef      	beq.n	800375c <HAL_RCC_OscConfig+0x3ec>
 800377c:	e01b      	b.n	80037b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377e:	4b5a      	ldr	r3, [pc, #360]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003784:	4a58      	ldr	r2, [pc, #352]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378e:	f7fd fae3 	bl	8000d58 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003796:	f7fd fadf 	bl	8000d58 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e1c1      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a8:	4b4f      	ldr	r3, [pc, #316]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 80037aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1ef      	bne.n	8003796 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80a6 	beq.w	8003910 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c4:	2300      	movs	r3, #0
 80037c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037c8:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10d      	bne.n	80037f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d4:	4b44      	ldr	r3, [pc, #272]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	4a43      	ldr	r2, [pc, #268]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 80037da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037de:	6593      	str	r3, [r2, #88]	; 0x58
 80037e0:	4b41      	ldr	r3, [pc, #260]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ec:	2301      	movs	r3, #1
 80037ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f0:	4b3e      	ldr	r3, [pc, #248]	; (80038ec <HAL_RCC_OscConfig+0x57c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d118      	bne.n	800382e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037fc:	4b3b      	ldr	r3, [pc, #236]	; (80038ec <HAL_RCC_OscConfig+0x57c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a3a      	ldr	r2, [pc, #232]	; (80038ec <HAL_RCC_OscConfig+0x57c>)
 8003802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003806:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003808:	f7fd faa6 	bl	8000d58 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003810:	f7fd faa2 	bl	8000d58 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e184      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003822:	4b32      	ldr	r3, [pc, #200]	; (80038ec <HAL_RCC_OscConfig+0x57c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d108      	bne.n	8003848 <HAL_RCC_OscConfig+0x4d8>
 8003836:	4b2c      	ldr	r3, [pc, #176]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383c:	4a2a      	ldr	r2, [pc, #168]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003846:	e024      	b.n	8003892 <HAL_RCC_OscConfig+0x522>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b05      	cmp	r3, #5
 800384e:	d110      	bne.n	8003872 <HAL_RCC_OscConfig+0x502>
 8003850:	4b25      	ldr	r3, [pc, #148]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	4a24      	ldr	r2, [pc, #144]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003858:	f043 0304 	orr.w	r3, r3, #4
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003860:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003866:	4a20      	ldr	r2, [pc, #128]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003870:	e00f      	b.n	8003892 <HAL_RCC_OscConfig+0x522>
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003882:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 800388a:	f023 0304 	bic.w	r3, r3, #4
 800388e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d016      	beq.n	80038c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7fd fa5d 	bl	8000d58 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7fd fa59 	bl	8000d58 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e139      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_RCC_OscConfig+0x578>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ed      	beq.n	80038a2 <HAL_RCC_OscConfig+0x532>
 80038c6:	e01a      	b.n	80038fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fd fa46 	bl	8000d58 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ce:	e00f      	b.n	80038f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fd fa42 	bl	8000d58 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	; 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d906      	bls.n	80038f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e122      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f0:	4b90      	ldr	r3, [pc, #576]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e8      	bne.n	80038d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038fe:	7ffb      	ldrb	r3, [r7, #31]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d105      	bne.n	8003910 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003904:	4b8b      	ldr	r3, [pc, #556]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003908:	4a8a      	ldr	r2, [pc, #552]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 800390a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8108 	beq.w	8003b2a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	2b02      	cmp	r3, #2
 8003920:	f040 80d0 	bne.w	8003ac4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003924:	4b83      	ldr	r3, [pc, #524]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 0203 	and.w	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	429a      	cmp	r2, r3
 8003936:	d130      	bne.n	800399a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	3b01      	subs	r3, #1
 8003944:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d127      	bne.n	800399a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d11f      	bne.n	800399a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003964:	2a07      	cmp	r2, #7
 8003966:	bf14      	ite	ne
 8003968:	2201      	movne	r2, #1
 800396a:	2200      	moveq	r2, #0
 800396c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800396e:	4293      	cmp	r3, r2
 8003970:	d113      	bne.n	800399a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	3b01      	subs	r3, #1
 8003980:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d109      	bne.n	800399a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	3b01      	subs	r3, #1
 8003994:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d06e      	beq.n	8003a78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b0c      	cmp	r3, #12
 800399e:	d069      	beq.n	8003a74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039a0:	4b64      	ldr	r3, [pc, #400]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d105      	bne.n	80039b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039ac:	4b61      	ldr	r3, [pc, #388]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0b7      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039bc:	4b5d      	ldr	r3, [pc, #372]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a5c      	ldr	r2, [pc, #368]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 80039c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039c8:	f7fd f9c6 	bl	8000d58 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d0:	f7fd f9c2 	bl	8000d58 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e0a4      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e2:	4b54      	ldr	r3, [pc, #336]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ee:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	4b51      	ldr	r3, [pc, #324]	; (8003b38 <HAL_RCC_OscConfig+0x7c8>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039fe:	3a01      	subs	r2, #1
 8003a00:	0112      	lsls	r2, r2, #4
 8003a02:	4311      	orrs	r1, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a08:	0212      	lsls	r2, r2, #8
 8003a0a:	4311      	orrs	r1, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a10:	0852      	lsrs	r2, r2, #1
 8003a12:	3a01      	subs	r2, #1
 8003a14:	0552      	lsls	r2, r2, #21
 8003a16:	4311      	orrs	r1, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a1c:	0852      	lsrs	r2, r2, #1
 8003a1e:	3a01      	subs	r2, #1
 8003a20:	0652      	lsls	r2, r2, #25
 8003a22:	4311      	orrs	r1, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a28:	0912      	lsrs	r2, r2, #4
 8003a2a:	0452      	lsls	r2, r2, #17
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	4941      	ldr	r1, [pc, #260]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a34:	4b3f      	ldr	r3, [pc, #252]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a3e      	ldr	r2, [pc, #248]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a40:	4b3c      	ldr	r3, [pc, #240]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a3b      	ldr	r2, [pc, #236]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a4c:	f7fd f984 	bl	8000d58 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a54:	f7fd f980 	bl	8000d58 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e062      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a66:	4b33      	ldr	r3, [pc, #204]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a72:	e05a      	b.n	8003b2a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e059      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a78:	4b2e      	ldr	r3, [pc, #184]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d152      	bne.n	8003b2a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a84:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2a      	ldr	r2, [pc, #168]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a90:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a27      	ldr	r2, [pc, #156]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a9c:	f7fd f95c 	bl	8000d58 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7fd f958 	bl	8000d58 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e03a      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab6:	4b1f      	ldr	r3, [pc, #124]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x734>
 8003ac2:	e032      	b.n	8003b2a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	d02d      	beq.n	8003b26 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aca:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a19      	ldr	r2, [pc, #100]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003ad0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ad4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003ad6:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d105      	bne.n	8003aee <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ae2:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003ae8:	f023 0303 	bic.w	r3, r3, #3
 8003aec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003aee:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	4a10      	ldr	r2, [pc, #64]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003af4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fd f92b 	bl	8000d58 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fd f927 	bl	8000d58 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e009      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_RCC_OscConfig+0x7c4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x796>
 8003b24:	e001      	b.n	8003b2a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3720      	adds	r7, #32
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000
 8003b38:	f99d808c 	.word	0xf99d808c

08003b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0c8      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b50:	4b66      	ldr	r3, [pc, #408]	; (8003cec <HAL_RCC_ClockConfig+0x1b0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d910      	bls.n	8003b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b63      	ldr	r3, [pc, #396]	; (8003cec <HAL_RCC_ClockConfig+0x1b0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 0207 	bic.w	r2, r3, #7
 8003b66:	4961      	ldr	r1, [pc, #388]	; (8003cec <HAL_RCC_ClockConfig+0x1b0>)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b5f      	ldr	r3, [pc, #380]	; (8003cec <HAL_RCC_ClockConfig+0x1b0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0b0      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d04c      	beq.n	8003c26 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b94:	4b56      	ldr	r3, [pc, #344]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d121      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e09e      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d107      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bac:	4b50      	ldr	r3, [pc, #320]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d115      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e092      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bc4:	4b4a      	ldr	r3, [pc, #296]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e086      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd4:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e07e      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003be4:	4b42      	ldr	r3, [pc, #264]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f023 0203 	bic.w	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	493f      	ldr	r1, [pc, #252]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf6:	f7fd f8af 	bl	8000d58 <HAL_GetTick>
 8003bfa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfe:	f7fd f8ab 	bl	8000d58 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e066      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c14:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 020c 	and.w	r2, r3, #12
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d1eb      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c32:	4b2f      	ldr	r3, [pc, #188]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	492c      	ldr	r1, [pc, #176]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c44:	4b29      	ldr	r3, [pc, #164]	; (8003cec <HAL_RCC_ClockConfig+0x1b0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d210      	bcs.n	8003c74 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b26      	ldr	r3, [pc, #152]	; (8003cec <HAL_RCC_ClockConfig+0x1b0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 0207 	bic.w	r2, r3, #7
 8003c5a:	4924      	ldr	r1, [pc, #144]	; (8003cec <HAL_RCC_ClockConfig+0x1b0>)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b22      	ldr	r3, [pc, #136]	; (8003cec <HAL_RCC_ClockConfig+0x1b0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e036      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4918      	ldr	r1, [pc, #96]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c9e:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4910      	ldr	r1, [pc, #64]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cb2:	f000 f825 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	490c      	ldr	r1, [pc, #48]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	5ccb      	ldrb	r3, [r1, r3]
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	fa22 f303 	lsr.w	r3, r2, r3
 8003cce:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fc ff2c 	bl	8000b34 <HAL_InitTick>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ce0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40022000 	.word	0x40022000
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	08009cb0 	.word	0x08009cb0
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	20000004 	.word	0x20000004

08003d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b089      	sub	sp, #36	; 0x24
 8003d04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0e:	4b3e      	ldr	r3, [pc, #248]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d18:	4b3b      	ldr	r3, [pc, #236]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x34>
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	d121      	bne.n	8003d72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d11e      	bne.n	8003d72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d34:	4b34      	ldr	r3, [pc, #208]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d40:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	e005      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d50:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10d      	bne.n	8003d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d70:	e00a      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d102      	bne.n	8003d7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	e004      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d84:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b0c      	cmp	r3, #12
 8003d8c:	d134      	bne.n	8003df8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d8e:	4b1e      	ldr	r3, [pc, #120]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d003      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0xac>
 8003da4:	e005      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003da6:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8003da8:	617b      	str	r3, [r7, #20]
      break;
 8003daa:	e005      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003dac:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dae:	617b      	str	r3, [r7, #20]
      break;
 8003db0:	e002      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	617b      	str	r3, [r7, #20]
      break;
 8003db6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003db8:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	fb02 f203 	mul.w	r2, r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dde:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	0e5b      	lsrs	r3, r3, #25
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	3301      	adds	r3, #1
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003df8:	69bb      	ldr	r3, [r7, #24]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3724      	adds	r7, #36	; 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	08009cc8 	.word	0x08009cc8
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	007a1200 	.word	0x007a1200

08003e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20000000 	.word	0x20000000

08003e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e34:	f7ff fff0 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	0adb      	lsrs	r3, r3, #11
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4904      	ldr	r1, [pc, #16]	; (8003e58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40021000 	.word	0x40021000
 8003e58:	08009cc0 	.word	0x08009cc0

08003e5c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	220f      	movs	r2, #15
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003e6c:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0203 	and.w	r2, r3, #3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003e78:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e90:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	08db      	lsrs	r3, r3, #3
 8003e96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <HAL_RCC_GetClockConfig+0x60>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0207 	and.w	r2, r3, #7
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	601a      	str	r2, [r3, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40022000 	.word	0x40022000

08003ec0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ecc:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ed8:	f7ff f9e6 	bl	80032a8 <HAL_PWREx_GetVoltageRange>
 8003edc:	6178      	str	r0, [r7, #20]
 8003ede:	e014      	b.n	8003f0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ee0:	4b25      	ldr	r3, [pc, #148]	; (8003f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	4a24      	ldr	r2, [pc, #144]	; (8003f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eea:	6593      	str	r3, [r2, #88]	; 0x58
 8003eec:	4b22      	ldr	r3, [pc, #136]	; (8003f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ef8:	f7ff f9d6 	bl	80032a8 <HAL_PWREx_GetVoltageRange>
 8003efc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003efe:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f02:	4a1d      	ldr	r2, [pc, #116]	; (8003f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f10:	d10b      	bne.n	8003f2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b80      	cmp	r3, #128	; 0x80
 8003f16:	d919      	bls.n	8003f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2ba0      	cmp	r3, #160	; 0xa0
 8003f1c:	d902      	bls.n	8003f24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f1e:	2302      	movs	r3, #2
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	e013      	b.n	8003f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f24:	2301      	movs	r3, #1
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	e010      	b.n	8003f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b80      	cmp	r3, #128	; 0x80
 8003f2e:	d902      	bls.n	8003f36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f30:	2303      	movs	r3, #3
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	e00a      	b.n	8003f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b80      	cmp	r3, #128	; 0x80
 8003f3a:	d102      	bne.n	8003f42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	e004      	b.n	8003f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b70      	cmp	r3, #112	; 0x70
 8003f46:	d101      	bne.n	8003f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f48:	2301      	movs	r3, #1
 8003f4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 0207 	bic.w	r2, r3, #7
 8003f54:	4909      	ldr	r1, [pc, #36]	; (8003f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d001      	beq.n	8003f6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40022000 	.word	0x40022000

08003f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f88:	2300      	movs	r3, #0
 8003f8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d041      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fa4:	d02a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003fa6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003faa:	d824      	bhi.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fb0:	d008      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fb6:	d81e      	bhi.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc0:	d010      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fc2:	e018      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fc4:	4b86      	ldr	r3, [pc, #536]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a85      	ldr	r2, [pc, #532]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fd0:	e015      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fabb 	bl	8004554 <RCCEx_PLLSAI1_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fe2:	e00c      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3320      	adds	r3, #32
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fba6 	bl	800473c <RCCEx_PLLSAI2_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ff4:	e003      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	74fb      	strb	r3, [r7, #19]
      break;
 8003ffa:	e000      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ffe:	7cfb      	ldrb	r3, [r7, #19]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10b      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004004:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004012:	4973      	ldr	r1, [pc, #460]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800401a:	e001      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401c:	7cfb      	ldrb	r3, [r7, #19]
 800401e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d041      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004030:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004034:	d02a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004036:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800403a:	d824      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800403c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004040:	d008      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004042:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004046:	d81e      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800404c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004050:	d010      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004052:	e018      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004054:	4b62      	ldr	r3, [pc, #392]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4a61      	ldr	r2, [pc, #388]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004060:	e015      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3304      	adds	r3, #4
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fa73 	bl	8004554 <RCCEx_PLLSAI1_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004072:	e00c      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3320      	adds	r3, #32
 8004078:	2100      	movs	r1, #0
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fb5e 	bl	800473c <RCCEx_PLLSAI2_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004084:	e003      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	74fb      	strb	r3, [r7, #19]
      break;
 800408a:	e000      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800408c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10b      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004094:	4b52      	ldr	r3, [pc, #328]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a2:	494f      	ldr	r1, [pc, #316]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040aa:	e001      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80a0 	beq.w	80041fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040be:	2300      	movs	r3, #0
 80040c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040c2:	4b47      	ldr	r3, [pc, #284]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040d2:	2300      	movs	r3, #0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00d      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d8:	4b41      	ldr	r3, [pc, #260]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040dc:	4a40      	ldr	r2, [pc, #256]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e2:	6593      	str	r3, [r2, #88]	; 0x58
 80040e4:	4b3e      	ldr	r3, [pc, #248]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f0:	2301      	movs	r3, #1
 80040f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040f4:	4b3b      	ldr	r3, [pc, #236]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a3a      	ldr	r2, [pc, #232]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004100:	f7fc fe2a 	bl	8000d58 <HAL_GetTick>
 8004104:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004106:	e009      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004108:	f7fc fe26 	bl	8000d58 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d902      	bls.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	74fb      	strb	r3, [r7, #19]
        break;
 800411a:	e005      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800411c:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ef      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d15c      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800412e:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004138:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01f      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	429a      	cmp	r2, r3
 800414a:	d019      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800414c:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004156:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004158:	4b21      	ldr	r3, [pc, #132]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	4a20      	ldr	r2, [pc, #128]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004168:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416e:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004178:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d016      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fc fde5 	bl	8000d58 <HAL_GetTick>
 800418e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004190:	e00b      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004192:	f7fc fde1 	bl	8000d58 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d902      	bls.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	74fb      	strb	r3, [r7, #19]
            break;
 80041a8:	e006      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041aa:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ec      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041be:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ce:	4904      	ldr	r1, [pc, #16]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041d6:	e009      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	74bb      	strb	r3, [r7, #18]
 80041dc:	e006      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e8:	7cfb      	ldrb	r3, [r7, #19]
 80041ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ec:	7c7b      	ldrb	r3, [r7, #17]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d105      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f2:	4b9e      	ldr	r3, [pc, #632]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	4a9d      	ldr	r2, [pc, #628]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800420a:	4b98      	ldr	r3, [pc, #608]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f023 0203 	bic.w	r2, r3, #3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	4994      	ldr	r1, [pc, #592]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800422c:	4b8f      	ldr	r3, [pc, #572]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004232:	f023 020c 	bic.w	r2, r3, #12
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	498c      	ldr	r1, [pc, #560]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800424e:	4b87      	ldr	r3, [pc, #540]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	4983      	ldr	r1, [pc, #524]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004270:	4b7e      	ldr	r3, [pc, #504]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	497b      	ldr	r1, [pc, #492]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004292:	4b76      	ldr	r3, [pc, #472]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a0:	4972      	ldr	r1, [pc, #456]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042b4:	4b6d      	ldr	r3, [pc, #436]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c2:	496a      	ldr	r1, [pc, #424]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042d6:	4b65      	ldr	r3, [pc, #404]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e4:	4961      	ldr	r1, [pc, #388]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042f8:	4b5c      	ldr	r3, [pc, #368]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004306:	4959      	ldr	r1, [pc, #356]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800431a:	4b54      	ldr	r3, [pc, #336]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004328:	4950      	ldr	r1, [pc, #320]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800433c:	4b4b      	ldr	r3, [pc, #300]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004342:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	4948      	ldr	r1, [pc, #288]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800435e:	4b43      	ldr	r3, [pc, #268]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436c:	493f      	ldr	r1, [pc, #252]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d028      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004380:	4b3a      	ldr	r3, [pc, #232]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800438e:	4937      	ldr	r1, [pc, #220]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800439e:	d106      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a0:	4b32      	ldr	r3, [pc, #200]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4a31      	ldr	r2, [pc, #196]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043aa:	60d3      	str	r3, [r2, #12]
 80043ac:	e011      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043b6:	d10c      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3304      	adds	r3, #4
 80043bc:	2101      	movs	r1, #1
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f8c8 	bl	8004554 <RCCEx_PLLSAI1_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80043ce:	7cfb      	ldrb	r3, [r7, #19]
 80043d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d028      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043de:	4b23      	ldr	r3, [pc, #140]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	491f      	ldr	r1, [pc, #124]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043fc:	d106      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043fe:	4b1b      	ldr	r3, [pc, #108]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	4a1a      	ldr	r2, [pc, #104]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004408:	60d3      	str	r3, [r2, #12]
 800440a:	e011      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004414:	d10c      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3304      	adds	r3, #4
 800441a:	2101      	movs	r1, #1
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f899 	bl	8004554 <RCCEx_PLLSAI1_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800442c:	7cfb      	ldrb	r3, [r7, #19]
 800442e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d02b      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444a:	4908      	ldr	r1, [pc, #32]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800445a:	d109      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800445c:	4b03      	ldr	r3, [pc, #12]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4a02      	ldr	r2, [pc, #8]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004466:	60d3      	str	r3, [r2, #12]
 8004468:	e014      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800446a:	bf00      	nop
 800446c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004474:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004478:	d10c      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3304      	adds	r3, #4
 800447e:	2101      	movs	r1, #1
 8004480:	4618      	mov	r0, r3
 8004482:	f000 f867 	bl	8004554 <RCCEx_PLLSAI1_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800448a:	7cfb      	ldrb	r3, [r7, #19]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d02f      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044a0:	4b2b      	ldr	r3, [pc, #172]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ae:	4928      	ldr	r1, [pc, #160]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044be:	d10d      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3304      	adds	r3, #4
 80044c4:	2102      	movs	r1, #2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f844 	bl	8004554 <RCCEx_PLLSAI1_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d014      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	74bb      	strb	r3, [r7, #18]
 80044da:	e011      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044e4:	d10c      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	3320      	adds	r3, #32
 80044ea:	2102      	movs	r1, #2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 f925 	bl	800473c <RCCEx_PLLSAI2_Config>
 80044f2:	4603      	mov	r3, r0
 80044f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044f6:	7cfb      	ldrb	r3, [r7, #19]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800450c:	4b10      	ldr	r3, [pc, #64]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800451a:	490d      	ldr	r1, [pc, #52]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00b      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800453e:	4904      	ldr	r1, [pc, #16]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004546:	7cbb      	ldrb	r3, [r7, #18]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000

08004554 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004562:	4b75      	ldr	r3, [pc, #468]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d018      	beq.n	80045a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800456e:	4b72      	ldr	r3, [pc, #456]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0203 	and.w	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d10d      	bne.n	800459a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
       ||
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004586:	4b6c      	ldr	r3, [pc, #432]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
       ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d047      	beq.n	800462a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	73fb      	strb	r3, [r7, #15]
 800459e:	e044      	b.n	800462a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d018      	beq.n	80045da <RCCEx_PLLSAI1_Config+0x86>
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d825      	bhi.n	80045f8 <RCCEx_PLLSAI1_Config+0xa4>
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d002      	beq.n	80045b6 <RCCEx_PLLSAI1_Config+0x62>
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d009      	beq.n	80045c8 <RCCEx_PLLSAI1_Config+0x74>
 80045b4:	e020      	b.n	80045f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045b6:	4b60      	ldr	r3, [pc, #384]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d11d      	bne.n	80045fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c6:	e01a      	b.n	80045fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045c8:	4b5b      	ldr	r3, [pc, #364]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d116      	bne.n	8004602 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d8:	e013      	b.n	8004602 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045da:	4b57      	ldr	r3, [pc, #348]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10f      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045e6:	4b54      	ldr	r3, [pc, #336]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045f6:	e006      	b.n	8004606 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
      break;
 80045fc:	e004      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004606:	bf00      	nop
    }

    if(status == HAL_OK)
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10d      	bne.n	800462a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800460e:	4b4a      	ldr	r3, [pc, #296]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6819      	ldr	r1, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	430b      	orrs	r3, r1
 8004624:	4944      	ldr	r1, [pc, #272]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004626:	4313      	orrs	r3, r2
 8004628:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d17d      	bne.n	800472c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004630:	4b41      	ldr	r3, [pc, #260]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a40      	ldr	r2, [pc, #256]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004636:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800463a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463c:	f7fc fb8c 	bl	8000d58 <HAL_GetTick>
 8004640:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004642:	e009      	b.n	8004658 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004644:	f7fc fb88 	bl	8000d58 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d902      	bls.n	8004658 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	73fb      	strb	r3, [r7, #15]
        break;
 8004656:	e005      	b.n	8004664 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004658:	4b37      	ldr	r3, [pc, #220]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ef      	bne.n	8004644 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d160      	bne.n	800472c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d111      	bne.n	8004694 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004670:	4b31      	ldr	r3, [pc, #196]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6892      	ldr	r2, [r2, #8]
 8004680:	0211      	lsls	r1, r2, #8
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68d2      	ldr	r2, [r2, #12]
 8004686:	0912      	lsrs	r2, r2, #4
 8004688:	0452      	lsls	r2, r2, #17
 800468a:	430a      	orrs	r2, r1
 800468c:	492a      	ldr	r1, [pc, #168]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800468e:	4313      	orrs	r3, r2
 8004690:	610b      	str	r3, [r1, #16]
 8004692:	e027      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d112      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800469a:	4b27      	ldr	r3, [pc, #156]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80046a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6892      	ldr	r2, [r2, #8]
 80046aa:	0211      	lsls	r1, r2, #8
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6912      	ldr	r2, [r2, #16]
 80046b0:	0852      	lsrs	r2, r2, #1
 80046b2:	3a01      	subs	r2, #1
 80046b4:	0552      	lsls	r2, r2, #21
 80046b6:	430a      	orrs	r2, r1
 80046b8:	491f      	ldr	r1, [pc, #124]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	610b      	str	r3, [r1, #16]
 80046be:	e011      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6892      	ldr	r2, [r2, #8]
 80046d0:	0211      	lsls	r1, r2, #8
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6952      	ldr	r2, [r2, #20]
 80046d6:	0852      	lsrs	r2, r2, #1
 80046d8:	3a01      	subs	r2, #1
 80046da:	0652      	lsls	r2, r2, #25
 80046dc:	430a      	orrs	r2, r1
 80046de:	4916      	ldr	r1, [pc, #88]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046e4:	4b14      	ldr	r3, [pc, #80]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a13      	ldr	r2, [pc, #76]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fc fb32 	bl	8000d58 <HAL_GetTick>
 80046f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046f6:	e009      	b.n	800470c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046f8:	f7fc fb2e 	bl	8000d58 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d902      	bls.n	800470c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	73fb      	strb	r3, [r7, #15]
          break;
 800470a:	e005      	b.n	8004718 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ef      	beq.n	80046f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800471e:	4b06      	ldr	r3, [pc, #24]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	4904      	ldr	r1, [pc, #16]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004728:	4313      	orrs	r3, r2
 800472a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800472c:	7bfb      	ldrb	r3, [r7, #15]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000

0800473c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800474a:	4b6a      	ldr	r3, [pc, #424]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d018      	beq.n	8004788 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004756:	4b67      	ldr	r3, [pc, #412]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0203 	and.w	r2, r3, #3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d10d      	bne.n	8004782 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
       ||
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800476e:	4b61      	ldr	r3, [pc, #388]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	091b      	lsrs	r3, r3, #4
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
       ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d047      	beq.n	8004812 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	73fb      	strb	r3, [r7, #15]
 8004786:	e044      	b.n	8004812 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b03      	cmp	r3, #3
 800478e:	d018      	beq.n	80047c2 <RCCEx_PLLSAI2_Config+0x86>
 8004790:	2b03      	cmp	r3, #3
 8004792:	d825      	bhi.n	80047e0 <RCCEx_PLLSAI2_Config+0xa4>
 8004794:	2b01      	cmp	r3, #1
 8004796:	d002      	beq.n	800479e <RCCEx_PLLSAI2_Config+0x62>
 8004798:	2b02      	cmp	r3, #2
 800479a:	d009      	beq.n	80047b0 <RCCEx_PLLSAI2_Config+0x74>
 800479c:	e020      	b.n	80047e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800479e:	4b55      	ldr	r3, [pc, #340]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d11d      	bne.n	80047e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ae:	e01a      	b.n	80047e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047b0:	4b50      	ldr	r3, [pc, #320]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d116      	bne.n	80047ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c0:	e013      	b.n	80047ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047c2:	4b4c      	ldr	r3, [pc, #304]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10f      	bne.n	80047ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047ce:	4b49      	ldr	r3, [pc, #292]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047de:	e006      	b.n	80047ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      break;
 80047e4:	e004      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047e6:	bf00      	nop
 80047e8:	e002      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10d      	bne.n	8004812 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047f6:	4b3f      	ldr	r3, [pc, #252]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6819      	ldr	r1, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	3b01      	subs	r3, #1
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	430b      	orrs	r3, r1
 800480c:	4939      	ldr	r1, [pc, #228]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800480e:	4313      	orrs	r3, r2
 8004810:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d167      	bne.n	80048e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004818:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a35      	ldr	r2, [pc, #212]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004824:	f7fc fa98 	bl	8000d58 <HAL_GetTick>
 8004828:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800482a:	e009      	b.n	8004840 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800482c:	f7fc fa94 	bl	8000d58 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d902      	bls.n	8004840 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	73fb      	strb	r3, [r7, #15]
        break;
 800483e:	e005      	b.n	800484c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004840:	4b2c      	ldr	r3, [pc, #176]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1ef      	bne.n	800482c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d14a      	bne.n	80048e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d111      	bne.n	800487c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004858:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6892      	ldr	r2, [r2, #8]
 8004868:	0211      	lsls	r1, r2, #8
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68d2      	ldr	r2, [r2, #12]
 800486e:	0912      	lsrs	r2, r2, #4
 8004870:	0452      	lsls	r2, r2, #17
 8004872:	430a      	orrs	r2, r1
 8004874:	491f      	ldr	r1, [pc, #124]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004876:	4313      	orrs	r3, r2
 8004878:	614b      	str	r3, [r1, #20]
 800487a:	e011      	b.n	80048a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800487c:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004884:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6892      	ldr	r2, [r2, #8]
 800488c:	0211      	lsls	r1, r2, #8
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6912      	ldr	r2, [r2, #16]
 8004892:	0852      	lsrs	r2, r2, #1
 8004894:	3a01      	subs	r2, #1
 8004896:	0652      	lsls	r2, r2, #25
 8004898:	430a      	orrs	r2, r1
 800489a:	4916      	ldr	r1, [pc, #88]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800489c:	4313      	orrs	r3, r2
 800489e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048a0:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ac:	f7fc fa54 	bl	8000d58 <HAL_GetTick>
 80048b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048b2:	e009      	b.n	80048c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048b4:	f7fc fa50 	bl	8000d58 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d902      	bls.n	80048c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	73fb      	strb	r3, [r7, #15]
          break;
 80048c6:	e005      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0ef      	beq.n	80048b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	4904      	ldr	r1, [pc, #16]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000

080048f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e049      	b.n	800499e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f841 	bl	80049a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f000 f9f8 	bl	8004d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d001      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e04f      	b.n	8004a74 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a23      	ldr	r2, [pc, #140]	; (8004a80 <HAL_TIM_Base_Start_IT+0xc4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d01d      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x76>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fe:	d018      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x76>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1f      	ldr	r2, [pc, #124]	; (8004a84 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x76>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1e      	ldr	r2, [pc, #120]	; (8004a88 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00e      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x76>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <HAL_TIM_Base_Start_IT+0xd0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d009      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x76>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d004      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x76>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a19      	ldr	r2, [pc, #100]	; (8004a94 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d115      	bne.n	8004a5e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	4b17      	ldr	r3, [pc, #92]	; (8004a98 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b06      	cmp	r3, #6
 8004a42:	d015      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0xb4>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4a:	d011      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5c:	e008      	b.n	8004a70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0201 	orr.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e000      	b.n	8004a72 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40012c00 	.word	0x40012c00
 8004a84:	40000400 	.word	0x40000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	40000c00 	.word	0x40000c00
 8004a90:	40013400 	.word	0x40013400
 8004a94:	40014000 	.word	0x40014000
 8004a98:	00010007 	.word	0x00010007

08004a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d122      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d11b      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0202 	mvn.w	r2, #2
 8004ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f905 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
 8004ae4:	e005      	b.n	8004af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f8f7 	bl	8004cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f908 	bl	8004d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d122      	bne.n	8004b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d11b      	bne.n	8004b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0204 	mvn.w	r2, #4
 8004b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f8db 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f8cd 	bl	8004cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f8de 	bl	8004d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d122      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d11b      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0208 	mvn.w	r2, #8
 8004b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2204      	movs	r2, #4
 8004b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f8b1 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
 8004b8c:	e005      	b.n	8004b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f8a3 	bl	8004cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f8b4 	bl	8004d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b10      	cmp	r3, #16
 8004bac:	d122      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d11b      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0210 	mvn.w	r2, #16
 8004bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2208      	movs	r2, #8
 8004bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f887 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
 8004be0:	e005      	b.n	8004bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f879 	bl	8004cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f88a 	bl	8004d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d10e      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d107      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0201 	mvn.w	r2, #1
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fb feb8 	bl	8000990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d10e      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c38:	2b80      	cmp	r3, #128	; 0x80
 8004c3a:	d107      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f914 	bl	8004e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c5a:	d10e      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c66:	2b80      	cmp	r3, #128	; 0x80
 8004c68:	d107      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f907 	bl	8004e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d10e      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d107      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f838 	bl	8004d16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d10e      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	d107      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f06f 0220 	mvn.w	r2, #32
 8004cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f8c7 	bl	8004e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a40      	ldr	r2, [pc, #256]	; (8004e40 <TIM_Base_SetConfig+0x114>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d013      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4a:	d00f      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a3d      	ldr	r2, [pc, #244]	; (8004e44 <TIM_Base_SetConfig+0x118>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a3c      	ldr	r2, [pc, #240]	; (8004e48 <TIM_Base_SetConfig+0x11c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d007      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a3b      	ldr	r2, [pc, #236]	; (8004e4c <TIM_Base_SetConfig+0x120>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a3a      	ldr	r2, [pc, #232]	; (8004e50 <TIM_Base_SetConfig+0x124>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d108      	bne.n	8004d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2f      	ldr	r2, [pc, #188]	; (8004e40 <TIM_Base_SetConfig+0x114>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01f      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8c:	d01b      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2c      	ldr	r2, [pc, #176]	; (8004e44 <TIM_Base_SetConfig+0x118>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d017      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a2b      	ldr	r2, [pc, #172]	; (8004e48 <TIM_Base_SetConfig+0x11c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a2a      	ldr	r2, [pc, #168]	; (8004e4c <TIM_Base_SetConfig+0x120>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00f      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a29      	ldr	r2, [pc, #164]	; (8004e50 <TIM_Base_SetConfig+0x124>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00b      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a28      	ldr	r2, [pc, #160]	; (8004e54 <TIM_Base_SetConfig+0x128>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d007      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a27      	ldr	r2, [pc, #156]	; (8004e58 <TIM_Base_SetConfig+0x12c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d003      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a26      	ldr	r2, [pc, #152]	; (8004e5c <TIM_Base_SetConfig+0x130>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d108      	bne.n	8004dd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a10      	ldr	r2, [pc, #64]	; (8004e40 <TIM_Base_SetConfig+0x114>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00f      	beq.n	8004e24 <TIM_Base_SetConfig+0xf8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <TIM_Base_SetConfig+0x124>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00b      	beq.n	8004e24 <TIM_Base_SetConfig+0xf8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a11      	ldr	r2, [pc, #68]	; (8004e54 <TIM_Base_SetConfig+0x128>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <TIM_Base_SetConfig+0xf8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a10      	ldr	r2, [pc, #64]	; (8004e58 <TIM_Base_SetConfig+0x12c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_Base_SetConfig+0xf8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a0f      	ldr	r2, [pc, #60]	; (8004e5c <TIM_Base_SetConfig+0x130>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d103      	bne.n	8004e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	615a      	str	r2, [r3, #20]
}
 8004e32:	bf00      	nop
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40012c00 	.word	0x40012c00
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40013400 	.word	0x40013400
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40014400 	.word	0x40014400
 8004e5c:	40014800 	.word	0x40014800

08004e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <__NVIC_SetPriority>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	6039      	str	r1, [r7, #0]
 8004ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	db0a      	blt.n	8004ec6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	490c      	ldr	r1, [pc, #48]	; (8004ee8 <__NVIC_SetPriority+0x4c>)
 8004eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eba:	0112      	lsls	r2, r2, #4
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ec4:	e00a      	b.n	8004edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	4908      	ldr	r1, [pc, #32]	; (8004eec <__NVIC_SetPriority+0x50>)
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	3b04      	subs	r3, #4
 8004ed4:	0112      	lsls	r2, r2, #4
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	440b      	add	r3, r1
 8004eda:	761a      	strb	r2, [r3, #24]
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	e000e100 	.word	0xe000e100
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ef4:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <SysTick_Handler+0x1c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ef8:	f001 ff44 	bl	8006d84 <xTaskGetSchedulerState>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d001      	beq.n	8004f06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f02:	f002 fd29 	bl	8007958 <xPortSysTickHandler>
  }
}
 8004f06:	bf00      	nop
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	e000e010 	.word	0xe000e010

08004f10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f14:	2100      	movs	r1, #0
 8004f16:	f06f 0004 	mvn.w	r0, #4
 8004f1a:	f7ff ffbf 	bl	8004e9c <__NVIC_SetPriority>
#endif
}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f2a:	f3ef 8305 	mrs	r3, IPSR
 8004f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f36:	f06f 0305 	mvn.w	r3, #5
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	e00c      	b.n	8004f58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <osKernelInitialize+0x44>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d105      	bne.n	8004f52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <osKernelInitialize+0x44>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	607b      	str	r3, [r7, #4]
 8004f50:	e002      	b.n	8004f58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004f52:	f04f 33ff 	mov.w	r3, #4294967295
 8004f56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f58:	687b      	ldr	r3, [r7, #4]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	200000dc 	.word	0x200000dc

08004f6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f72:	f3ef 8305 	mrs	r3, IPSR
 8004f76:	603b      	str	r3, [r7, #0]
  return(result);
 8004f78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f7e:	f06f 0305 	mvn.w	r3, #5
 8004f82:	607b      	str	r3, [r7, #4]
 8004f84:	e010      	b.n	8004fa8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <osKernelStart+0x48>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d109      	bne.n	8004fa2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f8e:	f7ff ffbf 	bl	8004f10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f92:	4b08      	ldr	r3, [pc, #32]	; (8004fb4 <osKernelStart+0x48>)
 8004f94:	2202      	movs	r2, #2
 8004f96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f98:	f001 faac 	bl	80064f4 <vTaskStartScheduler>
      stat = osOK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	607b      	str	r3, [r7, #4]
 8004fa0:	e002      	b.n	8004fa8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fa8:	687b      	ldr	r3, [r7, #4]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	200000dc 	.word	0x200000dc

08004fb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08e      	sub	sp, #56	; 0x38
 8004fbc:	af04      	add	r7, sp, #16
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fc8:	f3ef 8305 	mrs	r3, IPSR
 8004fcc:	617b      	str	r3, [r7, #20]
  return(result);
 8004fce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d17e      	bne.n	80050d2 <osThreadNew+0x11a>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d07b      	beq.n	80050d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004fda:	2380      	movs	r3, #128	; 0x80
 8004fdc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004fde:	2318      	movs	r3, #24
 8004fe0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d045      	beq.n	800507e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <osThreadNew+0x48>
        name = attr->name;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <osThreadNew+0x6e>
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	2b38      	cmp	r3, #56	; 0x38
 8005018:	d805      	bhi.n	8005026 <osThreadNew+0x6e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <osThreadNew+0x72>
        return (NULL);
 8005026:	2300      	movs	r3, #0
 8005028:	e054      	b.n	80050d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	089b      	lsrs	r3, r3, #2
 8005038:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00e      	beq.n	8005060 <osThreadNew+0xa8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	2b5b      	cmp	r3, #91	; 0x5b
 8005048:	d90a      	bls.n	8005060 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800504e:	2b00      	cmp	r3, #0
 8005050:	d006      	beq.n	8005060 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <osThreadNew+0xa8>
        mem = 1;
 800505a:	2301      	movs	r3, #1
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	e010      	b.n	8005082 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10c      	bne.n	8005082 <osThreadNew+0xca>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d108      	bne.n	8005082 <osThreadNew+0xca>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <osThreadNew+0xca>
          mem = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	61bb      	str	r3, [r7, #24]
 800507c:	e001      	b.n	8005082 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d110      	bne.n	80050aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005090:	9202      	str	r2, [sp, #8]
 8005092:	9301      	str	r3, [sp, #4]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6a3a      	ldr	r2, [r7, #32]
 800509c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f001 f852 	bl	8006148 <xTaskCreateStatic>
 80050a4:	4603      	mov	r3, r0
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	e013      	b.n	80050d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d110      	bne.n	80050d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	f107 0310 	add.w	r3, r7, #16
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f001 f89d 	bl	8006202 <xTaskCreate>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d001      	beq.n	80050d2 <osThreadNew+0x11a>
            hTask = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050d2:	693b      	ldr	r3, [r7, #16]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3728      	adds	r7, #40	; 0x28
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e4:	f3ef 8305 	mrs	r3, IPSR
 80050e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80050ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <osDelay+0x1c>
    stat = osErrorISR;
 80050f0:	f06f 0305 	mvn.w	r3, #5
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	e007      	b.n	8005108 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f001 f9c2 	bl	800648c <vTaskDelay>
    }
  }

  return (stat);
 8005108:	68fb      	ldr	r3, [r7, #12]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005112:	b580      	push	{r7, lr}
 8005114:	b08a      	sub	sp, #40	; 0x28
 8005116:	af02      	add	r7, sp, #8
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005122:	f3ef 8305 	mrs	r3, IPSR
 8005126:	613b      	str	r3, [r7, #16]
  return(result);
 8005128:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800512a:	2b00      	cmp	r3, #0
 800512c:	d15f      	bne.n	80051ee <osMessageQueueNew+0xdc>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d05c      	beq.n	80051ee <osMessageQueueNew+0xdc>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d059      	beq.n	80051ee <osMessageQueueNew+0xdc>
    mem = -1;
 800513a:	f04f 33ff 	mov.w	r3, #4294967295
 800513e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d029      	beq.n	800519a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d012      	beq.n	8005174 <osMessageQueueNew+0x62>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	2b4f      	cmp	r3, #79	; 0x4f
 8005154:	d90e      	bls.n	8005174 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695a      	ldr	r2, [r3, #20]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	429a      	cmp	r2, r3
 800516c:	d302      	bcc.n	8005174 <osMessageQueueNew+0x62>
        mem = 1;
 800516e:	2301      	movs	r3, #1
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	e014      	b.n	800519e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d110      	bne.n	800519e <osMessageQueueNew+0x8c>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10c      	bne.n	800519e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005188:	2b00      	cmp	r3, #0
 800518a:	d108      	bne.n	800519e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <osMessageQueueNew+0x8c>
          mem = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	e001      	b.n	800519e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d10b      	bne.n	80051bc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2100      	movs	r1, #0
 80051ae:	9100      	str	r1, [sp, #0]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fa4e 	bl	8005654 <xQueueGenericCreateStatic>
 80051b8:	61f8      	str	r0, [r7, #28]
 80051ba:	e008      	b.n	80051ce <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80051c2:	2200      	movs	r2, #0
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 fabc 	bl	8005744 <xQueueGenericCreate>
 80051cc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00c      	beq.n	80051ee <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	e001      	b.n	80051e6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80051e6:	6979      	ldr	r1, [r7, #20]
 80051e8:	69f8      	ldr	r0, [r7, #28]
 80051ea:	f000 ff4f 	bl	800608c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80051ee:	69fb      	ldr	r3, [r7, #28]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3720      	adds	r7, #32
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	4613      	mov	r3, r2
 8005206:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800520c:	2300      	movs	r3, #0
 800520e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005210:	f3ef 8305 	mrs	r3, IPSR
 8005214:	617b      	str	r3, [r7, #20]
  return(result);
 8005216:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005218:	2b00      	cmp	r3, #0
 800521a:	d028      	beq.n	800526e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <osMessageQueuePut+0x36>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <osMessageQueuePut+0x36>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800522e:	f06f 0303 	mvn.w	r3, #3
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	e038      	b.n	80052a8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800523a:	f107 0210 	add.w	r2, r7, #16
 800523e:	2300      	movs	r3, #0
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	69b8      	ldr	r0, [r7, #24]
 8005244:	f000 fbda 	bl	80059fc <xQueueGenericSendFromISR>
 8005248:	4603      	mov	r3, r0
 800524a:	2b01      	cmp	r3, #1
 800524c:	d003      	beq.n	8005256 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800524e:	f06f 0302 	mvn.w	r3, #2
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	e028      	b.n	80052a8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d025      	beq.n	80052a8 <osMessageQueuePut+0xb0>
 800525c:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <osMessageQueuePut+0xbc>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	e01c      	b.n	80052a8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <osMessageQueuePut+0x82>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800527a:	f06f 0303 	mvn.w	r3, #3
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	e012      	b.n	80052a8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005282:	2300      	movs	r3, #0
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	69b8      	ldr	r0, [r7, #24]
 800528a:	f000 fab9 	bl	8005800 <xQueueGenericSend>
 800528e:	4603      	mov	r3, r0
 8005290:	2b01      	cmp	r3, #1
 8005292:	d009      	beq.n	80052a8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800529a:	f06f 0301 	mvn.w	r3, #1
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	e002      	b.n	80052a8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80052a2:	f06f 0302 	mvn.w	r3, #2
 80052a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80052a8:	69fb      	ldr	r3, [r7, #28]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052ce:	f3ef 8305 	mrs	r3, IPSR
 80052d2:	617b      	str	r3, [r7, #20]
  return(result);
 80052d4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d028      	beq.n	800532c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <osMessageQueueGet+0x34>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <osMessageQueueGet+0x34>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80052ec:	f06f 0303 	mvn.w	r3, #3
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	e037      	b.n	8005364 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80052f8:	f107 0310 	add.w	r3, r7, #16
 80052fc:	461a      	mov	r2, r3
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	69b8      	ldr	r0, [r7, #24]
 8005302:	f000 fcf7 	bl	8005cf4 <xQueueReceiveFromISR>
 8005306:	4603      	mov	r3, r0
 8005308:	2b01      	cmp	r3, #1
 800530a:	d003      	beq.n	8005314 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800530c:	f06f 0302 	mvn.w	r3, #2
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	e027      	b.n	8005364 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d024      	beq.n	8005364 <osMessageQueueGet+0xac>
 800531a:	4b15      	ldr	r3, [pc, #84]	; (8005370 <osMessageQueueGet+0xb8>)
 800531c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	e01b      	b.n	8005364 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <osMessageQueueGet+0x80>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d103      	bne.n	8005340 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005338:	f06f 0303 	mvn.w	r3, #3
 800533c:	61fb      	str	r3, [r7, #28]
 800533e:	e011      	b.n	8005364 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	69b8      	ldr	r0, [r7, #24]
 8005346:	f000 fbf5 	bl	8005b34 <xQueueReceive>
 800534a:	4603      	mov	r3, r0
 800534c:	2b01      	cmp	r3, #1
 800534e:	d009      	beq.n	8005364 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005356:	f06f 0301 	mvn.w	r3, #1
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	e002      	b.n	8005364 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800535e:	f06f 0302 	mvn.w	r3, #2
 8005362:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005364:	69fb      	ldr	r3, [r7, #28]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3720      	adds	r7, #32
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	e000ed04 	.word	0xe000ed04

08005374 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d102      	bne.n	800538c <osMessageQueueGetCount+0x18>
    count = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e00e      	b.n	80053aa <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800538c:	f3ef 8305 	mrs	r3, IPSR
 8005390:	60fb      	str	r3, [r7, #12]
  return(result);
 8005392:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005398:	6938      	ldr	r0, [r7, #16]
 800539a:	f000 fd49 	bl	8005e30 <uxQueueMessagesWaitingFromISR>
 800539e:	6178      	str	r0, [r7, #20]
 80053a0:	e003      	b.n	80053aa <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80053a2:	6938      	ldr	r0, [r7, #16]
 80053a4:	f000 fd26 	bl	8005df4 <uxQueueMessagesWaiting>
 80053a8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80053aa:	697b      	ldr	r3, [r7, #20]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4a07      	ldr	r2, [pc, #28]	; (80053e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80053c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	4a06      	ldr	r2, [pc, #24]	; (80053e4 <vApplicationGetIdleTaskMemory+0x30>)
 80053ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2280      	movs	r2, #128	; 0x80
 80053d0:	601a      	str	r2, [r3, #0]
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	200000e0 	.word	0x200000e0
 80053e4:	2000013c 	.word	0x2000013c

080053e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4a07      	ldr	r2, [pc, #28]	; (8005414 <vApplicationGetTimerTaskMemory+0x2c>)
 80053f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	4a06      	ldr	r2, [pc, #24]	; (8005418 <vApplicationGetTimerTaskMemory+0x30>)
 80053fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005406:	601a      	str	r2, [r3, #0]
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	2000033c 	.word	0x2000033c
 8005418:	20000398 	.word	0x20000398

0800541c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f103 0208 	add.w	r2, r3, #8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f04f 32ff 	mov.w	r2, #4294967295
 8005434:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f103 0208 	add.w	r2, r3, #8
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f103 0208 	add.w	r2, r3, #8
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	601a      	str	r2, [r3, #0]
}
 80054b2:	bf00      	nop
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d4:	d103      	bne.n	80054de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	e00c      	b.n	80054f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3308      	adds	r3, #8
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	e002      	b.n	80054ec <vListInsert+0x2e>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d2f6      	bcs.n	80054e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	601a      	str	r2, [r3, #0]
}
 8005524:	bf00      	nop
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6892      	ldr	r2, [r2, #8]
 8005546:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6852      	ldr	r2, [r2, #4]
 8005550:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	429a      	cmp	r2, r3
 800555a:	d103      	bne.n	8005564 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	1e5a      	subs	r2, r3, #1
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80055ae:	f002 f941 	bl	8007834 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	68f9      	ldr	r1, [r7, #12]
 80055bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	441a      	add	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	3b01      	subs	r3, #1
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	441a      	add	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	22ff      	movs	r2, #255	; 0xff
 80055f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	22ff      	movs	r2, #255	; 0xff
 80055fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d114      	bne.n	800562e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01a      	beq.n	8005642 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3310      	adds	r3, #16
 8005610:	4618      	mov	r0, r3
 8005612:	f001 f9f9 	bl	8006a08 <xTaskRemoveFromEventList>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d012      	beq.n	8005642 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800561c:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <xQueueGenericReset+0xcc>)
 800561e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	e009      	b.n	8005642 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3310      	adds	r3, #16
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff fef2 	bl	800541c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3324      	adds	r3, #36	; 0x24
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff feed 	bl	800541c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005642:	f002 f927 	bl	8007894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005646:	2301      	movs	r3, #1
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08e      	sub	sp, #56	; 0x38
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <xQueueGenericCreateStatic+0x52>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <xQueueGenericCreateStatic+0x56>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <xQueueGenericCreateStatic+0x58>
 80056aa:	2300      	movs	r3, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	623b      	str	r3, [r7, #32]
}
 80056c2:	bf00      	nop
 80056c4:	e7fe      	b.n	80056c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <xQueueGenericCreateStatic+0x7e>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <xQueueGenericCreateStatic+0x82>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <xQueueGenericCreateStatic+0x84>
 80056d6:	2300      	movs	r3, #0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	61fb      	str	r3, [r7, #28]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056f2:	2350      	movs	r3, #80	; 0x50
 80056f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b50      	cmp	r3, #80	; 0x50
 80056fa:	d00a      	beq.n	8005712 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	61bb      	str	r3, [r7, #24]
}
 800570e:	bf00      	nop
 8005710:	e7fe      	b.n	8005710 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005712:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00d      	beq.n	800573a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005726:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	4613      	mov	r3, r2
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f83f 	bl	80057b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800573c:	4618      	mov	r0, r3
 800573e:	3730      	adds	r7, #48	; 0x30
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08a      	sub	sp, #40	; 0x28
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	4613      	mov	r3, r2
 8005750:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	613b      	str	r3, [r7, #16]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	fb02 f303 	mul.w	r3, r2, r3
 8005776:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	3350      	adds	r3, #80	; 0x50
 800577c:	4618      	mov	r0, r3
 800577e:	f002 f97b 	bl	8007a78 <pvPortMalloc>
 8005782:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d011      	beq.n	80057ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	3350      	adds	r3, #80	; 0x50
 8005792:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800579c:	79fa      	ldrb	r2, [r7, #7]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	4613      	mov	r3, r2
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f805 	bl	80057b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057ae:	69bb      	ldr	r3, [r7, #24]
	}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d103      	bne.n	80057d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e002      	b.n	80057da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057e6:	2101      	movs	r1, #1
 80057e8:	69b8      	ldr	r0, [r7, #24]
 80057ea:	f7ff fecb 	bl	8005584 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	78fa      	ldrb	r2, [r7, #3]
 80057f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08e      	sub	sp, #56	; 0x38
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800580e:	2300      	movs	r3, #0
 8005810:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <xQueueGenericSend+0x32>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d103      	bne.n	8005840 <xQueueGenericSend+0x40>
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <xQueueGenericSend+0x44>
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <xQueueGenericSend+0x46>
 8005844:	2300      	movs	r3, #0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <xQueueGenericSend+0x60>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800585c:	bf00      	nop
 800585e:	e7fe      	b.n	800585e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d103      	bne.n	800586e <xQueueGenericSend+0x6e>
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <xQueueGenericSend+0x72>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <xQueueGenericSend+0x74>
 8005872:	2300      	movs	r3, #0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <xQueueGenericSend+0x8e>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	623b      	str	r3, [r7, #32]
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800588e:	f001 fa79 	bl	8006d84 <xTaskGetSchedulerState>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d102      	bne.n	800589e <xQueueGenericSend+0x9e>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <xQueueGenericSend+0xa2>
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <xQueueGenericSend+0xa4>
 80058a2:	2300      	movs	r3, #0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <xQueueGenericSend+0xbe>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	61fb      	str	r3, [r7, #28]
}
 80058ba:	bf00      	nop
 80058bc:	e7fe      	b.n	80058bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058be:	f001 ffb9 	bl	8007834 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d302      	bcc.n	80058d4 <xQueueGenericSend+0xd4>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d129      	bne.n	8005928 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058da:	f000 fac7 	bl	8005e6c <prvCopyDataToQueue>
 80058de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d010      	beq.n	800590a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	3324      	adds	r3, #36	; 0x24
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 f88b 	bl	8006a08 <xTaskRemoveFromEventList>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d013      	beq.n	8005920 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058f8:	4b3f      	ldr	r3, [pc, #252]	; (80059f8 <xQueueGenericSend+0x1f8>)
 80058fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	e00a      	b.n	8005920 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590c:	2b00      	cmp	r3, #0
 800590e:	d007      	beq.n	8005920 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005910:	4b39      	ldr	r3, [pc, #228]	; (80059f8 <xQueueGenericSend+0x1f8>)
 8005912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005920:	f001 ffb8 	bl	8007894 <vPortExitCritical>
				return pdPASS;
 8005924:	2301      	movs	r3, #1
 8005926:	e063      	b.n	80059f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d103      	bne.n	8005936 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800592e:	f001 ffb1 	bl	8007894 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005932:	2300      	movs	r3, #0
 8005934:	e05c      	b.n	80059f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005938:	2b00      	cmp	r3, #0
 800593a:	d106      	bne.n	800594a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800593c:	f107 0314 	add.w	r3, r7, #20
 8005940:	4618      	mov	r0, r3
 8005942:	f001 f8c5 	bl	8006ad0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005946:	2301      	movs	r3, #1
 8005948:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800594a:	f001 ffa3 	bl	8007894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800594e:	f000 fe37 	bl	80065c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005952:	f001 ff6f 	bl	8007834 <vPortEnterCritical>
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800595c:	b25b      	sxtb	r3, r3
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	d103      	bne.n	800596c <xQueueGenericSend+0x16c>
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005972:	b25b      	sxtb	r3, r3
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d103      	bne.n	8005982 <xQueueGenericSend+0x182>
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005982:	f001 ff87 	bl	8007894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005986:	1d3a      	adds	r2, r7, #4
 8005988:	f107 0314 	add.w	r3, r7, #20
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f001 f8b4 	bl	8006afc <xTaskCheckForTimeOut>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d124      	bne.n	80059e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800599a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800599c:	f000 fb5e 	bl	800605c <prvIsQueueFull>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d018      	beq.n	80059d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	3310      	adds	r3, #16
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	4611      	mov	r1, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 ffda 	bl	8006968 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b6:	f000 fae9 	bl	8005f8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059ba:	f000 fe0f 	bl	80065dc <xTaskResumeAll>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f47f af7c 	bne.w	80058be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80059c6:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <xQueueGenericSend+0x1f8>)
 80059c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	e772      	b.n	80058be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059da:	f000 fad7 	bl	8005f8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059de:	f000 fdfd 	bl	80065dc <xTaskResumeAll>
 80059e2:	e76c      	b.n	80058be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059e6:	f000 fad1 	bl	8005f8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059ea:	f000 fdf7 	bl	80065dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3738      	adds	r7, #56	; 0x38
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	e000ed04 	.word	0xe000ed04

080059fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b090      	sub	sp, #64	; 0x40
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d103      	bne.n	8005a38 <xQueueGenericSendFromISR+0x3c>
 8005a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <xQueueGenericSendFromISR+0x40>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <xQueueGenericSendFromISR+0x42>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d103      	bne.n	8005a66 <xQueueGenericSendFromISR+0x6a>
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <xQueueGenericSendFromISR+0x6e>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <xQueueGenericSendFromISR+0x70>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	623b      	str	r3, [r7, #32]
}
 8005a82:	bf00      	nop
 8005a84:	e7fe      	b.n	8005a84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a86:	f001 ffb7 	bl	80079f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a8a:	f3ef 8211 	mrs	r2, BASEPRI
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	61fa      	str	r2, [r7, #28]
 8005aa0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aa4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d302      	bcc.n	8005ab8 <xQueueGenericSendFromISR+0xbc>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d12f      	bne.n	8005b18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	68b9      	ldr	r1, [r7, #8]
 8005acc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ace:	f000 f9cd 	bl	8005e6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ad2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d112      	bne.n	8005b02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d016      	beq.n	8005b12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	3324      	adds	r3, #36	; 0x24
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 ff8d 	bl	8006a08 <xTaskRemoveFromEventList>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00e      	beq.n	8005b12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00b      	beq.n	8005b12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e007      	b.n	8005b12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b06:	3301      	adds	r3, #1
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	b25a      	sxtb	r2, r3
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b12:	2301      	movs	r3, #1
 8005b14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005b16:	e001      	b.n	8005b1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3740      	adds	r7, #64	; 0x40
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08c      	sub	sp, #48	; 0x30
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b40:	2300      	movs	r3, #0
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <xQueueReceive+0x30>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	623b      	str	r3, [r7, #32]
}
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <xQueueReceive+0x3e>
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <xQueueReceive+0x42>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <xQueueReceive+0x44>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xQueueReceive+0x5e>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	61fb      	str	r3, [r7, #28]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b92:	f001 f8f7 	bl	8006d84 <xTaskGetSchedulerState>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d102      	bne.n	8005ba2 <xQueueReceive+0x6e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <xQueueReceive+0x72>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <xQueueReceive+0x74>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <xQueueReceive+0x8e>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	61bb      	str	r3, [r7, #24]
}
 8005bbe:	bf00      	nop
 8005bc0:	e7fe      	b.n	8005bc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bc2:	f001 fe37 	bl	8007834 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01f      	beq.n	8005c12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd6:	f000 f9b3 	bl	8005f40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	1e5a      	subs	r2, r3, #1
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00f      	beq.n	8005c0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	3310      	adds	r3, #16
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 ff0a 	bl	8006a08 <xTaskRemoveFromEventList>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bfa:	4b3d      	ldr	r3, [pc, #244]	; (8005cf0 <xQueueReceive+0x1bc>)
 8005bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c0a:	f001 fe43 	bl	8007894 <vPortExitCritical>
				return pdPASS;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e069      	b.n	8005ce6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d103      	bne.n	8005c20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c18:	f001 fe3c 	bl	8007894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e062      	b.n	8005ce6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c26:	f107 0310 	add.w	r3, r7, #16
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 ff50 	bl	8006ad0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c30:	2301      	movs	r3, #1
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c34:	f001 fe2e 	bl	8007894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c38:	f000 fcc2 	bl	80065c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c3c:	f001 fdfa 	bl	8007834 <vPortEnterCritical>
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c46:	b25b      	sxtb	r3, r3
 8005c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4c:	d103      	bne.n	8005c56 <xQueueReceive+0x122>
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c5c:	b25b      	sxtb	r3, r3
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d103      	bne.n	8005c6c <xQueueReceive+0x138>
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c6c:	f001 fe12 	bl	8007894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c70:	1d3a      	adds	r2, r7, #4
 8005c72:	f107 0310 	add.w	r3, r7, #16
 8005c76:	4611      	mov	r1, r2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 ff3f 	bl	8006afc <xTaskCheckForTimeOut>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d123      	bne.n	8005ccc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c86:	f000 f9d3 	bl	8006030 <prvIsQueueEmpty>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d017      	beq.n	8005cc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	3324      	adds	r3, #36	; 0x24
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4611      	mov	r1, r2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fe65 	bl	8006968 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca0:	f000 f974 	bl	8005f8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ca4:	f000 fc9a 	bl	80065dc <xTaskResumeAll>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d189      	bne.n	8005bc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005cae:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <xQueueReceive+0x1bc>)
 8005cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	e780      	b.n	8005bc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cc2:	f000 f963 	bl	8005f8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cc6:	f000 fc89 	bl	80065dc <xTaskResumeAll>
 8005cca:	e77a      	b.n	8005bc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cce:	f000 f95d 	bl	8005f8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cd2:	f000 fc83 	bl	80065dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd8:	f000 f9aa 	bl	8006030 <prvIsQueueEmpty>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f43f af6f 	beq.w	8005bc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ce4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3730      	adds	r7, #48	; 0x30
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	e000ed04 	.word	0xe000ed04

08005cf4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08e      	sub	sp, #56	; 0x38
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10a      	bne.n	8005d20 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	623b      	str	r3, [r7, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d103      	bne.n	8005d2e <xQueueReceiveFromISR+0x3a>
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <xQueueReceiveFromISR+0x3e>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <xQueueReceiveFromISR+0x40>
 8005d32:	2300      	movs	r3, #0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	61fb      	str	r3, [r7, #28]
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d4e:	f001 fe53 	bl	80079f8 <vPortValidateInterruptPriority>
	__asm volatile
 8005d52:	f3ef 8211 	mrs	r2, BASEPRI
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	61ba      	str	r2, [r7, #24]
 8005d68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d02f      	beq.n	8005dda <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d88:	f000 f8da 	bl	8005f40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	1e5a      	subs	r2, r3, #1
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d112      	bne.n	8005dc4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d016      	beq.n	8005dd4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	3310      	adds	r3, #16
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fe2c 	bl	8006a08 <xTaskRemoveFromEventList>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00e      	beq.n	8005dd4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00b      	beq.n	8005dd4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e007      	b.n	8005dd4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dc8:	3301      	adds	r3, #1
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	b25a      	sxtb	r2, r3
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd8:	e001      	b.n	8005dde <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f383 8811 	msr	BASEPRI, r3
}
 8005de8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3738      	adds	r7, #56	; 0x38
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	60bb      	str	r3, [r7, #8]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005e18:	f001 fd0c 	bl	8007834 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005e22:	f001 fd37 	bl	8007894 <vPortExitCritical>

	return uxReturn;
 8005e26:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10a      	bne.n	8005e58 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	60fb      	str	r3, [r7, #12]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005e5e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e60:	4618      	mov	r0, r3
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10d      	bne.n	8005ea6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d14d      	bne.n	8005f2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 ff92 	bl	8006dc0 <xTaskPriorityDisinherit>
 8005e9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	609a      	str	r2, [r3, #8]
 8005ea4:	e043      	b.n	8005f2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d119      	bne.n	8005ee0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6858      	ldr	r0, [r3, #4]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	f003 fe40 	bl	8009b3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec4:	441a      	add	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d32b      	bcc.n	8005f2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	605a      	str	r2, [r3, #4]
 8005ede:	e026      	b.n	8005f2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68d8      	ldr	r0, [r3, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	461a      	mov	r2, r3
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	f003 fe26 	bl	8009b3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	425b      	negs	r3, r3
 8005efa:	441a      	add	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d207      	bcs.n	8005f1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	425b      	negs	r3, r3
 8005f16:	441a      	add	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d105      	bne.n	8005f2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f36:	697b      	ldr	r3, [r7, #20]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d018      	beq.n	8005f84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	441a      	add	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d303      	bcc.n	8005f74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68d9      	ldr	r1, [r3, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6838      	ldr	r0, [r7, #0]
 8005f80:	f003 fddc 	bl	8009b3c <memcpy>
	}
}
 8005f84:	bf00      	nop
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f94:	f001 fc4e 	bl	8007834 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fa0:	e011      	b.n	8005fc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d012      	beq.n	8005fd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3324      	adds	r3, #36	; 0x24
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fd2a 	bl	8006a08 <xTaskRemoveFromEventList>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fba:	f000 fe01 	bl	8006bc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	dce9      	bgt.n	8005fa2 <prvUnlockQueue+0x16>
 8005fce:	e000      	b.n	8005fd2 <prvUnlockQueue+0x46>
					break;
 8005fd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	22ff      	movs	r2, #255	; 0xff
 8005fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fda:	f001 fc5b 	bl	8007894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fde:	f001 fc29 	bl	8007834 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fe8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fea:	e011      	b.n	8006010 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d012      	beq.n	800601a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3310      	adds	r3, #16
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fd05 	bl	8006a08 <xTaskRemoveFromEventList>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006004:	f000 fddc 	bl	8006bc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006008:	7bbb      	ldrb	r3, [r7, #14]
 800600a:	3b01      	subs	r3, #1
 800600c:	b2db      	uxtb	r3, r3
 800600e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006014:	2b00      	cmp	r3, #0
 8006016:	dce9      	bgt.n	8005fec <prvUnlockQueue+0x60>
 8006018:	e000      	b.n	800601c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800601a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	22ff      	movs	r2, #255	; 0xff
 8006020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006024:	f001 fc36 	bl	8007894 <vPortExitCritical>
}
 8006028:	bf00      	nop
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006038:	f001 fbfc 	bl	8007834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	2b00      	cmp	r3, #0
 8006042:	d102      	bne.n	800604a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006044:	2301      	movs	r3, #1
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	e001      	b.n	800604e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800604e:	f001 fc21 	bl	8007894 <vPortExitCritical>

	return xReturn;
 8006052:	68fb      	ldr	r3, [r7, #12]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006064:	f001 fbe6 	bl	8007834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006070:	429a      	cmp	r2, r3
 8006072:	d102      	bne.n	800607a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006074:	2301      	movs	r3, #1
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	e001      	b.n	800607e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800607e:	f001 fc09 	bl	8007894 <vPortExitCritical>

	return xReturn;
 8006082:	68fb      	ldr	r3, [r7, #12]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	e014      	b.n	80060c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800609c:	4a0f      	ldr	r2, [pc, #60]	; (80060dc <vQueueAddToRegistry+0x50>)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10b      	bne.n	80060c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060a8:	490c      	ldr	r1, [pc, #48]	; (80060dc <vQueueAddToRegistry+0x50>)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060b2:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <vQueueAddToRegistry+0x50>)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	4413      	add	r3, r2
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060be:	e006      	b.n	80060ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3301      	adds	r3, #1
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b07      	cmp	r3, #7
 80060ca:	d9e7      	bls.n	800609c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	2000324c 	.word	0x2000324c

080060e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060f0:	f001 fba0 	bl	8007834 <vPortEnterCritical>
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060fa:	b25b      	sxtb	r3, r3
 80060fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006100:	d103      	bne.n	800610a <vQueueWaitForMessageRestricted+0x2a>
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006110:	b25b      	sxtb	r3, r3
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d103      	bne.n	8006120 <vQueueWaitForMessageRestricted+0x40>
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006120:	f001 fbb8 	bl	8007894 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	3324      	adds	r3, #36	; 0x24
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fc3b 	bl	80069b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800613a:	6978      	ldr	r0, [r7, #20]
 800613c:	f7ff ff26 	bl	8005f8c <prvUnlockQueue>
	}
 8006140:	bf00      	nop
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08e      	sub	sp, #56	; 0x38
 800614c:	af04      	add	r7, sp, #16
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <xTaskCreateStatic+0x2a>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	623b      	str	r3, [r7, #32]
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <xTaskCreateStatic+0x46>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	61fb      	str	r3, [r7, #28]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800618e:	235c      	movs	r3, #92	; 0x5c
 8006190:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b5c      	cmp	r3, #92	; 0x5c
 8006196:	d00a      	beq.n	80061ae <xTaskCreateStatic+0x66>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	61bb      	str	r3, [r7, #24]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d01e      	beq.n	80061f4 <xTaskCreateStatic+0xac>
 80061b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01b      	beq.n	80061f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061ce:	2300      	movs	r3, #0
 80061d0:	9303      	str	r3, [sp, #12]
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	9302      	str	r3, [sp, #8]
 80061d6:	f107 0314 	add.w	r3, r7, #20
 80061da:	9301      	str	r3, [sp, #4]
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 f850 	bl	800628c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061ee:	f000 f8dd 	bl	80063ac <prvAddNewTaskToReadyList>
 80061f2:	e001      	b.n	80061f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061f8:	697b      	ldr	r3, [r7, #20]
	}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3728      	adds	r7, #40	; 0x28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006202:	b580      	push	{r7, lr}
 8006204:	b08c      	sub	sp, #48	; 0x30
 8006206:	af04      	add	r7, sp, #16
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	603b      	str	r3, [r7, #0]
 800620e:	4613      	mov	r3, r2
 8006210:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4618      	mov	r0, r3
 8006218:	f001 fc2e 	bl	8007a78 <pvPortMalloc>
 800621c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00e      	beq.n	8006242 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006224:	205c      	movs	r0, #92	; 0x5c
 8006226:	f001 fc27 	bl	8007a78 <pvPortMalloc>
 800622a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	631a      	str	r2, [r3, #48]	; 0x30
 8006238:	e005      	b.n	8006246 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800623a:	6978      	ldr	r0, [r7, #20]
 800623c:	f001 fce8 	bl	8007c10 <vPortFree>
 8006240:	e001      	b.n	8006246 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006242:	2300      	movs	r3, #0
 8006244:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d017      	beq.n	800627c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	2300      	movs	r3, #0
 8006258:	9303      	str	r3, [sp, #12]
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	9302      	str	r3, [sp, #8]
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f80e 	bl	800628c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006270:	69f8      	ldr	r0, [r7, #28]
 8006272:	f000 f89b 	bl	80063ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006276:	2301      	movs	r3, #1
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	e002      	b.n	8006282 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800627c:	f04f 33ff 	mov.w	r3, #4294967295
 8006280:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006282:	69bb      	ldr	r3, [r7, #24]
	}
 8006284:	4618      	mov	r0, r3
 8006286:	3720      	adds	r7, #32
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b088      	sub	sp, #32
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	461a      	mov	r2, r3
 80062a4:	21a5      	movs	r1, #165	; 0xa5
 80062a6:	f003 fc57 	bl	8009b58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062b4:	3b01      	subs	r3, #1
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f023 0307 	bic.w	r3, r3, #7
 80062c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	617b      	str	r3, [r7, #20]
}
 80062e0:	bf00      	nop
 80062e2:	e7fe      	b.n	80062e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01f      	beq.n	800632a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062ea:	2300      	movs	r3, #0
 80062ec:	61fb      	str	r3, [r7, #28]
 80062ee:	e012      	b.n	8006316 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	7819      	ldrb	r1, [r3, #0]
 80062f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	3334      	adds	r3, #52	; 0x34
 8006300:	460a      	mov	r2, r1
 8006302:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	4413      	add	r3, r2
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d006      	beq.n	800631e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	3301      	adds	r3, #1
 8006314:	61fb      	str	r3, [r7, #28]
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	2b0f      	cmp	r3, #15
 800631a:	d9e9      	bls.n	80062f0 <prvInitialiseNewTask+0x64>
 800631c:	e000      	b.n	8006320 <prvInitialiseNewTask+0x94>
			{
				break;
 800631e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006328:	e003      	b.n	8006332 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	2b37      	cmp	r3, #55	; 0x37
 8006336:	d901      	bls.n	800633c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006338:	2337      	movs	r3, #55	; 0x37
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006340:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006346:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	2200      	movs	r2, #0
 800634c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	3304      	adds	r3, #4
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff f882 	bl	800545c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	3318      	adds	r3, #24
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff f87d 	bl	800545c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006366:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006376:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	2200      	movs	r2, #0
 800637c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	68f9      	ldr	r1, [r7, #12]
 800638a:	69b8      	ldr	r0, [r7, #24]
 800638c:	f001 f928 	bl	80075e0 <pxPortInitialiseStack>
 8006390:	4602      	mov	r2, r0
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a2:	bf00      	nop
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063b4:	f001 fa3e 	bl	8007834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063b8:	4b2d      	ldr	r3, [pc, #180]	; (8006470 <prvAddNewTaskToReadyList+0xc4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3301      	adds	r3, #1
 80063be:	4a2c      	ldr	r2, [pc, #176]	; (8006470 <prvAddNewTaskToReadyList+0xc4>)
 80063c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063c2:	4b2c      	ldr	r3, [pc, #176]	; (8006474 <prvAddNewTaskToReadyList+0xc8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063ca:	4a2a      	ldr	r2, [pc, #168]	; (8006474 <prvAddNewTaskToReadyList+0xc8>)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063d0:	4b27      	ldr	r3, [pc, #156]	; (8006470 <prvAddNewTaskToReadyList+0xc4>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d110      	bne.n	80063fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063d8:	f000 fc16 	bl	8006c08 <prvInitialiseTaskLists>
 80063dc:	e00d      	b.n	80063fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063de:	4b26      	ldr	r3, [pc, #152]	; (8006478 <prvAddNewTaskToReadyList+0xcc>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063e6:	4b23      	ldr	r3, [pc, #140]	; (8006474 <prvAddNewTaskToReadyList+0xc8>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d802      	bhi.n	80063fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063f4:	4a1f      	ldr	r2, [pc, #124]	; (8006474 <prvAddNewTaskToReadyList+0xc8>)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063fa:	4b20      	ldr	r3, [pc, #128]	; (800647c <prvAddNewTaskToReadyList+0xd0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3301      	adds	r3, #1
 8006400:	4a1e      	ldr	r2, [pc, #120]	; (800647c <prvAddNewTaskToReadyList+0xd0>)
 8006402:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006404:	4b1d      	ldr	r3, [pc, #116]	; (800647c <prvAddNewTaskToReadyList+0xd0>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006410:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <prvAddNewTaskToReadyList+0xd4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	429a      	cmp	r2, r3
 8006416:	d903      	bls.n	8006420 <prvAddNewTaskToReadyList+0x74>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	4a18      	ldr	r2, [pc, #96]	; (8006480 <prvAddNewTaskToReadyList+0xd4>)
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4a15      	ldr	r2, [pc, #84]	; (8006484 <prvAddNewTaskToReadyList+0xd8>)
 800642e:	441a      	add	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3304      	adds	r3, #4
 8006434:	4619      	mov	r1, r3
 8006436:	4610      	mov	r0, r2
 8006438:	f7ff f81d 	bl	8005476 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800643c:	f001 fa2a 	bl	8007894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006440:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <prvAddNewTaskToReadyList+0xcc>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00e      	beq.n	8006466 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <prvAddNewTaskToReadyList+0xc8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006452:	429a      	cmp	r2, r3
 8006454:	d207      	bcs.n	8006466 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006456:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <prvAddNewTaskToReadyList+0xdc>)
 8006458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006466:	bf00      	nop
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000c6c 	.word	0x20000c6c
 8006474:	20000798 	.word	0x20000798
 8006478:	20000c78 	.word	0x20000c78
 800647c:	20000c88 	.word	0x20000c88
 8006480:	20000c74 	.word	0x20000c74
 8006484:	2000079c 	.word	0x2000079c
 8006488:	e000ed04 	.word	0xe000ed04

0800648c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d017      	beq.n	80064ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800649e:	4b13      	ldr	r3, [pc, #76]	; (80064ec <vTaskDelay+0x60>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <vTaskDelay+0x30>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	60bb      	str	r3, [r7, #8]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064bc:	f000 f880 	bl	80065c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064c0:	2100      	movs	r1, #0
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fcea 	bl	8006e9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064c8:	f000 f888 	bl	80065dc <xTaskResumeAll>
 80064cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d107      	bne.n	80064e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064d4:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <vTaskDelay+0x64>)
 80064d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064e4:	bf00      	nop
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	20000c94 	.word	0x20000c94
 80064f0:	e000ed04 	.word	0xe000ed04

080064f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08a      	sub	sp, #40	; 0x28
 80064f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006502:	463a      	mov	r2, r7
 8006504:	1d39      	adds	r1, r7, #4
 8006506:	f107 0308 	add.w	r3, r7, #8
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe ff52 	bl	80053b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	9202      	str	r2, [sp, #8]
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	2300      	movs	r3, #0
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	2300      	movs	r3, #0
 8006520:	460a      	mov	r2, r1
 8006522:	4921      	ldr	r1, [pc, #132]	; (80065a8 <vTaskStartScheduler+0xb4>)
 8006524:	4821      	ldr	r0, [pc, #132]	; (80065ac <vTaskStartScheduler+0xb8>)
 8006526:	f7ff fe0f 	bl	8006148 <xTaskCreateStatic>
 800652a:	4603      	mov	r3, r0
 800652c:	4a20      	ldr	r2, [pc, #128]	; (80065b0 <vTaskStartScheduler+0xbc>)
 800652e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006530:	4b1f      	ldr	r3, [pc, #124]	; (80065b0 <vTaskStartScheduler+0xbc>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006538:	2301      	movs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e001      	b.n	8006542 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800653e:	2300      	movs	r3, #0
 8006540:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d102      	bne.n	800654e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006548:	f000 fcfc 	bl	8006f44 <xTimerCreateTimerTask>
 800654c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d116      	bne.n	8006582 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	613b      	str	r3, [r7, #16]
}
 8006566:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006568:	4b12      	ldr	r3, [pc, #72]	; (80065b4 <vTaskStartScheduler+0xc0>)
 800656a:	f04f 32ff 	mov.w	r2, #4294967295
 800656e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006570:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <vTaskStartScheduler+0xc4>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006576:	4b11      	ldr	r3, [pc, #68]	; (80065bc <vTaskStartScheduler+0xc8>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800657c:	f001 f8b8 	bl	80076f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006580:	e00e      	b.n	80065a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006588:	d10a      	bne.n	80065a0 <vTaskStartScheduler+0xac>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	60fb      	str	r3, [r7, #12]
}
 800659c:	bf00      	nop
 800659e:	e7fe      	b.n	800659e <vTaskStartScheduler+0xaa>
}
 80065a0:	bf00      	nop
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	08009c10 	.word	0x08009c10
 80065ac:	08006bd9 	.word	0x08006bd9
 80065b0:	20000c90 	.word	0x20000c90
 80065b4:	20000c8c 	.word	0x20000c8c
 80065b8:	20000c78 	.word	0x20000c78
 80065bc:	20000c70 	.word	0x20000c70

080065c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065c4:	4b04      	ldr	r3, [pc, #16]	; (80065d8 <vTaskSuspendAll+0x18>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	4a03      	ldr	r2, [pc, #12]	; (80065d8 <vTaskSuspendAll+0x18>)
 80065cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065ce:	bf00      	nop
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	20000c94 	.word	0x20000c94

080065dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065ea:	4b42      	ldr	r3, [pc, #264]	; (80066f4 <xTaskResumeAll+0x118>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10a      	bne.n	8006608 <xTaskResumeAll+0x2c>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	603b      	str	r3, [r7, #0]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006608:	f001 f914 	bl	8007834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800660c:	4b39      	ldr	r3, [pc, #228]	; (80066f4 <xTaskResumeAll+0x118>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3b01      	subs	r3, #1
 8006612:	4a38      	ldr	r2, [pc, #224]	; (80066f4 <xTaskResumeAll+0x118>)
 8006614:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006616:	4b37      	ldr	r3, [pc, #220]	; (80066f4 <xTaskResumeAll+0x118>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d162      	bne.n	80066e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800661e:	4b36      	ldr	r3, [pc, #216]	; (80066f8 <xTaskResumeAll+0x11c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d05e      	beq.n	80066e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006626:	e02f      	b.n	8006688 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006628:	4b34      	ldr	r3, [pc, #208]	; (80066fc <xTaskResumeAll+0x120>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3318      	adds	r3, #24
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe ff7b 	bl	8005530 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3304      	adds	r3, #4
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe ff76 	bl	8005530 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006648:	4b2d      	ldr	r3, [pc, #180]	; (8006700 <xTaskResumeAll+0x124>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d903      	bls.n	8006658 <xTaskResumeAll+0x7c>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	4a2a      	ldr	r2, [pc, #168]	; (8006700 <xTaskResumeAll+0x124>)
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665c:	4613      	mov	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4a27      	ldr	r2, [pc, #156]	; (8006704 <xTaskResumeAll+0x128>)
 8006666:	441a      	add	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3304      	adds	r3, #4
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f7fe ff01 	bl	8005476 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006678:	4b23      	ldr	r3, [pc, #140]	; (8006708 <xTaskResumeAll+0x12c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	429a      	cmp	r2, r3
 8006680:	d302      	bcc.n	8006688 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006682:	4b22      	ldr	r3, [pc, #136]	; (800670c <xTaskResumeAll+0x130>)
 8006684:	2201      	movs	r2, #1
 8006686:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006688:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <xTaskResumeAll+0x120>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1cb      	bne.n	8006628 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006696:	f000 fb55 	bl	8006d44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800669a:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <xTaskResumeAll+0x134>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d010      	beq.n	80066c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066a6:	f000 f847 	bl	8006738 <xTaskIncrementTick>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066b0:	4b16      	ldr	r3, [pc, #88]	; (800670c <xTaskResumeAll+0x130>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1f1      	bne.n	80066a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80066c2:	4b13      	ldr	r3, [pc, #76]	; (8006710 <xTaskResumeAll+0x134>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066c8:	4b10      	ldr	r3, [pc, #64]	; (800670c <xTaskResumeAll+0x130>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d009      	beq.n	80066e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066d0:	2301      	movs	r3, #1
 80066d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066d4:	4b0f      	ldr	r3, [pc, #60]	; (8006714 <xTaskResumeAll+0x138>)
 80066d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066e4:	f001 f8d6 	bl	8007894 <vPortExitCritical>

	return xAlreadyYielded;
 80066e8:	68bb      	ldr	r3, [r7, #8]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20000c94 	.word	0x20000c94
 80066f8:	20000c6c 	.word	0x20000c6c
 80066fc:	20000c2c 	.word	0x20000c2c
 8006700:	20000c74 	.word	0x20000c74
 8006704:	2000079c 	.word	0x2000079c
 8006708:	20000798 	.word	0x20000798
 800670c:	20000c80 	.word	0x20000c80
 8006710:	20000c7c 	.word	0x20000c7c
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800671e:	4b05      	ldr	r3, [pc, #20]	; (8006734 <xTaskGetTickCount+0x1c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006724:	687b      	ldr	r3, [r7, #4]
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20000c70 	.word	0x20000c70

08006738 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800673e:	2300      	movs	r3, #0
 8006740:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006742:	4b4f      	ldr	r3, [pc, #316]	; (8006880 <xTaskIncrementTick+0x148>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f040 808f 	bne.w	800686a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800674c:	4b4d      	ldr	r3, [pc, #308]	; (8006884 <xTaskIncrementTick+0x14c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3301      	adds	r3, #1
 8006752:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006754:	4a4b      	ldr	r2, [pc, #300]	; (8006884 <xTaskIncrementTick+0x14c>)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d120      	bne.n	80067a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006760:	4b49      	ldr	r3, [pc, #292]	; (8006888 <xTaskIncrementTick+0x150>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <xTaskIncrementTick+0x48>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	603b      	str	r3, [r7, #0]
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <xTaskIncrementTick+0x46>
 8006780:	4b41      	ldr	r3, [pc, #260]	; (8006888 <xTaskIncrementTick+0x150>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	4b41      	ldr	r3, [pc, #260]	; (800688c <xTaskIncrementTick+0x154>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a3f      	ldr	r2, [pc, #252]	; (8006888 <xTaskIncrementTick+0x150>)
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	4a3f      	ldr	r2, [pc, #252]	; (800688c <xTaskIncrementTick+0x154>)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	4b3e      	ldr	r3, [pc, #248]	; (8006890 <xTaskIncrementTick+0x158>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	4a3d      	ldr	r2, [pc, #244]	; (8006890 <xTaskIncrementTick+0x158>)
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	f000 fad1 	bl	8006d44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067a2:	4b3c      	ldr	r3, [pc, #240]	; (8006894 <xTaskIncrementTick+0x15c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d349      	bcc.n	8006840 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ac:	4b36      	ldr	r3, [pc, #216]	; (8006888 <xTaskIncrementTick+0x150>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b6:	4b37      	ldr	r3, [pc, #220]	; (8006894 <xTaskIncrementTick+0x15c>)
 80067b8:	f04f 32ff 	mov.w	r2, #4294967295
 80067bc:	601a      	str	r2, [r3, #0]
					break;
 80067be:	e03f      	b.n	8006840 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c0:	4b31      	ldr	r3, [pc, #196]	; (8006888 <xTaskIncrementTick+0x150>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d203      	bcs.n	80067e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067d8:	4a2e      	ldr	r2, [pc, #184]	; (8006894 <xTaskIncrementTick+0x15c>)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067de:	e02f      	b.n	8006840 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fe fea3 	bl	8005530 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d004      	beq.n	80067fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	3318      	adds	r3, #24
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe fe9a 	bl	8005530 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006800:	4b25      	ldr	r3, [pc, #148]	; (8006898 <xTaskIncrementTick+0x160>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d903      	bls.n	8006810 <xTaskIncrementTick+0xd8>
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	4a22      	ldr	r2, [pc, #136]	; (8006898 <xTaskIncrementTick+0x160>)
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	4613      	mov	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4a1f      	ldr	r2, [pc, #124]	; (800689c <xTaskIncrementTick+0x164>)
 800681e:	441a      	add	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	3304      	adds	r3, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4610      	mov	r0, r2
 8006828:	f7fe fe25 	bl	8005476 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006830:	4b1b      	ldr	r3, [pc, #108]	; (80068a0 <xTaskIncrementTick+0x168>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	429a      	cmp	r2, r3
 8006838:	d3b8      	bcc.n	80067ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800683a:	2301      	movs	r3, #1
 800683c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800683e:	e7b5      	b.n	80067ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006840:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <xTaskIncrementTick+0x168>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006846:	4915      	ldr	r1, [pc, #84]	; (800689c <xTaskIncrementTick+0x164>)
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	440b      	add	r3, r1
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d901      	bls.n	800685c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006858:	2301      	movs	r3, #1
 800685a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800685c:	4b11      	ldr	r3, [pc, #68]	; (80068a4 <xTaskIncrementTick+0x16c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d007      	beq.n	8006874 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006864:	2301      	movs	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	e004      	b.n	8006874 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <xTaskIncrementTick+0x170>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3301      	adds	r3, #1
 8006870:	4a0d      	ldr	r2, [pc, #52]	; (80068a8 <xTaskIncrementTick+0x170>)
 8006872:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006874:	697b      	ldr	r3, [r7, #20]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20000c94 	.word	0x20000c94
 8006884:	20000c70 	.word	0x20000c70
 8006888:	20000c24 	.word	0x20000c24
 800688c:	20000c28 	.word	0x20000c28
 8006890:	20000c84 	.word	0x20000c84
 8006894:	20000c8c 	.word	0x20000c8c
 8006898:	20000c74 	.word	0x20000c74
 800689c:	2000079c 	.word	0x2000079c
 80068a0:	20000798 	.word	0x20000798
 80068a4:	20000c80 	.word	0x20000c80
 80068a8:	20000c7c 	.word	0x20000c7c

080068ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068b2:	4b28      	ldr	r3, [pc, #160]	; (8006954 <vTaskSwitchContext+0xa8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068ba:	4b27      	ldr	r3, [pc, #156]	; (8006958 <vTaskSwitchContext+0xac>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068c0:	e041      	b.n	8006946 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80068c2:	4b25      	ldr	r3, [pc, #148]	; (8006958 <vTaskSwitchContext+0xac>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c8:	4b24      	ldr	r3, [pc, #144]	; (800695c <vTaskSwitchContext+0xb0>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	e010      	b.n	80068f2 <vTaskSwitchContext+0x46>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10a      	bne.n	80068ec <vTaskSwitchContext+0x40>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	607b      	str	r3, [r7, #4]
}
 80068e8:	bf00      	nop
 80068ea:	e7fe      	b.n	80068ea <vTaskSwitchContext+0x3e>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	491b      	ldr	r1, [pc, #108]	; (8006960 <vTaskSwitchContext+0xb4>)
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	440b      	add	r3, r1
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0e4      	beq.n	80068d0 <vTaskSwitchContext+0x24>
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4a13      	ldr	r2, [pc, #76]	; (8006960 <vTaskSwitchContext+0xb4>)
 8006912:	4413      	add	r3, r2
 8006914:	60bb      	str	r3, [r7, #8]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	605a      	str	r2, [r3, #4]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	3308      	adds	r3, #8
 8006928:	429a      	cmp	r2, r3
 800692a:	d104      	bne.n	8006936 <vTaskSwitchContext+0x8a>
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	605a      	str	r2, [r3, #4]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	4a09      	ldr	r2, [pc, #36]	; (8006964 <vTaskSwitchContext+0xb8>)
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	4a06      	ldr	r2, [pc, #24]	; (800695c <vTaskSwitchContext+0xb0>)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6013      	str	r3, [r2, #0]
}
 8006946:	bf00      	nop
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	20000c94 	.word	0x20000c94
 8006958:	20000c80 	.word	0x20000c80
 800695c:	20000c74 	.word	0x20000c74
 8006960:	2000079c 	.word	0x2000079c
 8006964:	20000798 	.word	0x20000798

08006968 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	60fb      	str	r3, [r7, #12]
}
 800698a:	bf00      	nop
 800698c:	e7fe      	b.n	800698c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800698e:	4b07      	ldr	r3, [pc, #28]	; (80069ac <vTaskPlaceOnEventList+0x44>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3318      	adds	r3, #24
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fe fd91 	bl	80054be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800699c:	2101      	movs	r1, #1
 800699e:	6838      	ldr	r0, [r7, #0]
 80069a0:	f000 fa7c 	bl	8006e9c <prvAddCurrentTaskToDelayedList>
}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20000798 	.word	0x20000798

080069b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10a      	bne.n	80069d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	617b      	str	r3, [r7, #20]
}
 80069d4:	bf00      	nop
 80069d6:	e7fe      	b.n	80069d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069d8:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <vTaskPlaceOnEventListRestricted+0x54>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3318      	adds	r3, #24
 80069de:	4619      	mov	r1, r3
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f7fe fd48 	bl	8005476 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80069ec:	f04f 33ff 	mov.w	r3, #4294967295
 80069f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	68b8      	ldr	r0, [r7, #8]
 80069f6:	f000 fa51 	bl	8006e9c <prvAddCurrentTaskToDelayedList>
	}
 80069fa:	bf00      	nop
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000798 	.word	0x20000798

08006a08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	60fb      	str	r3, [r7, #12]
}
 8006a30:	bf00      	nop
 8006a32:	e7fe      	b.n	8006a32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	3318      	adds	r3, #24
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe fd79 	bl	8005530 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a3e:	4b1e      	ldr	r3, [pc, #120]	; (8006ab8 <xTaskRemoveFromEventList+0xb0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d11d      	bne.n	8006a82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fe fd70 	bl	8005530 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a54:	4b19      	ldr	r3, [pc, #100]	; (8006abc <xTaskRemoveFromEventList+0xb4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d903      	bls.n	8006a64 <xTaskRemoveFromEventList+0x5c>
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	4a16      	ldr	r2, [pc, #88]	; (8006abc <xTaskRemoveFromEventList+0xb4>)
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	4613      	mov	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4a13      	ldr	r2, [pc, #76]	; (8006ac0 <xTaskRemoveFromEventList+0xb8>)
 8006a72:	441a      	add	r2, r3
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	f7fe fcfb 	bl	8005476 <vListInsertEnd>
 8006a80:	e005      	b.n	8006a8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	3318      	adds	r3, #24
 8006a86:	4619      	mov	r1, r3
 8006a88:	480e      	ldr	r0, [pc, #56]	; (8006ac4 <xTaskRemoveFromEventList+0xbc>)
 8006a8a:	f7fe fcf4 	bl	8005476 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a92:	4b0d      	ldr	r3, [pc, #52]	; (8006ac8 <xTaskRemoveFromEventList+0xc0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d905      	bls.n	8006aa8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006aa0:	4b0a      	ldr	r3, [pc, #40]	; (8006acc <xTaskRemoveFromEventList+0xc4>)
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	e001      	b.n	8006aac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006aac:	697b      	ldr	r3, [r7, #20]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000c94 	.word	0x20000c94
 8006abc:	20000c74 	.word	0x20000c74
 8006ac0:	2000079c 	.word	0x2000079c
 8006ac4:	20000c2c 	.word	0x20000c2c
 8006ac8:	20000798 	.word	0x20000798
 8006acc:	20000c80 	.word	0x20000c80

08006ad0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ad8:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <vTaskInternalSetTimeOutState+0x24>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ae0:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <vTaskInternalSetTimeOutState+0x28>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	605a      	str	r2, [r3, #4]
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	20000c84 	.word	0x20000c84
 8006af8:	20000c70 	.word	0x20000c70

08006afc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	613b      	str	r3, [r7, #16]
}
 8006b1e:	bf00      	nop
 8006b20:	e7fe      	b.n	8006b20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	60fb      	str	r3, [r7, #12]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b3e:	f000 fe79 	bl	8007834 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b42:	4b1d      	ldr	r3, [pc, #116]	; (8006bb8 <xTaskCheckForTimeOut+0xbc>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5a:	d102      	bne.n	8006b62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61fb      	str	r3, [r7, #28]
 8006b60:	e023      	b.n	8006baa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b15      	ldr	r3, [pc, #84]	; (8006bbc <xTaskCheckForTimeOut+0xc0>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d007      	beq.n	8006b7e <xTaskCheckForTimeOut+0x82>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d302      	bcc.n	8006b7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	e015      	b.n	8006baa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d20b      	bcs.n	8006ba0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	1ad2      	subs	r2, r2, r3
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff ff9b 	bl	8006ad0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]
 8006b9e:	e004      	b.n	8006baa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006baa:	f000 fe73 	bl	8007894 <vPortExitCritical>

	return xReturn;
 8006bae:	69fb      	ldr	r3, [r7, #28]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3720      	adds	r7, #32
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	20000c70 	.word	0x20000c70
 8006bbc:	20000c84 	.word	0x20000c84

08006bc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bc4:	4b03      	ldr	r3, [pc, #12]	; (8006bd4 <vTaskMissedYield+0x14>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]
}
 8006bca:	bf00      	nop
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	20000c80 	.word	0x20000c80

08006bd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006be0:	f000 f852 	bl	8006c88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <prvIdleTask+0x28>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d9f9      	bls.n	8006be0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bec:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <prvIdleTask+0x2c>)
 8006bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bfc:	e7f0      	b.n	8006be0 <prvIdleTask+0x8>
 8006bfe:	bf00      	nop
 8006c00:	2000079c 	.word	0x2000079c
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c0e:	2300      	movs	r3, #0
 8006c10:	607b      	str	r3, [r7, #4]
 8006c12:	e00c      	b.n	8006c2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	4613      	mov	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4a12      	ldr	r2, [pc, #72]	; (8006c68 <prvInitialiseTaskLists+0x60>)
 8006c20:	4413      	add	r3, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fe fbfa 	bl	800541c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	607b      	str	r3, [r7, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b37      	cmp	r3, #55	; 0x37
 8006c32:	d9ef      	bls.n	8006c14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c34:	480d      	ldr	r0, [pc, #52]	; (8006c6c <prvInitialiseTaskLists+0x64>)
 8006c36:	f7fe fbf1 	bl	800541c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c3a:	480d      	ldr	r0, [pc, #52]	; (8006c70 <prvInitialiseTaskLists+0x68>)
 8006c3c:	f7fe fbee 	bl	800541c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c40:	480c      	ldr	r0, [pc, #48]	; (8006c74 <prvInitialiseTaskLists+0x6c>)
 8006c42:	f7fe fbeb 	bl	800541c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c46:	480c      	ldr	r0, [pc, #48]	; (8006c78 <prvInitialiseTaskLists+0x70>)
 8006c48:	f7fe fbe8 	bl	800541c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c4c:	480b      	ldr	r0, [pc, #44]	; (8006c7c <prvInitialiseTaskLists+0x74>)
 8006c4e:	f7fe fbe5 	bl	800541c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c52:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <prvInitialiseTaskLists+0x78>)
 8006c54:	4a05      	ldr	r2, [pc, #20]	; (8006c6c <prvInitialiseTaskLists+0x64>)
 8006c56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c58:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <prvInitialiseTaskLists+0x7c>)
 8006c5a:	4a05      	ldr	r2, [pc, #20]	; (8006c70 <prvInitialiseTaskLists+0x68>)
 8006c5c:	601a      	str	r2, [r3, #0]
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	2000079c 	.word	0x2000079c
 8006c6c:	20000bfc 	.word	0x20000bfc
 8006c70:	20000c10 	.word	0x20000c10
 8006c74:	20000c2c 	.word	0x20000c2c
 8006c78:	20000c40 	.word	0x20000c40
 8006c7c:	20000c58 	.word	0x20000c58
 8006c80:	20000c24 	.word	0x20000c24
 8006c84:	20000c28 	.word	0x20000c28

08006c88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c8e:	e019      	b.n	8006cc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c90:	f000 fdd0 	bl	8007834 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c94:	4b10      	ldr	r3, [pc, #64]	; (8006cd8 <prvCheckTasksWaitingTermination+0x50>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fe fc45 	bl	8005530 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ca6:	4b0d      	ldr	r3, [pc, #52]	; (8006cdc <prvCheckTasksWaitingTermination+0x54>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	4a0b      	ldr	r2, [pc, #44]	; (8006cdc <prvCheckTasksWaitingTermination+0x54>)
 8006cae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ce0 <prvCheckTasksWaitingTermination+0x58>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	4a0a      	ldr	r2, [pc, #40]	; (8006ce0 <prvCheckTasksWaitingTermination+0x58>)
 8006cb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cba:	f000 fdeb 	bl	8007894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f810 	bl	8006ce4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cc4:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <prvCheckTasksWaitingTermination+0x58>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e1      	bne.n	8006c90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ccc:	bf00      	nop
 8006cce:	bf00      	nop
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000c40 	.word	0x20000c40
 8006cdc:	20000c6c 	.word	0x20000c6c
 8006ce0:	20000c54 	.word	0x20000c54

08006ce4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d108      	bne.n	8006d08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 ff88 	bl	8007c10 <vPortFree>
				vPortFree( pxTCB );
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 ff85 	bl	8007c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d06:	e018      	b.n	8006d3a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d103      	bne.n	8006d1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 ff7c 	bl	8007c10 <vPortFree>
	}
 8006d18:	e00f      	b.n	8006d3a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d00a      	beq.n	8006d3a <prvDeleteTCB+0x56>
	__asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	60fb      	str	r3, [r7, #12]
}
 8006d36:	bf00      	nop
 8006d38:	e7fe      	b.n	8006d38 <prvDeleteTCB+0x54>
	}
 8006d3a:	bf00      	nop
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <prvResetNextTaskUnblockTime+0x38>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d104      	bne.n	8006d5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d54:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <prvResetNextTaskUnblockTime+0x3c>)
 8006d56:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d5c:	e008      	b.n	8006d70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d5e:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <prvResetNextTaskUnblockTime+0x38>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	4a04      	ldr	r2, [pc, #16]	; (8006d80 <prvResetNextTaskUnblockTime+0x3c>)
 8006d6e:	6013      	str	r3, [r2, #0]
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	20000c24 	.word	0x20000c24
 8006d80:	20000c8c 	.word	0x20000c8c

08006d84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d8a:	4b0b      	ldr	r3, [pc, #44]	; (8006db8 <xTaskGetSchedulerState+0x34>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d102      	bne.n	8006d98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d92:	2301      	movs	r3, #1
 8006d94:	607b      	str	r3, [r7, #4]
 8006d96:	e008      	b.n	8006daa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d98:	4b08      	ldr	r3, [pc, #32]	; (8006dbc <xTaskGetSchedulerState+0x38>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d102      	bne.n	8006da6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006da0:	2302      	movs	r3, #2
 8006da2:	607b      	str	r3, [r7, #4]
 8006da4:	e001      	b.n	8006daa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006da6:	2300      	movs	r3, #0
 8006da8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006daa:	687b      	ldr	r3, [r7, #4]
	}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	20000c78 	.word	0x20000c78
 8006dbc:	20000c94 	.word	0x20000c94

08006dc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d056      	beq.n	8006e84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dd6:	4b2e      	ldr	r3, [pc, #184]	; (8006e90 <xTaskPriorityDisinherit+0xd0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d00a      	beq.n	8006df6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	60fb      	str	r3, [r7, #12]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	60bb      	str	r3, [r7, #8]
}
 8006e10:	bf00      	nop
 8006e12:	e7fe      	b.n	8006e12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e18:	1e5a      	subs	r2, r3, #1
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d02c      	beq.n	8006e84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d128      	bne.n	8006e84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	3304      	adds	r3, #4
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fe fb7a 	bl	8005530 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e54:	4b0f      	ldr	r3, [pc, #60]	; (8006e94 <xTaskPriorityDisinherit+0xd4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d903      	bls.n	8006e64 <xTaskPriorityDisinherit+0xa4>
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	4a0c      	ldr	r2, [pc, #48]	; (8006e94 <xTaskPriorityDisinherit+0xd4>)
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4a09      	ldr	r2, [pc, #36]	; (8006e98 <xTaskPriorityDisinherit+0xd8>)
 8006e72:	441a      	add	r2, r3
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f7fe fafb 	bl	8005476 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e80:	2301      	movs	r3, #1
 8006e82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e84:	697b      	ldr	r3, [r7, #20]
	}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000798 	.word	0x20000798
 8006e94:	20000c74 	.word	0x20000c74
 8006e98:	2000079c 	.word	0x2000079c

08006e9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ea6:	4b21      	ldr	r3, [pc, #132]	; (8006f2c <prvAddCurrentTaskToDelayedList+0x90>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eac:	4b20      	ldr	r3, [pc, #128]	; (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fb3c 	bl	8005530 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d10a      	bne.n	8006ed6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d007      	beq.n	8006ed6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ec6:	4b1a      	ldr	r3, [pc, #104]	; (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4819      	ldr	r0, [pc, #100]	; (8006f34 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ed0:	f7fe fad1 	bl	8005476 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ed4:	e026      	b.n	8006f24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ede:	4b14      	ldr	r3, [pc, #80]	; (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d209      	bcs.n	8006f02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eee:	4b12      	ldr	r3, [pc, #72]	; (8006f38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7fe fadf 	bl	80054be <vListInsert>
}
 8006f00:	e010      	b.n	8006f24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f02:	4b0e      	ldr	r3, [pc, #56]	; (8006f3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	4b0a      	ldr	r3, [pc, #40]	; (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f7fe fad5 	bl	80054be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f14:	4b0a      	ldr	r3, [pc, #40]	; (8006f40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d202      	bcs.n	8006f24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f1e:	4a08      	ldr	r2, [pc, #32]	; (8006f40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6013      	str	r3, [r2, #0]
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	20000c70 	.word	0x20000c70
 8006f30:	20000798 	.word	0x20000798
 8006f34:	20000c58 	.word	0x20000c58
 8006f38:	20000c28 	.word	0x20000c28
 8006f3c:	20000c24 	.word	0x20000c24
 8006f40:	20000c8c 	.word	0x20000c8c

08006f44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08a      	sub	sp, #40	; 0x28
 8006f48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f4e:	f000 fb07 	bl	8007560 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f52:	4b1c      	ldr	r3, [pc, #112]	; (8006fc4 <xTimerCreateTimerTask+0x80>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d021      	beq.n	8006f9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f62:	1d3a      	adds	r2, r7, #4
 8006f64:	f107 0108 	add.w	r1, r7, #8
 8006f68:	f107 030c 	add.w	r3, r7, #12
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fe fa3b 	bl	80053e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	9202      	str	r2, [sp, #8]
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	2300      	movs	r3, #0
 8006f82:	460a      	mov	r2, r1
 8006f84:	4910      	ldr	r1, [pc, #64]	; (8006fc8 <xTimerCreateTimerTask+0x84>)
 8006f86:	4811      	ldr	r0, [pc, #68]	; (8006fcc <xTimerCreateTimerTask+0x88>)
 8006f88:	f7ff f8de 	bl	8006148 <xTaskCreateStatic>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	4a10      	ldr	r2, [pc, #64]	; (8006fd0 <xTimerCreateTimerTask+0x8c>)
 8006f90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f92:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <xTimerCreateTimerTask+0x8c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	613b      	str	r3, [r7, #16]
}
 8006fb6:	bf00      	nop
 8006fb8:	e7fe      	b.n	8006fb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006fba:	697b      	ldr	r3, [r7, #20]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20000cc8 	.word	0x20000cc8
 8006fc8:	08009c18 	.word	0x08009c18
 8006fcc:	08007109 	.word	0x08007109
 8006fd0:	20000ccc 	.word	0x20000ccc

08006fd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	; 0x28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10a      	bne.n	8007002 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	623b      	str	r3, [r7, #32]
}
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007002:	4b1a      	ldr	r3, [pc, #104]	; (800706c <xTimerGenericCommand+0x98>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d02a      	beq.n	8007060 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b05      	cmp	r3, #5
 800701a:	dc18      	bgt.n	800704e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800701c:	f7ff feb2 	bl	8006d84 <xTaskGetSchedulerState>
 8007020:	4603      	mov	r3, r0
 8007022:	2b02      	cmp	r3, #2
 8007024:	d109      	bne.n	800703a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007026:	4b11      	ldr	r3, [pc, #68]	; (800706c <xTimerGenericCommand+0x98>)
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	f107 0110 	add.w	r1, r7, #16
 800702e:	2300      	movs	r3, #0
 8007030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007032:	f7fe fbe5 	bl	8005800 <xQueueGenericSend>
 8007036:	6278      	str	r0, [r7, #36]	; 0x24
 8007038:	e012      	b.n	8007060 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800703a:	4b0c      	ldr	r3, [pc, #48]	; (800706c <xTimerGenericCommand+0x98>)
 800703c:	6818      	ldr	r0, [r3, #0]
 800703e:	f107 0110 	add.w	r1, r7, #16
 8007042:	2300      	movs	r3, #0
 8007044:	2200      	movs	r2, #0
 8007046:	f7fe fbdb 	bl	8005800 <xQueueGenericSend>
 800704a:	6278      	str	r0, [r7, #36]	; 0x24
 800704c:	e008      	b.n	8007060 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800704e:	4b07      	ldr	r3, [pc, #28]	; (800706c <xTimerGenericCommand+0x98>)
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	f107 0110 	add.w	r1, r7, #16
 8007056:	2300      	movs	r3, #0
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	f7fe fccf 	bl	80059fc <xQueueGenericSendFromISR>
 800705e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007062:	4618      	mov	r0, r3
 8007064:	3728      	adds	r7, #40	; 0x28
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000cc8 	.word	0x20000cc8

08007070 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af02      	add	r7, sp, #8
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800707a:	4b22      	ldr	r3, [pc, #136]	; (8007104 <prvProcessExpiredTimer+0x94>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	3304      	adds	r3, #4
 8007088:	4618      	mov	r0, r3
 800708a:	f7fe fa51 	bl	8005530 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d022      	beq.n	80070e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	699a      	ldr	r2, [r3, #24]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	18d1      	adds	r1, r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	6978      	ldr	r0, [r7, #20]
 80070aa:	f000 f8d1 	bl	8007250 <prvInsertTimerInActiveList>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01f      	beq.n	80070f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070b4:	2300      	movs	r3, #0
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	2300      	movs	r3, #0
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	2100      	movs	r1, #0
 80070be:	6978      	ldr	r0, [r7, #20]
 80070c0:	f7ff ff88 	bl	8006fd4 <xTimerGenericCommand>
 80070c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d113      	bne.n	80070f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	60fb      	str	r3, [r7, #12]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070e8:	f023 0301 	bic.w	r3, r3, #1
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	6978      	ldr	r0, [r7, #20]
 80070fa:	4798      	blx	r3
}
 80070fc:	bf00      	nop
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000cc0 	.word	0x20000cc0

08007108 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007110:	f107 0308 	add.w	r3, r7, #8
 8007114:	4618      	mov	r0, r3
 8007116:	f000 f857 	bl	80071c8 <prvGetNextExpireTime>
 800711a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4619      	mov	r1, r3
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f803 	bl	800712c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007126:	f000 f8d5 	bl	80072d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800712a:	e7f1      	b.n	8007110 <prvTimerTask+0x8>

0800712c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007136:	f7ff fa43 	bl	80065c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800713a:	f107 0308 	add.w	r3, r7, #8
 800713e:	4618      	mov	r0, r3
 8007140:	f000 f866 	bl	8007210 <prvSampleTimeNow>
 8007144:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d130      	bne.n	80071ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10a      	bne.n	8007168 <prvProcessTimerOrBlockTask+0x3c>
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	429a      	cmp	r2, r3
 8007158:	d806      	bhi.n	8007168 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800715a:	f7ff fa3f 	bl	80065dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800715e:	68f9      	ldr	r1, [r7, #12]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff ff85 	bl	8007070 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007166:	e024      	b.n	80071b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d008      	beq.n	8007180 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800716e:	4b13      	ldr	r3, [pc, #76]	; (80071bc <prvProcessTimerOrBlockTask+0x90>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <prvProcessTimerOrBlockTask+0x50>
 8007178:	2301      	movs	r3, #1
 800717a:	e000      	b.n	800717e <prvProcessTimerOrBlockTask+0x52>
 800717c:	2300      	movs	r3, #0
 800717e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007180:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <prvProcessTimerOrBlockTask+0x94>)
 8007182:	6818      	ldr	r0, [r3, #0]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	4619      	mov	r1, r3
 800718e:	f7fe ffa7 	bl	80060e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007192:	f7ff fa23 	bl	80065dc <xTaskResumeAll>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10a      	bne.n	80071b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800719c:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <prvProcessTimerOrBlockTask+0x98>)
 800719e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	f3bf 8f6f 	isb	sy
}
 80071ac:	e001      	b.n	80071b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071ae:	f7ff fa15 	bl	80065dc <xTaskResumeAll>
}
 80071b2:	bf00      	nop
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20000cc4 	.word	0x20000cc4
 80071c0:	20000cc8 	.word	0x20000cc8
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071d0:	4b0e      	ldr	r3, [pc, #56]	; (800720c <prvGetNextExpireTime+0x44>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <prvGetNextExpireTime+0x16>
 80071da:	2201      	movs	r2, #1
 80071dc:	e000      	b.n	80071e0 <prvGetNextExpireTime+0x18>
 80071de:	2200      	movs	r2, #0
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d105      	bne.n	80071f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071ec:	4b07      	ldr	r3, [pc, #28]	; (800720c <prvGetNextExpireTime+0x44>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	e001      	b.n	80071fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071fc:	68fb      	ldr	r3, [r7, #12]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	20000cc0 	.word	0x20000cc0

08007210 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007218:	f7ff fa7e 	bl	8006718 <xTaskGetTickCount>
 800721c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800721e:	4b0b      	ldr	r3, [pc, #44]	; (800724c <prvSampleTimeNow+0x3c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	429a      	cmp	r2, r3
 8007226:	d205      	bcs.n	8007234 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007228:	f000 f936 	bl	8007498 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	e002      	b.n	800723a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800723a:	4a04      	ldr	r2, [pc, #16]	; (800724c <prvSampleTimeNow+0x3c>)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007240:	68fb      	ldr	r3, [r7, #12]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20000cd0 	.word	0x20000cd0

08007250 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800725e:	2300      	movs	r3, #0
 8007260:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	429a      	cmp	r2, r3
 8007274:	d812      	bhi.n	800729c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	1ad2      	subs	r2, r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	429a      	cmp	r2, r3
 8007282:	d302      	bcc.n	800728a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007284:	2301      	movs	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	e01b      	b.n	80072c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800728a:	4b10      	ldr	r3, [pc, #64]	; (80072cc <prvInsertTimerInActiveList+0x7c>)
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3304      	adds	r3, #4
 8007292:	4619      	mov	r1, r3
 8007294:	4610      	mov	r0, r2
 8007296:	f7fe f912 	bl	80054be <vListInsert>
 800729a:	e012      	b.n	80072c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d206      	bcs.n	80072b2 <prvInsertTimerInActiveList+0x62>
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d302      	bcc.n	80072b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	e007      	b.n	80072c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072b2:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <prvInsertTimerInActiveList+0x80>)
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4619      	mov	r1, r3
 80072bc:	4610      	mov	r0, r2
 80072be:	f7fe f8fe 	bl	80054be <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072c2:	697b      	ldr	r3, [r7, #20]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	20000cc4 	.word	0x20000cc4
 80072d0:	20000cc0 	.word	0x20000cc0

080072d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08e      	sub	sp, #56	; 0x38
 80072d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072da:	e0ca      	b.n	8007472 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	da18      	bge.n	8007314 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072e2:	1d3b      	adds	r3, r7, #4
 80072e4:	3304      	adds	r3, #4
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	61fb      	str	r3, [r7, #28]
}
 8007300:	bf00      	nop
 8007302:	e7fe      	b.n	8007302 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800730a:	6850      	ldr	r0, [r2, #4]
 800730c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800730e:	6892      	ldr	r2, [r2, #8]
 8007310:	4611      	mov	r1, r2
 8007312:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	f2c0 80aa 	blt.w	8007470 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d004      	beq.n	8007332 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	3304      	adds	r3, #4
 800732c:	4618      	mov	r0, r3
 800732e:	f7fe f8ff 	bl	8005530 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007332:	463b      	mov	r3, r7
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff ff6b 	bl	8007210 <prvSampleTimeNow>
 800733a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b09      	cmp	r3, #9
 8007340:	f200 8097 	bhi.w	8007472 <prvProcessReceivedCommands+0x19e>
 8007344:	a201      	add	r2, pc, #4	; (adr r2, 800734c <prvProcessReceivedCommands+0x78>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	08007375 	.word	0x08007375
 8007350:	08007375 	.word	0x08007375
 8007354:	08007375 	.word	0x08007375
 8007358:	080073e9 	.word	0x080073e9
 800735c:	080073fd 	.word	0x080073fd
 8007360:	08007447 	.word	0x08007447
 8007364:	08007375 	.word	0x08007375
 8007368:	08007375 	.word	0x08007375
 800736c:	080073e9 	.word	0x080073e9
 8007370:	080073fd 	.word	0x080073fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800737a:	f043 0301 	orr.w	r3, r3, #1
 800737e:	b2da      	uxtb	r2, r3
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	18d1      	adds	r1, r2, r3
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007394:	f7ff ff5c 	bl	8007250 <prvInsertTimerInActiveList>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d069      	beq.n	8007472 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d05e      	beq.n	8007472 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	441a      	add	r2, r3
 80073bc:	2300      	movs	r3, #0
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	2300      	movs	r3, #0
 80073c2:	2100      	movs	r1, #0
 80073c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073c6:	f7ff fe05 	bl	8006fd4 <xTimerGenericCommand>
 80073ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d14f      	bne.n	8007472 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	61bb      	str	r3, [r7, #24]
}
 80073e4:	bf00      	nop
 80073e6:	e7fe      	b.n	80073e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ee:	f023 0301 	bic.w	r3, r3, #1
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073fa:	e03a      	b.n	8007472 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007402:	f043 0301 	orr.w	r3, r3, #1
 8007406:	b2da      	uxtb	r2, r3
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10a      	bne.n	8007432 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	617b      	str	r3, [r7, #20]
}
 800742e:	bf00      	nop
 8007430:	e7fe      	b.n	8007430 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	699a      	ldr	r2, [r3, #24]
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	18d1      	adds	r1, r2, r3
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007440:	f7ff ff06 	bl	8007250 <prvInsertTimerInActiveList>
					break;
 8007444:	e015      	b.n	8007472 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d103      	bne.n	800745c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007456:	f000 fbdb 	bl	8007c10 <vPortFree>
 800745a:	e00a      	b.n	8007472 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007462:	f023 0301 	bic.w	r3, r3, #1
 8007466:	b2da      	uxtb	r2, r3
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800746e:	e000      	b.n	8007472 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007470:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007472:	4b08      	ldr	r3, [pc, #32]	; (8007494 <prvProcessReceivedCommands+0x1c0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	1d39      	adds	r1, r7, #4
 8007478:	2200      	movs	r2, #0
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe fb5a 	bl	8005b34 <xQueueReceive>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	f47f af2a 	bne.w	80072dc <prvProcessReceivedCommands+0x8>
	}
}
 8007488:	bf00      	nop
 800748a:	bf00      	nop
 800748c:	3730      	adds	r7, #48	; 0x30
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20000cc8 	.word	0x20000cc8

08007498 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800749e:	e048      	b.n	8007532 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074a0:	4b2d      	ldr	r3, [pc, #180]	; (8007558 <prvSwitchTimerLists+0xc0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074aa:	4b2b      	ldr	r3, [pc, #172]	; (8007558 <prvSwitchTimerLists+0xc0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	3304      	adds	r3, #4
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fe f839 	bl	8005530 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d02e      	beq.n	8007532 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4413      	add	r3, r2
 80074dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d90e      	bls.n	8007504 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074f2:	4b19      	ldr	r3, [pc, #100]	; (8007558 <prvSwitchTimerLists+0xc0>)
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3304      	adds	r3, #4
 80074fa:	4619      	mov	r1, r3
 80074fc:	4610      	mov	r0, r2
 80074fe:	f7fd ffde 	bl	80054be <vListInsert>
 8007502:	e016      	b.n	8007532 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007504:	2300      	movs	r3, #0
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	2300      	movs	r3, #0
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	2100      	movs	r1, #0
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f7ff fd60 	bl	8006fd4 <xTimerGenericCommand>
 8007514:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10a      	bne.n	8007532 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	603b      	str	r3, [r7, #0]
}
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007532:	4b09      	ldr	r3, [pc, #36]	; (8007558 <prvSwitchTimerLists+0xc0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1b1      	bne.n	80074a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800753c:	4b06      	ldr	r3, [pc, #24]	; (8007558 <prvSwitchTimerLists+0xc0>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007542:	4b06      	ldr	r3, [pc, #24]	; (800755c <prvSwitchTimerLists+0xc4>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a04      	ldr	r2, [pc, #16]	; (8007558 <prvSwitchTimerLists+0xc0>)
 8007548:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800754a:	4a04      	ldr	r2, [pc, #16]	; (800755c <prvSwitchTimerLists+0xc4>)
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	6013      	str	r3, [r2, #0]
}
 8007550:	bf00      	nop
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20000cc0 	.word	0x20000cc0
 800755c:	20000cc4 	.word	0x20000cc4

08007560 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007566:	f000 f965 	bl	8007834 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800756a:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <prvCheckForValidListAndQueue+0x60>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d120      	bne.n	80075b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007572:	4814      	ldr	r0, [pc, #80]	; (80075c4 <prvCheckForValidListAndQueue+0x64>)
 8007574:	f7fd ff52 	bl	800541c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007578:	4813      	ldr	r0, [pc, #76]	; (80075c8 <prvCheckForValidListAndQueue+0x68>)
 800757a:	f7fd ff4f 	bl	800541c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800757e:	4b13      	ldr	r3, [pc, #76]	; (80075cc <prvCheckForValidListAndQueue+0x6c>)
 8007580:	4a10      	ldr	r2, [pc, #64]	; (80075c4 <prvCheckForValidListAndQueue+0x64>)
 8007582:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007584:	4b12      	ldr	r3, [pc, #72]	; (80075d0 <prvCheckForValidListAndQueue+0x70>)
 8007586:	4a10      	ldr	r2, [pc, #64]	; (80075c8 <prvCheckForValidListAndQueue+0x68>)
 8007588:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800758a:	2300      	movs	r3, #0
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	4b11      	ldr	r3, [pc, #68]	; (80075d4 <prvCheckForValidListAndQueue+0x74>)
 8007590:	4a11      	ldr	r2, [pc, #68]	; (80075d8 <prvCheckForValidListAndQueue+0x78>)
 8007592:	2110      	movs	r1, #16
 8007594:	200a      	movs	r0, #10
 8007596:	f7fe f85d 	bl	8005654 <xQueueGenericCreateStatic>
 800759a:	4603      	mov	r3, r0
 800759c:	4a08      	ldr	r2, [pc, #32]	; (80075c0 <prvCheckForValidListAndQueue+0x60>)
 800759e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <prvCheckForValidListAndQueue+0x60>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d005      	beq.n	80075b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075a8:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <prvCheckForValidListAndQueue+0x60>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	490b      	ldr	r1, [pc, #44]	; (80075dc <prvCheckForValidListAndQueue+0x7c>)
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fd6c 	bl	800608c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075b4:	f000 f96e 	bl	8007894 <vPortExitCritical>
}
 80075b8:	bf00      	nop
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	20000cc8 	.word	0x20000cc8
 80075c4:	20000c98 	.word	0x20000c98
 80075c8:	20000cac 	.word	0x20000cac
 80075cc:	20000cc0 	.word	0x20000cc0
 80075d0:	20000cc4 	.word	0x20000cc4
 80075d4:	20000d74 	.word	0x20000d74
 80075d8:	20000cd4 	.word	0x20000cd4
 80075dc:	08009c20 	.word	0x08009c20

080075e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3b04      	subs	r3, #4
 80075f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3b04      	subs	r3, #4
 80075fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f023 0201 	bic.w	r2, r3, #1
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3b04      	subs	r3, #4
 800760e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007610:	4a0c      	ldr	r2, [pc, #48]	; (8007644 <pxPortInitialiseStack+0x64>)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3b14      	subs	r3, #20
 800761a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3b04      	subs	r3, #4
 8007626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f06f 0202 	mvn.w	r2, #2
 800762e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3b20      	subs	r3, #32
 8007634:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007636:	68fb      	ldr	r3, [r7, #12]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	08007649 	.word	0x08007649

08007648 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007652:	4b12      	ldr	r3, [pc, #72]	; (800769c <prvTaskExitError+0x54>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765a:	d00a      	beq.n	8007672 <prvTaskExitError+0x2a>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	60fb      	str	r3, [r7, #12]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <prvTaskExitError+0x28>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	60bb      	str	r3, [r7, #8]
}
 8007684:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007686:	bf00      	nop
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d0fc      	beq.n	8007688 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800768e:	bf00      	nop
 8007690:	bf00      	nop
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	2000000c 	.word	0x2000000c

080076a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076a0:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <pxCurrentTCBConst2>)
 80076a2:	6819      	ldr	r1, [r3, #0]
 80076a4:	6808      	ldr	r0, [r1, #0]
 80076a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076aa:	f380 8809 	msr	PSP, r0
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f04f 0000 	mov.w	r0, #0
 80076b6:	f380 8811 	msr	BASEPRI, r0
 80076ba:	4770      	bx	lr
 80076bc:	f3af 8000 	nop.w

080076c0 <pxCurrentTCBConst2>:
 80076c0:	20000798 	.word	0x20000798
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop

080076c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076c8:	4808      	ldr	r0, [pc, #32]	; (80076ec <prvPortStartFirstTask+0x24>)
 80076ca:	6800      	ldr	r0, [r0, #0]
 80076cc:	6800      	ldr	r0, [r0, #0]
 80076ce:	f380 8808 	msr	MSP, r0
 80076d2:	f04f 0000 	mov.w	r0, #0
 80076d6:	f380 8814 	msr	CONTROL, r0
 80076da:	b662      	cpsie	i
 80076dc:	b661      	cpsie	f
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	df00      	svc	0
 80076e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ea:	bf00      	nop
 80076ec:	e000ed08 	.word	0xe000ed08

080076f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076f6:	4b46      	ldr	r3, [pc, #280]	; (8007810 <xPortStartScheduler+0x120>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a46      	ldr	r2, [pc, #280]	; (8007814 <xPortStartScheduler+0x124>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d10a      	bne.n	8007716 <xPortStartScheduler+0x26>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	613b      	str	r3, [r7, #16]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007716:	4b3e      	ldr	r3, [pc, #248]	; (8007810 <xPortStartScheduler+0x120>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a3f      	ldr	r2, [pc, #252]	; (8007818 <xPortStartScheduler+0x128>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d10a      	bne.n	8007736 <xPortStartScheduler+0x46>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	60fb      	str	r3, [r7, #12]
}
 8007732:	bf00      	nop
 8007734:	e7fe      	b.n	8007734 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007736:	4b39      	ldr	r3, [pc, #228]	; (800781c <xPortStartScheduler+0x12c>)
 8007738:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	22ff      	movs	r2, #255	; 0xff
 8007746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007758:	b2da      	uxtb	r2, r3
 800775a:	4b31      	ldr	r3, [pc, #196]	; (8007820 <xPortStartScheduler+0x130>)
 800775c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800775e:	4b31      	ldr	r3, [pc, #196]	; (8007824 <xPortStartScheduler+0x134>)
 8007760:	2207      	movs	r2, #7
 8007762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007764:	e009      	b.n	800777a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007766:	4b2f      	ldr	r3, [pc, #188]	; (8007824 <xPortStartScheduler+0x134>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3b01      	subs	r3, #1
 800776c:	4a2d      	ldr	r2, [pc, #180]	; (8007824 <xPortStartScheduler+0x134>)
 800776e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	b2db      	uxtb	r3, r3
 8007778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	b2db      	uxtb	r3, r3
 800777e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007782:	2b80      	cmp	r3, #128	; 0x80
 8007784:	d0ef      	beq.n	8007766 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007786:	4b27      	ldr	r3, [pc, #156]	; (8007824 <xPortStartScheduler+0x134>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f1c3 0307 	rsb	r3, r3, #7
 800778e:	2b04      	cmp	r3, #4
 8007790:	d00a      	beq.n	80077a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	60bb      	str	r3, [r7, #8]
}
 80077a4:	bf00      	nop
 80077a6:	e7fe      	b.n	80077a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077a8:	4b1e      	ldr	r3, [pc, #120]	; (8007824 <xPortStartScheduler+0x134>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	4a1d      	ldr	r2, [pc, #116]	; (8007824 <xPortStartScheduler+0x134>)
 80077b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077b2:	4b1c      	ldr	r3, [pc, #112]	; (8007824 <xPortStartScheduler+0x134>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077ba:	4a1a      	ldr	r2, [pc, #104]	; (8007824 <xPortStartScheduler+0x134>)
 80077bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077c6:	4b18      	ldr	r3, [pc, #96]	; (8007828 <xPortStartScheduler+0x138>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a17      	ldr	r2, [pc, #92]	; (8007828 <xPortStartScheduler+0x138>)
 80077cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077d2:	4b15      	ldr	r3, [pc, #84]	; (8007828 <xPortStartScheduler+0x138>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a14      	ldr	r2, [pc, #80]	; (8007828 <xPortStartScheduler+0x138>)
 80077d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077de:	f000 f8dd 	bl	800799c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077e2:	4b12      	ldr	r3, [pc, #72]	; (800782c <xPortStartScheduler+0x13c>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077e8:	f000 f8fc 	bl	80079e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077ec:	4b10      	ldr	r3, [pc, #64]	; (8007830 <xPortStartScheduler+0x140>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a0f      	ldr	r2, [pc, #60]	; (8007830 <xPortStartScheduler+0x140>)
 80077f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077f8:	f7ff ff66 	bl	80076c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077fc:	f7ff f856 	bl	80068ac <vTaskSwitchContext>
	prvTaskExitError();
 8007800:	f7ff ff22 	bl	8007648 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	e000ed00 	.word	0xe000ed00
 8007814:	410fc271 	.word	0x410fc271
 8007818:	410fc270 	.word	0x410fc270
 800781c:	e000e400 	.word	0xe000e400
 8007820:	20000dc4 	.word	0x20000dc4
 8007824:	20000dc8 	.word	0x20000dc8
 8007828:	e000ed20 	.word	0xe000ed20
 800782c:	2000000c 	.word	0x2000000c
 8007830:	e000ef34 	.word	0xe000ef34

08007834 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	607b      	str	r3, [r7, #4]
}
 800784c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800784e:	4b0f      	ldr	r3, [pc, #60]	; (800788c <vPortEnterCritical+0x58>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3301      	adds	r3, #1
 8007854:	4a0d      	ldr	r2, [pc, #52]	; (800788c <vPortEnterCritical+0x58>)
 8007856:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007858:	4b0c      	ldr	r3, [pc, #48]	; (800788c <vPortEnterCritical+0x58>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d10f      	bne.n	8007880 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <vPortEnterCritical+0x5c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <vPortEnterCritical+0x4c>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	603b      	str	r3, [r7, #0]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <vPortEnterCritical+0x4a>
	}
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	2000000c 	.word	0x2000000c
 8007890:	e000ed04 	.word	0xe000ed04

08007894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800789a:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <vPortExitCritical+0x50>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <vPortExitCritical+0x24>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	607b      	str	r3, [r7, #4]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078b8:	4b0a      	ldr	r3, [pc, #40]	; (80078e4 <vPortExitCritical+0x50>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3b01      	subs	r3, #1
 80078be:	4a09      	ldr	r2, [pc, #36]	; (80078e4 <vPortExitCritical+0x50>)
 80078c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078c2:	4b08      	ldr	r3, [pc, #32]	; (80078e4 <vPortExitCritical+0x50>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d105      	bne.n	80078d6 <vPortExitCritical+0x42>
 80078ca:	2300      	movs	r3, #0
 80078cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	f383 8811 	msr	BASEPRI, r3
}
 80078d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	2000000c 	.word	0x2000000c
	...

080078f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078f0:	f3ef 8009 	mrs	r0, PSP
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	4b15      	ldr	r3, [pc, #84]	; (8007950 <pxCurrentTCBConst>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	f01e 0f10 	tst.w	lr, #16
 8007900:	bf08      	it	eq
 8007902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790a:	6010      	str	r0, [r2, #0]
 800790c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007914:	f380 8811 	msr	BASEPRI, r0
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f7fe ffc4 	bl	80068ac <vTaskSwitchContext>
 8007924:	f04f 0000 	mov.w	r0, #0
 8007928:	f380 8811 	msr	BASEPRI, r0
 800792c:	bc09      	pop	{r0, r3}
 800792e:	6819      	ldr	r1, [r3, #0]
 8007930:	6808      	ldr	r0, [r1, #0]
 8007932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007936:	f01e 0f10 	tst.w	lr, #16
 800793a:	bf08      	it	eq
 800793c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007940:	f380 8809 	msr	PSP, r0
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	f3af 8000 	nop.w

08007950 <pxCurrentTCBConst>:
 8007950:	20000798 	.word	0x20000798
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop

08007958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	607b      	str	r3, [r7, #4]
}
 8007970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007972:	f7fe fee1 	bl	8006738 <xTaskIncrementTick>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800797c:	4b06      	ldr	r3, [pc, #24]	; (8007998 <xPortSysTickHandler+0x40>)
 800797e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	2300      	movs	r3, #0
 8007986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f383 8811 	msr	BASEPRI, r3
}
 800798e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079a0:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <vPortSetupTimerInterrupt+0x34>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079a6:	4b0b      	ldr	r3, [pc, #44]	; (80079d4 <vPortSetupTimerInterrupt+0x38>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079ac:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <vPortSetupTimerInterrupt+0x3c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a0a      	ldr	r2, [pc, #40]	; (80079dc <vPortSetupTimerInterrupt+0x40>)
 80079b2:	fba2 2303 	umull	r2, r3, r2, r3
 80079b6:	099b      	lsrs	r3, r3, #6
 80079b8:	4a09      	ldr	r2, [pc, #36]	; (80079e0 <vPortSetupTimerInterrupt+0x44>)
 80079ba:	3b01      	subs	r3, #1
 80079bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079be:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <vPortSetupTimerInterrupt+0x34>)
 80079c0:	2207      	movs	r2, #7
 80079c2:	601a      	str	r2, [r3, #0]
}
 80079c4:	bf00      	nop
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	e000e010 	.word	0xe000e010
 80079d4:	e000e018 	.word	0xe000e018
 80079d8:	20000000 	.word	0x20000000
 80079dc:	10624dd3 	.word	0x10624dd3
 80079e0:	e000e014 	.word	0xe000e014

080079e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079f4 <vPortEnableVFP+0x10>
 80079e8:	6801      	ldr	r1, [r0, #0]
 80079ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079ee:	6001      	str	r1, [r0, #0]
 80079f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079f2:	bf00      	nop
 80079f4:	e000ed88 	.word	0xe000ed88

080079f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079fe:	f3ef 8305 	mrs	r3, IPSR
 8007a02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b0f      	cmp	r3, #15
 8007a08:	d914      	bls.n	8007a34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a0a:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <vPortValidateInterruptPriority+0x70>)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a14:	4b15      	ldr	r3, [pc, #84]	; (8007a6c <vPortValidateInterruptPriority+0x74>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	7afa      	ldrb	r2, [r7, #11]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d20a      	bcs.n	8007a34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	607b      	str	r3, [r7, #4]
}
 8007a30:	bf00      	nop
 8007a32:	e7fe      	b.n	8007a32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a34:	4b0e      	ldr	r3, [pc, #56]	; (8007a70 <vPortValidateInterruptPriority+0x78>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a3c:	4b0d      	ldr	r3, [pc, #52]	; (8007a74 <vPortValidateInterruptPriority+0x7c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d90a      	bls.n	8007a5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	603b      	str	r3, [r7, #0]
}
 8007a56:	bf00      	nop
 8007a58:	e7fe      	b.n	8007a58 <vPortValidateInterruptPriority+0x60>
	}
 8007a5a:	bf00      	nop
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	e000e3f0 	.word	0xe000e3f0
 8007a6c:	20000dc4 	.word	0x20000dc4
 8007a70:	e000ed0c 	.word	0xe000ed0c
 8007a74:	20000dc8 	.word	0x20000dc8

08007a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08a      	sub	sp, #40	; 0x28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a80:	2300      	movs	r3, #0
 8007a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a84:	f7fe fd9c 	bl	80065c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a88:	4b5b      	ldr	r3, [pc, #364]	; (8007bf8 <pvPortMalloc+0x180>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a90:	f000 f920 	bl	8007cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a94:	4b59      	ldr	r3, [pc, #356]	; (8007bfc <pvPortMalloc+0x184>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f040 8093 	bne.w	8007bc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01d      	beq.n	8007ae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007aa8:	2208      	movs	r2, #8
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4413      	add	r3, r2
 8007aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d014      	beq.n	8007ae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f023 0307 	bic.w	r3, r3, #7
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <pvPortMalloc+0x6c>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	617b      	str	r3, [r7, #20]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d06e      	beq.n	8007bc8 <pvPortMalloc+0x150>
 8007aea:	4b45      	ldr	r3, [pc, #276]	; (8007c00 <pvPortMalloc+0x188>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d869      	bhi.n	8007bc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007af4:	4b43      	ldr	r3, [pc, #268]	; (8007c04 <pvPortMalloc+0x18c>)
 8007af6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007af8:	4b42      	ldr	r3, [pc, #264]	; (8007c04 <pvPortMalloc+0x18c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007afe:	e004      	b.n	8007b0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d903      	bls.n	8007b1c <pvPortMalloc+0xa4>
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1f1      	bne.n	8007b00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b1c:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <pvPortMalloc+0x180>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d050      	beq.n	8007bc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2208      	movs	r2, #8
 8007b2c:	4413      	add	r3, r2
 8007b2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	2308      	movs	r3, #8
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d91f      	bls.n	8007b88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <pvPortMalloc+0xf8>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	613b      	str	r3, [r7, #16]
}
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b82:	69b8      	ldr	r0, [r7, #24]
 8007b84:	f000 f908 	bl	8007d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b88:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <pvPortMalloc+0x188>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	4a1b      	ldr	r2, [pc, #108]	; (8007c00 <pvPortMalloc+0x188>)
 8007b94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b96:	4b1a      	ldr	r3, [pc, #104]	; (8007c00 <pvPortMalloc+0x188>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	4b1b      	ldr	r3, [pc, #108]	; (8007c08 <pvPortMalloc+0x190>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d203      	bcs.n	8007baa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ba2:	4b17      	ldr	r3, [pc, #92]	; (8007c00 <pvPortMalloc+0x188>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a18      	ldr	r2, [pc, #96]	; (8007c08 <pvPortMalloc+0x190>)
 8007ba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	4b13      	ldr	r3, [pc, #76]	; (8007bfc <pvPortMalloc+0x184>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bbe:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <pvPortMalloc+0x194>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	4a11      	ldr	r2, [pc, #68]	; (8007c0c <pvPortMalloc+0x194>)
 8007bc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bc8:	f7fe fd08 	bl	80065dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <pvPortMalloc+0x174>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	60fb      	str	r3, [r7, #12]
}
 8007be8:	bf00      	nop
 8007bea:	e7fe      	b.n	8007bea <pvPortMalloc+0x172>
	return pvReturn;
 8007bec:	69fb      	ldr	r3, [r7, #28]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3728      	adds	r7, #40	; 0x28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20002dd4 	.word	0x20002dd4
 8007bfc:	20002de8 	.word	0x20002de8
 8007c00:	20002dd8 	.word	0x20002dd8
 8007c04:	20002dcc 	.word	0x20002dcc
 8007c08:	20002ddc 	.word	0x20002ddc
 8007c0c:	20002de0 	.word	0x20002de0

08007c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d04d      	beq.n	8007cbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c22:	2308      	movs	r3, #8
 8007c24:	425b      	negs	r3, r3
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	4413      	add	r3, r2
 8007c2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	4b24      	ldr	r3, [pc, #144]	; (8007cc8 <vPortFree+0xb8>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <vPortFree+0x44>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	60fb      	str	r3, [r7, #12]
}
 8007c50:	bf00      	nop
 8007c52:	e7fe      	b.n	8007c52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <vPortFree+0x62>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	60bb      	str	r3, [r7, #8]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	4b14      	ldr	r3, [pc, #80]	; (8007cc8 <vPortFree+0xb8>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d01e      	beq.n	8007cbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d11a      	bne.n	8007cbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	4b0e      	ldr	r3, [pc, #56]	; (8007cc8 <vPortFree+0xb8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	43db      	mvns	r3, r3
 8007c92:	401a      	ands	r2, r3
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c98:	f7fe fc92 	bl	80065c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	; (8007ccc <vPortFree+0xbc>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	4a09      	ldr	r2, [pc, #36]	; (8007ccc <vPortFree+0xbc>)
 8007ca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007caa:	6938      	ldr	r0, [r7, #16]
 8007cac:	f000 f874 	bl	8007d98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007cb0:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <vPortFree+0xc0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	4a06      	ldr	r2, [pc, #24]	; (8007cd0 <vPortFree+0xc0>)
 8007cb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007cba:	f7fe fc8f 	bl	80065dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cbe:	bf00      	nop
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20002de8 	.word	0x20002de8
 8007ccc:	20002dd8 	.word	0x20002dd8
 8007cd0:	20002de4 	.word	0x20002de4

08007cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ce0:	4b27      	ldr	r3, [pc, #156]	; (8007d80 <prvHeapInit+0xac>)
 8007ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00c      	beq.n	8007d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3307      	adds	r3, #7
 8007cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0307 	bic.w	r3, r3, #7
 8007cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	4a1f      	ldr	r2, [pc, #124]	; (8007d80 <prvHeapInit+0xac>)
 8007d04:	4413      	add	r3, r2
 8007d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d0c:	4a1d      	ldr	r2, [pc, #116]	; (8007d84 <prvHeapInit+0xb0>)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d12:	4b1c      	ldr	r3, [pc, #112]	; (8007d84 <prvHeapInit+0xb0>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d20:	2208      	movs	r2, #8
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	1a9b      	subs	r3, r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 0307 	bic.w	r3, r3, #7
 8007d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4a15      	ldr	r2, [pc, #84]	; (8007d88 <prvHeapInit+0xb4>)
 8007d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <prvHeapInit+0xb4>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d3e:	4b12      	ldr	r3, [pc, #72]	; (8007d88 <prvHeapInit+0xb4>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d54:	4b0c      	ldr	r3, [pc, #48]	; (8007d88 <prvHeapInit+0xb4>)
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	4a0a      	ldr	r2, [pc, #40]	; (8007d8c <prvHeapInit+0xb8>)
 8007d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	4a09      	ldr	r2, [pc, #36]	; (8007d90 <prvHeapInit+0xbc>)
 8007d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d6c:	4b09      	ldr	r3, [pc, #36]	; (8007d94 <prvHeapInit+0xc0>)
 8007d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d72:	601a      	str	r2, [r3, #0]
}
 8007d74:	bf00      	nop
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	20000dcc 	.word	0x20000dcc
 8007d84:	20002dcc 	.word	0x20002dcc
 8007d88:	20002dd4 	.word	0x20002dd4
 8007d8c:	20002ddc 	.word	0x20002ddc
 8007d90:	20002dd8 	.word	0x20002dd8
 8007d94:	20002de8 	.word	0x20002de8

08007d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007da0:	4b28      	ldr	r3, [pc, #160]	; (8007e44 <prvInsertBlockIntoFreeList+0xac>)
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	e002      	b.n	8007dac <prvInsertBlockIntoFreeList+0x14>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d8f7      	bhi.n	8007da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d108      	bne.n	8007dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	441a      	add	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	441a      	add	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d118      	bne.n	8007e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	4b15      	ldr	r3, [pc, #84]	; (8007e48 <prvInsertBlockIntoFreeList+0xb0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d00d      	beq.n	8007e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	441a      	add	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	e008      	b.n	8007e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e16:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <prvInsertBlockIntoFreeList+0xb0>)
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	e003      	b.n	8007e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d002      	beq.n	8007e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e36:	bf00      	nop
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	20002dcc 	.word	0x20002dcc
 8007e48:	20002dd4 	.word	0x20002dd4

08007e4c <_ZN3key3KeyC1ERKNS_9key_set_tE>:
#include <key.h>
//--------------
namespace key
{
	// Class Button
	Key::Key(const key_set_t &button_set):
 8007e4c:	b4b0      	push	{r4, r5, r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
		is_active(false),
		state(INACTIVE_STATE),
		time(0),
		_set(button_set)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	705a      	strb	r2, [r3, #1]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	605a      	str	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	f103 0408 	add.w	r4, r3, #8
 8007e70:	4615      	mov	r5, r2
 8007e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e7a:	e884 0003 	stmia.w	r4, {r0, r1}
	{}
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bcb0      	pop	{r4, r5, r7}
 8007e88:	4770      	bx	lr

08007e8a <_ZNK3key3Key2idEv>:
	//----------------------------
	const uint32_t Key::id() const
	{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
		return _set.id;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
	}
 8007e96:	4618      	mov	r0, r3
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <_ZNK3key3Key9is_repeatEv>:
	//-------------------------------
	const bool Key::is_repeat() const
	{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
		return _set.is_repeat;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	7f1b      	ldrb	r3, [r3, #28]
	}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <_ZNK3key3Key4readEv>:
	//--------------------------
	const bool Key::read() const
	{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
		return (HAL_GPIO_ReadPin(_set.port, _set.pin) == _set.trigger_level);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689a      	ldr	r2, [r3, #8]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	899b      	ldrh	r3, [r3, #12]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	4610      	mov	r0, r2
 8007ece:	f7f9 fc21 	bl	8001714 <HAL_GPIO_ReadPin>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	7d1b      	ldrb	r3, [r3, #20]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	bf0c      	ite	eq
 8007ede:	2301      	moveq	r3, #1
 8007ee0:	2300      	movne	r3, #0
 8007ee2:	b2db      	uxtb	r3, r3
	}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <_ZN3key3Key5resetEv>:
	//---------------
	void Key::reset()
	{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
		is_active = false;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	701a      	strb	r2, [r3, #0]
		state = INACTIVE_STATE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	705a      	strb	r2, [r3, #1]
		time = 0;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	605a      	str	r2, [r3, #4]
	}
 8007f06:	bf00      	nop
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <_ZNK3key3Key7timeoutEv>:
	//---------------------------------
	const uint32_t Key::timeout() const
	{
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
		return _set.timeout;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	699b      	ldr	r3, [r3, #24]
	}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <_ZNK3key3Key13trigger_stateEv>:
	//---------------------------------------
	const KeyState Key::trigger_state() const
	{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
		return _set.trigger_state;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	7d5b      	ldrb	r3, [r3, #21]
	}
 8007f36:	4618      	mov	r0, r3
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <_ZN3key8KeyboardC1EPPNS_3KeyEj>:
	//---------------
	// Class Keyboard
	uint32_t Keyboard::period = 100;
	Keyboard::Keyboard(Key **buttons, size_t size)
 8007f42:	b480      	push	{r7}
 8007f44:	b085      	sub	sp, #20
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	607a      	str	r2, [r7, #4]
	{
		_buttons = buttons;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	601a      	str	r2, [r3, #0]
		_size = size;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	605a      	str	r2, [r3, #4]
	}
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <_ZN3key8Keyboard4scanEv>:
	//-------------------
	void Keyboard::scan()
	{
 8007f68:	b590      	push	{r4, r7, lr}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
		for(uint8_t i = 0; i < _size; i++)
 8007f70:	2300      	movs	r3, #0
 8007f72:	73fb      	strb	r3, [r7, #15]
 8007f74:	7bfa      	ldrb	r2, [r7, #15]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	f080 808c 	bcs.w	8008098 <_ZN3key8Keyboard4scanEv+0x130>
		{
			Key *button = *(_buttons + i);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	60bb      	str	r3, [r7, #8]

			if(button)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d07d      	beq.n	8008090 <_ZN3key8Keyboard4scanEv+0x128>
			{
				if(button->read())
 8007f94:	68b8      	ldr	r0, [r7, #8]
 8007f96:	f7ff ff90 	bl	8007eba <_ZNK3key3Key4readEv>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d054      	beq.n	800804a <_ZN3key8Keyboard4scanEv+0xe2>
				{
					switch(button->state)
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	785b      	ldrb	r3, [r3, #1]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d02c      	beq.n	8008002 <_ZN3key8Keyboard4scanEv+0x9a>
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	dc41      	bgt.n	8008030 <_ZN3key8Keyboard4scanEv+0xc8>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <_ZN3key8Keyboard4scanEv+0x4e>
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d004      	beq.n	8007fbe <_ZN3key8Keyboard4scanEv+0x56>
									button->is_active = true;
								}
							}
						break;

						default: break;
 8007fb4:	e03c      	b.n	8008030 <_ZN3key8Keyboard4scanEv+0xc8>
							button->state = BOUNCE_STATE;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	705a      	strb	r2, [r3, #1]
						break;
 8007fbc:	e03d      	b.n	800803a <_ZN3key8Keyboard4scanEv+0xd2>
							if(button->time >= button->timeout())
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	685c      	ldr	r4, [r3, #4]
 8007fc2:	68b8      	ldr	r0, [r7, #8]
 8007fc4:	f7ff ffa5 	bl	8007f12 <_ZNK3key3Key7timeoutEv>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	bf2c      	ite	cs
 8007fce:	2301      	movcs	r3, #1
 8007fd0:	2300      	movcc	r3, #0
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d02d      	beq.n	8008034 <_ZN3key8Keyboard4scanEv+0xcc>
								button->state = PRESSED_STATE;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	705a      	strb	r2, [r3, #1]
								if(button->trigger_state() == PRESSED_STATE)
 8007fde:	68b8      	ldr	r0, [r7, #8]
 8007fe0:	f7ff ffa3 	bl	8007f2a <_ZNK3key3Key13trigger_stateEv>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	bf0c      	ite	eq
 8007fea:	2301      	moveq	r3, #1
 8007fec:	2300      	movne	r3, #0
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01f      	beq.n	8008034 <_ZN3key8Keyboard4scanEv+0xcc>
									button->is_active = true;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	701a      	strb	r2, [r3, #0]
									button->time = 0;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	605a      	str	r2, [r3, #4]
						break;
 8008000:	e018      	b.n	8008034 <_ZN3key8Keyboard4scanEv+0xcc>
							if(button->is_repeat())
 8008002:	68b8      	ldr	r0, [r7, #8]
 8008004:	f7ff ff4d 	bl	8007ea2 <_ZNK3key3Key9is_repeatEv>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d014      	beq.n	8008038 <_ZN3key8Keyboard4scanEv+0xd0>
								if(button->time >= button->timeout())
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	685c      	ldr	r4, [r3, #4]
 8008012:	68b8      	ldr	r0, [r7, #8]
 8008014:	f7ff ff7d 	bl	8007f12 <_ZNK3key3Key7timeoutEv>
 8008018:	4603      	mov	r3, r0
 800801a:	429c      	cmp	r4, r3
 800801c:	bf2c      	ite	cs
 800801e:	2301      	movcs	r3, #1
 8008020:	2300      	movcc	r3, #0
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	d007      	beq.n	8008038 <_ZN3key8Keyboard4scanEv+0xd0>
									button->is_active = true;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2201      	movs	r2, #1
 800802c:	701a      	strb	r2, [r3, #0]
						break;
 800802e:	e003      	b.n	8008038 <_ZN3key8Keyboard4scanEv+0xd0>
						default: break;
 8008030:	bf00      	nop
 8008032:	e002      	b.n	800803a <_ZN3key8Keyboard4scanEv+0xd2>
						break;
 8008034:	bf00      	nop
 8008036:	e000      	b.n	800803a <_ZN3key8Keyboard4scanEv+0xd2>
						break;
 8008038:	bf00      	nop
					}

					button->time += period;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	4b18      	ldr	r3, [pc, #96]	; (80080a0 <_ZN3key8Keyboard4scanEv+0x138>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	441a      	add	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	605a      	str	r2, [r3, #4]
 8008048:	e022      	b.n	8008090 <_ZN3key8Keyboard4scanEv+0x128>
				}
				else
				{
					if(button->trigger_state() == RELEASED_STATE)
 800804a:	68b8      	ldr	r0, [r7, #8]
 800804c:	f7ff ff6d 	bl	8007f2a <_ZNK3key3Key13trigger_stateEv>
 8008050:	4603      	mov	r3, r0
 8008052:	2b03      	cmp	r3, #3
 8008054:	bf0c      	ite	eq
 8008056:	2301      	moveq	r3, #1
 8008058:	2300      	movne	r3, #0
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d014      	beq.n	800808a <_ZN3key8Keyboard4scanEv+0x122>
					{
						if(button->time >= button->timeout())
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	685c      	ldr	r4, [r3, #4]
 8008064:	68b8      	ldr	r0, [r7, #8]
 8008066:	f7ff ff54 	bl	8007f12 <_ZNK3key3Key7timeoutEv>
 800806a:	4603      	mov	r3, r0
 800806c:	429c      	cmp	r4, r3
 800806e:	bf2c      	ite	cs
 8008070:	2301      	movcs	r3, #1
 8008072:	2300      	movcc	r3, #0
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <_ZN3key8Keyboard4scanEv+0x11a>
						{
							button->is_active = true;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2201      	movs	r2, #1
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	e006      	b.n	8008090 <_ZN3key8Keyboard4scanEv+0x128>
						}
						else
							button->reset();
 8008082:	68b8      	ldr	r0, [r7, #8]
 8008084:	f7ff ff32 	bl	8007eec <_ZN3key3Key5resetEv>
 8008088:	e002      	b.n	8008090 <_ZN3key8Keyboard4scanEv+0x128>
					}
					else
						button->reset();
 800808a:	68b8      	ldr	r0, [r7, #8]
 800808c:	f7ff ff2e 	bl	8007eec <_ZN3key3Key5resetEv>
		for(uint8_t i = 0; i < _size; i++)
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	3301      	adds	r3, #1
 8008094:	73fb      	strb	r3, [r7, #15]
 8008096:	e76d      	b.n	8007f74 <_ZN3key8Keyboard4scanEv+0xc>
				}
			}
		}
	}
 8008098:	bf00      	nop
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	bd90      	pop	{r4, r7, pc}
 80080a0:	20000010 	.word	0x20000010

080080a4 <_ZN9RectangleC1Ev>:
		Rectangle(): _x(0), _y(0), _width(0), _height(0) {}
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	605a      	str	r2, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	609a      	str	r2, [r3, #8]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	60da      	str	r2, [r3, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4618      	mov	r0, r3
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <_ZNK9Rectangle5rightEv>:
		uint32_t bottom() const { return _y + _height; }
		uint32_t left() const { return _x; }
		uint32_t right() const { return _x + _width; }
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	4413      	add	r3, r2
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <_ZNK9Rectangle1XEv>:
		uint32_t top() const { return _y; }
		uint32_t X() const { return _x; }
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <_ZNK9Rectangle1YEv>:
		uint32_t Y() const { return _y; }
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	4618      	mov	r0, r3
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <_ZNK9Rectangle6heightEv>:
		uint32_t height() const { return _height; }
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	4618      	mov	r0, r3
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <_ZNK9Rectangle5widthEv>:
		uint32_t width() const { return _width; }
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <_ZN9Rectangle4setXEm>:
		void setX(uint32_t x) { _x = x; }
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <_ZN9Rectangle4setYEm>:
		void setY(uint32_t y) { _y = y; }
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	605a      	str	r2, [r3, #4]
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh>:
		_controls(nullptr),
		_count_controls(0),
		_rect(Rectangle())
	{}
	//------------------------------------------------------------------------------------------------------------
	Screen::Screen(const Rectangle &rect, Screen *next, Screen *prev, Control **controls, uint8_t count_controls):
 8008188:	b590      	push	{r4, r7, lr}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	603b      	str	r3, [r7, #0]
		is_rect(false),
		_next(next),
		_prev(prev),
		_controls(controls),
		_count_controls(count_controls),
		_rect(rect)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	605a      	str	r2, [r3, #4]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	609a      	str	r2, [r3, #8]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081ac:	60da      	str	r2, [r3, #12]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80081b4:	741a      	strb	r2, [r3, #16]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	f103 0414 	add.w	r4, r3, #20
 80081be:	4613      	mov	r3, r2
 80081c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80081c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{
		if(_controls && _count_controls > 0 && find_focus() == -1)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00c      	beq.n	80081e8 <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x60>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	7c1b      	ldrb	r3, [r3, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d008      	beq.n	80081e8 <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x60>
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 f8aa 	bl	8008330 <_ZN4menu6Screen10find_focusEv>
 80081dc:	4603      	mov	r3, r0
 80081de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e2:	d101      	bne.n	80081e8 <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x60>
 80081e4:	2301      	movs	r3, #1
 80081e6:	e000      	b.n	80081ea <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x62>
 80081e8:	2300      	movs	r3, #0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d018      	beq.n	8008220 <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x98>
		{
			for(uint8_t i = 0; i < _count_controls; i++)
 80081ee:	2300      	movs	r3, #0
 80081f0:	75fb      	strb	r3, [r7, #23]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	7c1b      	ldrb	r3, [r3, #16]
 80081f6:	7dfa      	ldrb	r2, [r7, #23]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d211      	bcs.n	8008220 <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x98>
			{
				Control *control = *(_controls + i);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	7dfb      	ldrb	r3, [r7, #23]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	613b      	str	r3, [r7, #16]
				if(control)
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x90>
				{
					control->focused = true;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	2201      	movs	r2, #1
 8008214:	715a      	strb	r2, [r3, #5]
					break;
 8008216:	e003      	b.n	8008220 <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x98>
			for(uint8_t i = 0; i < _count_controls; i++)
 8008218:	7dfb      	ldrb	r3, [r7, #23]
 800821a:	3301      	adds	r3, #1
 800821c:	75fb      	strb	r3, [r7, #23]
 800821e:	e7e8      	b.n	80081f2 <_ZN4menu6ScreenC1ERK9RectanglePS0_S4_PPNS_7ControlEh+0x6a>
				}
			}
		}
	}
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4618      	mov	r0, r3
 8008224:	371c      	adds	r7, #28
 8008226:	46bd      	mov	sp, r7
 8008228:	bd90      	pop	{r4, r7, pc}

0800822a <_ZN4menu6Screen4drawEv>:
	//-----------------
	void Screen::draw()
	{
 800822a:	b590      	push	{r4, r7, lr}
 800822c:	b08b      	sub	sp, #44	; 0x2c
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
		ssd1306_Clear();
 8008232:	f001 fb61 	bl	80098f8 <_Z13ssd1306_Clearv>
		ssd1306_SetColor(White);
 8008236:	2001      	movs	r0, #1
 8008238:	f000 fc9c 	bl	8008b74 <_Z16ssd1306_SetColor13ssd1306_color>

		if(is_rect)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d004      	beq.n	800824e <_ZN4menu6Screen4drawEv+0x24>
			ssd1306_DrawRect(_rect);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3314      	adds	r3, #20
 8008248:	4618      	mov	r0, r3
 800824a:	f001 f81a 	bl	8009282 <_Z16ssd1306_DrawRectRK9Rectangle>

		if(_controls != nullptr && _count_controls > 0)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d066      	beq.n	8008324 <_ZN4menu6Screen4drawEv+0xfa>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	7c1b      	ldrb	r3, [r3, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d062      	beq.n	8008324 <_ZN4menu6Screen4drawEv+0xfa>
		{
			int8_t index = find_focus();
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f866 	bl	8008330 <_ZN4menu6Screen10find_focusEv>
 8008264:	4603      	mov	r3, r0
 8008266:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			int8_t start_index = index;
 800826a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800826e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if(index > 0)
 8008272:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8008276:	2b00      	cmp	r3, #0
 8008278:	dd08      	ble.n	800828c <_ZN4menu6Screen4drawEv+0x62>
				start_index = start_position(index);
 800827a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f8e1 	bl	8008448 <_ZN4menu6Screen14start_positionEa>
 8008286:	4603      	mov	r3, r0
 8008288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			uint16_t pos_y = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	84bb      	strh	r3, [r7, #36]	; 0x24

			for(uint8_t i = start_index; i < _count_controls; i++)
 8008290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	7c1b      	ldrb	r3, [r3, #16]
 800829c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d23f      	bcs.n	8008324 <_ZN4menu6Screen4drawEv+0xfa>
			{
				Control *control = *(_controls + i);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68da      	ldr	r2, [r3, #12]
 80082a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	61fb      	str	r3, [r7, #28]

				if(control != nullptr)
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d02d      	beq.n	8008316 <_ZN4menu6Screen4drawEv+0xec>
				{
					Rectangle rect = control->rect();
 80082ba:	69f8      	ldr	r0, [r7, #28]
 80082bc:	f000 f99d 	bl	80085fa <_ZNK4menu7Control4rectEv>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f107 040c 	add.w	r4, r7, #12
 80082c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					rect.setX(0);
 80082cc:	f107 030c 	add.w	r3, r7, #12
 80082d0:	2100      	movs	r1, #0
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff ff3c 	bl	8008150 <_ZN9Rectangle4setXEm>
					rect.setY(pos_y);
 80082d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80082da:	f107 030c 	add.w	r3, r7, #12
 80082de:	4611      	mov	r1, r2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff ff43 	bl	800816c <_ZN9Rectangle4setYEm>
					control->setRectangle(rect);
 80082e6:	f107 030c 	add.w	r3, r7, #12
 80082ea:	4619      	mov	r1, r3
 80082ec:	69f8      	ldr	r0, [r7, #28]
 80082ee:	f000 f990 	bl	8008612 <_ZN4menu7Control12setRectangleERK9Rectangle>

					if(pos_y < SSD1306_HEIGHT)
 80082f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082f4:	2b3f      	cmp	r3, #63	; 0x3f
 80082f6:	d814      	bhi.n	8008322 <_ZN4menu6Screen4drawEv+0xf8>
						control->draw();
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69f8      	ldr	r0, [r7, #28]
 8008300:	4798      	blx	r3
					else
						break;

					pos_y += rect.height();
 8008302:	f107 030c 	add.w	r3, r7, #12
 8008306:	4618      	mov	r0, r3
 8008308:	f7ff ff0a 	bl	8008120 <_ZNK9Rectangle6heightEv>
 800830c:	4603      	mov	r3, r0
 800830e:	b29a      	uxth	r2, r3
 8008310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008312:	4413      	add	r3, r2
 8008314:	84bb      	strh	r3, [r7, #36]	; 0x24
			for(uint8_t i = start_index; i < _count_controls; i++)
 8008316:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800831a:	3301      	adds	r3, #1
 800831c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008320:	e7ba      	b.n	8008298 <_ZN4menu6Screen4drawEv+0x6e>
						break;
 8008322:	bf00      	nop
				}
			}
		}

		ssd1306_UpdateScreen();
 8008324:	f000 fcda 	bl	8008cdc <_Z20ssd1306_UpdateScreenv>
	}
 8008328:	bf00      	nop
 800832a:	372c      	adds	r7, #44	; 0x2c
 800832c:	46bd      	mov	sp, r7
 800832e:	bd90      	pop	{r4, r7, pc}

08008330 <_ZN4menu6Screen10find_focusEv>:
	//-------------------------
	int8_t Screen::find_focus()
	{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
		for(uint8_t i = 0; i < _count_controls; i++)
 8008338:	2300      	movs	r3, #0
 800833a:	73fb      	strb	r3, [r7, #15]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	7c1b      	ldrb	r3, [r3, #16]
 8008340:	7bfa      	ldrb	r2, [r7, #15]
 8008342:	429a      	cmp	r2, r3
 8008344:	d214      	bcs.n	8008370 <_ZN4menu6Screen10find_focusEv+0x40>
		{
			Control *control = *(_controls + i);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	60bb      	str	r3, [r7, #8]
			if(control && control->focused)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d006      	beq.n	8008368 <_ZN4menu6Screen10find_focusEv+0x38>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	795b      	ldrb	r3, [r3, #5]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <_ZN4menu6Screen10find_focusEv+0x38>
				return i;
 8008362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008366:	e005      	b.n	8008374 <_ZN4menu6Screen10find_focusEv+0x44>
		for(uint8_t i = 0; i < _count_controls; i++)
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	3301      	adds	r3, #1
 800836c:	73fb      	strb	r3, [r7, #15]
 800836e:	e7e5      	b.n	800833c <_ZN4menu6Screen10find_focusEv+0xc>
		}

		return -1;
 8008370:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <_ZN4menu6Screen7onClickENS_5key_tE>:
	//----------------------------
	void Screen::onClick(key_t id)
	{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
		int8_t index = find_focus();
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff ffcf 	bl	8008330 <_ZN4menu6Screen10find_focusEv>
 8008392:	4603      	mov	r3, r0
 8008394:	75fb      	strb	r3, [r7, #23]

		if(index == -1)
 8008396:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800839a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839e:	d04d      	beq.n	800843c <_ZN4menu6Screen7onClickENS_5key_tE+0xbc>
			return;

		Control *control_current = *(_controls + index);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	613b      	str	r3, [r7, #16]

		// если onClick возвращает истину, то обрабатывать не надо (уже обработано)
		if(control_current == nullptr || control_current->onClick(id))
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00a      	beq.n	80083cc <_ZN4menu6Screen7onClickENS_5key_tE+0x4c>
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3304      	adds	r3, #4
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	78fa      	ldrb	r2, [r7, #3]
 80083c0:	4611      	mov	r1, r2
 80083c2:	6938      	ldr	r0, [r7, #16]
 80083c4:	4798      	blx	r3
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <_ZN4menu6Screen7onClickENS_5key_tE+0x50>
 80083cc:	2301      	movs	r3, #1
 80083ce:	e000      	b.n	80083d2 <_ZN4menu6Screen7onClickENS_5key_tE+0x52>
 80083d0:	2300      	movs	r3, #0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d134      	bne.n	8008440 <_ZN4menu6Screen7onClickENS_5key_tE+0xc0>
			return;

		if(id == BUTTON_UP)
 80083d6:	78fb      	ldrb	r3, [r7, #3]
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d115      	bne.n	8008408 <_ZN4menu6Screen7onClickENS_5key_tE+0x88>
		{
			if(index > 0)
 80083dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dd2e      	ble.n	8008442 <_ZN4menu6Screen7onClickENS_5key_tE+0xc2>
			{
				Control *control_prev = *(_controls + (index - 1));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80083f0:	3b01      	subs	r3, #1
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60bb      	str	r3, [r7, #8]
				control_current->focused = false;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	2200      	movs	r2, #0
 80083fe:	715a      	strb	r2, [r3, #5]
				control_prev->focused = true;
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2201      	movs	r2, #1
 8008404:	715a      	strb	r2, [r3, #5]
 8008406:	e01c      	b.n	8008442 <_ZN4menu6Screen7onClickENS_5key_tE+0xc2>
			}
		}
		else if(id == BUTTON_DOWN)
 8008408:	78fb      	ldrb	r3, [r7, #3]
 800840a:	2b04      	cmp	r3, #4
 800840c:	d119      	bne.n	8008442 <_ZN4menu6Screen7onClickENS_5key_tE+0xc2>
		{
			if(index < (_count_controls - 1))
 800840e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	7c1b      	ldrb	r3, [r3, #16]
 8008416:	3b01      	subs	r3, #1
 8008418:	429a      	cmp	r2, r3
 800841a:	da12      	bge.n	8008442 <_ZN4menu6Screen7onClickENS_5key_tE+0xc2>
			{
				Control *control_next = *(_controls + (index + 1));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	68da      	ldr	r2, [r3, #12]
 8008420:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008424:	3301      	adds	r3, #1
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60fb      	str	r3, [r7, #12]

				control_current->focused = false;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2200      	movs	r2, #0
 8008432:	715a      	strb	r2, [r3, #5]
				control_next->focused    = true;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2201      	movs	r2, #1
 8008438:	715a      	strb	r2, [r3, #5]
 800843a:	e002      	b.n	8008442 <_ZN4menu6Screen7onClickENS_5key_tE+0xc2>
			return;
 800843c:	bf00      	nop
 800843e:	e000      	b.n	8008442 <_ZN4menu6Screen7onClickENS_5key_tE+0xc2>
			return;
 8008440:	bf00      	nop
			}
		}
	}
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <_ZN4menu6Screen14start_positionEa>:
	//-----------------------------------------
	int8_t Screen::start_position(int8_t index)
	{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
		int8_t start_index = index;
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	75fb      	strb	r3, [r7, #23]
		uint16_t height = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	82bb      	strh	r3, [r7, #20]

		Control *control = *(_controls + index);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	613b      	str	r3, [r7, #16]
		if(control)
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d008      	beq.n	8008484 <_ZN4menu6Screen14start_positionEa+0x3c>
			height = control->rect().height();
 8008472:	6938      	ldr	r0, [r7, #16]
 8008474:	f000 f8c1 	bl	80085fa <_ZNK4menu7Control4rectEv>
 8008478:	4603      	mov	r3, r0
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff fe50 	bl	8008120 <_ZNK9Rectangle6heightEv>
 8008480:	4603      	mov	r3, r0
 8008482:	82bb      	strh	r3, [r7, #20]

		do
		{
			Control *control = *(_controls + --start_index);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	7dfb      	ldrb	r3, [r7, #23]
 800848a:	3b01      	subs	r3, #1
 800848c:	b2db      	uxtb	r3, r3
 800848e:	75fb      	strb	r3, [r7, #23]
 8008490:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]
			if(control)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00b      	beq.n	80084ba <_ZN4menu6Screen14start_positionEa+0x72>
			{
				height += control->rect().height();
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 f8a9 	bl	80085fa <_ZNK4menu7Control4rectEv>
 80084a8:	4603      	mov	r3, r0
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7ff fe38 	bl	8008120 <_ZNK9Rectangle6heightEv>
 80084b0:	4603      	mov	r3, r0
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	8abb      	ldrh	r3, [r7, #20]
 80084b6:	4413      	add	r3, r2
 80084b8:	82bb      	strh	r3, [r7, #20]
			}
		} while(height < SSD1306_HEIGHT && start_index > 0);
 80084ba:	8abb      	ldrh	r3, [r7, #20]
 80084bc:	2b3f      	cmp	r3, #63	; 0x3f
 80084be:	d804      	bhi.n	80084ca <_ZN4menu6Screen14start_positionEa+0x82>
 80084c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	dd00      	ble.n	80084ca <_ZN4menu6Screen14start_positionEa+0x82>
		do
 80084c8:	e7dc      	b.n	8008484 <_ZN4menu6Screen14start_positionEa+0x3c>

		return start_index;
 80084ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
	}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3718      	adds	r7, #24
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <_ZN4menu7ControlC1ERK9RectangleRK6font_t>:
		is_rect(true),
		_rect(Rectangle(0, 0, 0, 0)),
		_font(font_t({ 0, 0, nullptr }))
	{}
	//----------------------------------------------------------
	Control::Control(const Rectangle &rect, const font_t &font):
 80084d8:	b490      	push	{r4, r7}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
		filled(false),
		focused(false),
		margin({ 5, 5, 5, 5 }),
		is_rect(true),
		_rect(rect),
		_font(font)
 80084e4:	4a12      	ldr	r2, [pc, #72]	; (8008530 <_ZN4menu7ControlC1ERK9RectangleRK6font_t+0x58>)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	711a      	strb	r2, [r3, #4]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	715a      	strb	r2, [r3, #5]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4a0e      	ldr	r2, [pc, #56]	; (8008534 <_ZN4menu7ControlC1ERK9RectangleRK6font_t+0x5c>)
 80084fa:	3306      	adds	r3, #6
 80084fc:	6810      	ldr	r0, [r2, #0]
 80084fe:	6018      	str	r0, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2201      	movs	r2, #1
 8008504:	729a      	strb	r2, [r3, #10]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	f103 040c 	add.w	r4, r3, #12
 800850e:	4613      	mov	r3, r2
 8008510:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008512:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	331c      	adds	r3, #28
 800851c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008520:	e883 0003 	stmia.w	r3, {r0, r1}
	{}
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bc90      	pop	{r4, r7}
 800852e:	4770      	bx	lr
 8008530:	08009d30 	.word	0x08009d30
 8008534:	08009c28 	.word	0x08009c28

08008538 <_ZN4menu7Control4drawEv>:
	//------------------
	void Control::draw()
	{
 8008538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853a:	b089      	sub	sp, #36	; 0x24
 800853c:	af02      	add	r7, sp, #8
 800853e:	6078      	str	r0, [r7, #4]
		Rectangle rect(_rect.X() + margin.left, _rect.Y() + margin.top, _rect.width() - margin.right*2, _rect.height() - margin.bottom*2);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	330c      	adds	r3, #12
 8008544:	4618      	mov	r0, r3
 8008546:	f7ff fdd3 	bl	80080f0 <_ZNK9Rectangle1XEv>
 800854a:	4602      	mov	r2, r0
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	799b      	ldrb	r3, [r3, #6]
 8008550:	18d4      	adds	r4, r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	330c      	adds	r3, #12
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fdd6 	bl	8008108 <_ZNK9Rectangle1YEv>
 800855c:	4602      	mov	r2, r0
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	7a1b      	ldrb	r3, [r3, #8]
 8008562:	18d5      	adds	r5, r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	330c      	adds	r3, #12
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff fde5 	bl	8008138 <_ZNK9Rectangle5widthEv>
 800856e:	4602      	mov	r2, r0
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	79db      	ldrb	r3, [r3, #7]
 8008574:	005b      	lsls	r3, r3, #1
 8008576:	1ad6      	subs	r6, r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	330c      	adds	r3, #12
 800857c:	4618      	mov	r0, r3
 800857e:	f7ff fdcf 	bl	8008120 <_ZNK9Rectangle6heightEv>
 8008582:	4602      	mov	r2, r0
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	7a5b      	ldrb	r3, [r3, #9]
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	f107 0008 	add.w	r0, r7, #8
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	4633      	mov	r3, r6
 8008594:	462a      	mov	r2, r5
 8008596:	4621      	mov	r1, r4
 8008598:	f7f7 fe22 	bl	80001e0 <_ZN9RectangleC1Emmmm>

		ssd1306_SetColor(White);
 800859c:	2001      	movs	r0, #1
 800859e:	f000 fae9 	bl	8008b74 <_Z16ssd1306_SetColor13ssd1306_color>

		if(is_rect)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	7a9b      	ldrb	r3, [r3, #10]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d004      	beq.n	80085b4 <_ZN4menu7Control4drawEv+0x7c>
			ssd1306_DrawRect(rect);
 80085aa:	f107 0308 	add.w	r3, r7, #8
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fe67 	bl	8009282 <_Z16ssd1306_DrawRectRK9Rectangle>

		if(filled)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	791b      	ldrb	r3, [r3, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d004      	beq.n	80085c6 <_ZN4menu7Control4drawEv+0x8e>
			ssd1306_DrawFillRect(rect);
 80085bc:	f107 0308 	add.w	r3, r7, #8
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 fec1 	bl	8009348 <_Z20ssd1306_DrawFillRectRK9Rectangle>

		if(focused)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	795b      	ldrb	r3, [r3, #5]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d004      	beq.n	80085d8 <_ZN4menu7Control4drawEv+0xa0>
			ssd1306_DrawRect(_rect);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	330c      	adds	r3, #12
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 fe55 	bl	8009282 <_Z16ssd1306_DrawRectRK9Rectangle>
	}
 80085d8:	bf00      	nop
 80085da:	371c      	adds	r7, #28
 80085dc:	46bd      	mov	sp, r7
 80085de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085e0 <_ZN4menu7Control7onClickENS_5key_tE>:
	{
		return _font;
	}
	//------------------------------------------
	bool Control::onClick(const key_t button_id)
	{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
		return false;
 80085ec:	2300      	movs	r3, #0
	}
 80085ee:	4618      	mov	r0, r3
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <_ZNK4menu7Control4rectEv>:
	//------------------------------------
	const Rectangle& Control::rect() const
	{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
		return _rect;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	330c      	adds	r3, #12
	}
 8008606:	4618      	mov	r0, r3
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <_ZN4menu7Control12setRectangleERK9Rectangle>:
	//-----------------------------------------------
	void Control::setRectangle(const Rectangle &rect)
	{
 8008612:	b490      	push	{r4, r7}
 8008614:	b082      	sub	sp, #8
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	6039      	str	r1, [r7, #0]
		_rect = rect;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	f103 040c 	add.w	r4, r3, #12
 8008624:	4613      	mov	r3, r2
 8008626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
 800862c:	bf00      	nop
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bc90      	pop	{r4, r7}
 8008634:	4770      	bx	lr
	...

08008638 <_ZN4menu5LabelC1EPKcRK9RectangleRK6font_t>:
		Control()
	{
		_text[0] = '\0';
	}
	//------------------------------------------------------------------------
	Label::Label(const char *text, const Rectangle &rect, const font_t &font):
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
		Control(rect, font)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff ff43 	bl	80084d8 <_ZN4menu7ControlC1ERK9RectangleRK6font_t>
 8008652:	4a09      	ldr	r2, [pc, #36]	; (8008678 <_ZN4menu5LabelC1EPKcRK9RectangleRK6font_t+0x40>)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	601a      	str	r2, [r3, #0]
	{
		_text[0] = '\0';
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		strcpy(_text, text);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3324      	adds	r3, #36	; 0x24
 8008664:	68b9      	ldr	r1, [r7, #8]
 8008666:	4618      	mov	r0, r3
 8008668:	f001 fa7e 	bl	8009b68 <strcpy>
	}
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	08009d20 	.word	0x08009d20

0800867c <_ZN4menu5Label4drawEv>:
	//----------------
	void Label::draw()
	{
 800867c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800867e:	b08b      	sub	sp, #44	; 0x2c
 8008680:	af02      	add	r7, sp, #8
 8008682:	6078      	str	r0, [r7, #4]
		Control::draw();
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff ff56 	bl	8008538 <_ZN4menu7Control4drawEv>

		Rectangle rect(_rect.X() + margin.left, _rect.Y() + margin.top, _rect.width() - margin.right*2, _rect.height() - margin.bottom*2);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	330c      	adds	r3, #12
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff fd2d 	bl	80080f0 <_ZNK9Rectangle1XEv>
 8008696:	4602      	mov	r2, r0
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	799b      	ldrb	r3, [r3, #6]
 800869c:	18d4      	adds	r4, r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	330c      	adds	r3, #12
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff fd30 	bl	8008108 <_ZNK9Rectangle1YEv>
 80086a8:	4602      	mov	r2, r0
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	7a1b      	ldrb	r3, [r3, #8]
 80086ae:	18d5      	adds	r5, r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	330c      	adds	r3, #12
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff fd3f 	bl	8008138 <_ZNK9Rectangle5widthEv>
 80086ba:	4602      	mov	r2, r0
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	79db      	ldrb	r3, [r3, #7]
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	1ad6      	subs	r6, r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	330c      	adds	r3, #12
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff fd29 	bl	8008120 <_ZNK9Rectangle6heightEv>
 80086ce:	4602      	mov	r2, r0
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	7a5b      	ldrb	r3, [r3, #9]
 80086d4:	005b      	lsls	r3, r3, #1
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	f107 000c 	add.w	r0, r7, #12
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	4633      	mov	r3, r6
 80086e0:	462a      	mov	r2, r5
 80086e2:	4621      	mov	r1, r4
 80086e4:	f7f7 fd7c 	bl	80001e0 <_ZN9RectangleC1Emmmm>

		ssd1306_color colorText = White;
 80086e8:	2301      	movs	r3, #1
 80086ea:	77fb      	strb	r3, [r7, #31]

		if(filled)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	791b      	ldrb	r3, [r3, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <_ZN4menu5Label4drawEv+0x7c>
			colorText = Black;
 80086f4:	2300      	movs	r3, #0
 80086f6:	77fb      	strb	r3, [r7, #31]

		ssd1306_SetColor(colorText);
 80086f8:	7ffb      	ldrb	r3, [r7, #31]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fa3a 	bl	8008b74 <_Z16ssd1306_SetColor13ssd1306_color>
		ssd1306_DrawString(rect, _text, _font, ALIGN_CENTER);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f103 021c 	add.w	r2, r3, #28
 800870c:	f107 000c 	add.w	r0, r7, #12
 8008710:	2330      	movs	r3, #48	; 0x30
 8008712:	f001 f814 	bl	800973e <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t>
	}
 8008716:	bf00      	nop
 8008718:	3724      	adds	r7, #36	; 0x24
 800871a:	46bd      	mov	sp, r7
 800871c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008720 <_ZN4menu6ButtonC1EPKcRK9RectangleRK6font_tPFvvE>:
		is_toggle(false),
		checked(false),
		_callback(nullptr)
	{}
	//-----------------------------------------------------------------------------------------------
	Button::Button(const char *text, const Rectangle &rect, const font_t &font, callback_t callback):
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
 800872c:	603b      	str	r3, [r7, #0]
		Label(text, rect, font),
		is_toggle(false),
		checked(false),
		_callback(callback)
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	f7ff ff7f 	bl	8008638 <_ZN4menu5LabelC1EPKcRK9RectangleRK6font_t>
 800873a:	4a09      	ldr	r2, [pc, #36]	; (8008760 <_ZN4menu6ButtonC1EPKcRK9RectangleRK6font_tPFvvE+0x40>)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	63da      	str	r2, [r3, #60]	; 0x3c
	{}
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	08009d10 	.word	0x08009d10

08008764 <_ZN4menu6Button7onClickENS_5key_tE>:
	//-----------------------------------------
	bool Button::onClick(const key_t button_id)
	{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
		if(button_id != menu::BUTTON_SELECT)
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	2b08      	cmp	r3, #8
 8008774:	d001      	beq.n	800877a <_ZN4menu6Button7onClickENS_5key_tE+0x16>
			return false;
 8008776:	2300      	movs	r3, #0
 8008778:	e01a      	b.n	80087b0 <_ZN4menu6Button7onClickENS_5key_tE+0x4c>

		if(is_toggle)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00d      	beq.n	80087a0 <_ZN4menu6Button7onClickENS_5key_tE+0x3c>
		{
			checked = !checked;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800878a:	f083 0301 	eor.w	r3, r3, #1
 800878e:	b2da      	uxtb	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			filled = checked;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	711a      	strb	r2, [r3, #4]
		}

		if(_callback != nullptr)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <_ZN4menu6Button7onClickENS_5key_tE+0x4a>
			_callback();
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ac:	4798      	blx	r3

		return true;
 80087ae:	2301      	movs	r3, #1
	}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <_ZN4menu8CheckBoxC1EPKcRK9RectangleRK6font_t11alignment_t>:
	{
		filled = false;
		is_rect = false;
	}
	//-------------------------------------------------------------------------------------------------
	CheckBox::CheckBox(const char *text, const Rectangle &rect, const font_t &font, alignment_t align):
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	603b      	str	r3, [r7, #0]
		Label(text, rect, font),
		checked(false),
		alignment(align)
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	68b9      	ldr	r1, [r7, #8]
 80087ce:	f7ff ff33 	bl	8008638 <_ZN4menu5LabelC1EPKcRK9RectangleRK6font_t>
 80087d2:	4a0b      	ldr	r2, [pc, #44]	; (8008800 <_ZN4menu8CheckBoxC1EPKcRK9RectangleRK6font_t11alignment_t+0x48>)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	7e3a      	ldrb	r2, [r7, #24]
 80087e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	{
		filled = false;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	711a      	strb	r2, [r3, #4]
		is_rect = false;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	729a      	strb	r2, [r3, #10]
	}
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	08009d00 	.word	0x08009d00

08008804 <_ZN4menu8CheckBox4drawEv>:
	//-------------------
	void CheckBox::draw()
	{
 8008804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008806:	b095      	sub	sp, #84	; 0x54
 8008808:	af02      	add	r7, sp, #8
 800880a:	6078      	str	r0, [r7, #4]
		Control::draw();
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff fe92 	bl	8008538 <_ZN4menu7Control4drawEv>
		Rectangle rect(_rect.X() + margin.left, _rect.Y() + margin.top, _rect.width() - margin.right*2, _rect.height() - margin.bottom*2);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	330c      	adds	r3, #12
 8008818:	4618      	mov	r0, r3
 800881a:	f7ff fc69 	bl	80080f0 <_ZNK9Rectangle1XEv>
 800881e:	4602      	mov	r2, r0
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	799b      	ldrb	r3, [r3, #6]
 8008824:	18d4      	adds	r4, r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	330c      	adds	r3, #12
 800882a:	4618      	mov	r0, r3
 800882c:	f7ff fc6c 	bl	8008108 <_ZNK9Rectangle1YEv>
 8008830:	4602      	mov	r2, r0
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	7a1b      	ldrb	r3, [r3, #8]
 8008836:	18d5      	adds	r5, r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	330c      	adds	r3, #12
 800883c:	4618      	mov	r0, r3
 800883e:	f7ff fc7b 	bl	8008138 <_ZNK9Rectangle5widthEv>
 8008842:	4602      	mov	r2, r0
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	79db      	ldrb	r3, [r3, #7]
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	1ad6      	subs	r6, r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	330c      	adds	r3, #12
 8008850:	4618      	mov	r0, r3
 8008852:	f7ff fc65 	bl	8008120 <_ZNK9Rectangle6heightEv>
 8008856:	4602      	mov	r2, r0
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	7a5b      	ldrb	r3, [r3, #9]
 800885c:	005b      	lsls	r3, r3, #1
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	4633      	mov	r3, r6
 8008868:	462a      	mov	r2, r5
 800886a:	4621      	mov	r1, r4
 800886c:	f7f7 fcb8 	bl	80001e0 <_ZN9RectangleC1Emmmm>
		Rectangle square(rect.X(), rect.Y(), rect.height(), rect.height());
 8008870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff fc3b 	bl	80080f0 <_ZNK9Rectangle1XEv>
 800887a:	4604      	mov	r4, r0
 800887c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fc41 	bl	8008108 <_ZNK9Rectangle1YEv>
 8008886:	4605      	mov	r5, r0
 8008888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff fc47 	bl	8008120 <_ZNK9Rectangle6heightEv>
 8008892:	4606      	mov	r6, r0
 8008894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff fc41 	bl	8008120 <_ZNK9Rectangle6heightEv>
 800889e:	4603      	mov	r3, r0
 80088a0:	f107 001c 	add.w	r0, r7, #28
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	4633      	mov	r3, r6
 80088a8:	462a      	mov	r2, r5
 80088aa:	4621      	mov	r1, r4
 80088ac:	f7f7 fc98 	bl	80001e0 <_ZN9RectangleC1Emmmm>

		if(alignment == ALIGN_LEFT)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d112      	bne.n	80088e0 <_ZN4menu8CheckBox4drawEv+0xdc>
		{
			square.setX(rect.right() - square.width());
 80088ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff fc07 	bl	80080d2 <_ZNK9Rectangle5rightEv>
 80088c4:	4604      	mov	r4, r0
 80088c6:	f107 031c 	add.w	r3, r7, #28
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7ff fc34 	bl	8008138 <_ZNK9Rectangle5widthEv>
 80088d0:	4603      	mov	r3, r0
 80088d2:	1ae2      	subs	r2, r4, r3
 80088d4:	f107 031c 	add.w	r3, r7, #28
 80088d8:	4611      	mov	r1, r2
 80088da:	4618      	mov	r0, r3
 80088dc:	f7ff fc38 	bl	8008150 <_ZN9Rectangle4setXEm>
		}

		alignment_t align = (alignment_t)(ALIGN_VCENTER | alignment);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088e6:	f043 0320 	orr.w	r3, r3, #32
 80088ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		ssd1306_SetColor(White);
 80088ee:	2001      	movs	r0, #1
 80088f0:	f000 f940 	bl	8008b74 <_Z16ssd1306_SetColor13ssd1306_color>
		ssd1306_SetCursor(square.X(), square.Y());
 80088f4:	f107 031c 	add.w	r3, r7, #28
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7ff fbf9 	bl	80080f0 <_ZNK9Rectangle1XEv>
 80088fe:	4603      	mov	r3, r0
 8008900:	b2dc      	uxtb	r4, r3
 8008902:	f107 031c 	add.w	r3, r7, #28
 8008906:	4618      	mov	r0, r3
 8008908:	f7ff fbfe 	bl	8008108 <_ZNK9Rectangle1YEv>
 800890c:	4603      	mov	r3, r0
 800890e:	b2db      	uxtb	r3, r3
 8008910:	4619      	mov	r1, r3
 8008912:	4620      	mov	r0, r4
 8008914:	f000 ffd8 	bl	80098c8 <_Z17ssd1306_SetCursorhh>
		ssd1306_DrawRect(square);
 8008918:	f107 031c 	add.w	r3, r7, #28
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fcb0 	bl	8009282 <_Z16ssd1306_DrawRectRK9Rectangle>
		if(checked)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008928:	2b00      	cmp	r3, #0
 800892a:	d04e      	beq.n	80089ca <_ZN4menu8CheckBox4drawEv+0x1c6>
		{
			uint16_t len = square.width()/2;
 800892c:	f107 031c 	add.w	r3, r7, #28
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff fc01 	bl	8008138 <_ZNK9Rectangle5widthEv>
 8008936:	4603      	mov	r3, r0
 8008938:	085b      	lsrs	r3, r3, #1
 800893a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			uint16_t cx = square.width()/2;
 800893e:	f107 031c 	add.w	r3, r7, #28
 8008942:	4618      	mov	r0, r3
 8008944:	f7ff fbf8 	bl	8008138 <_ZNK9Rectangle5widthEv>
 8008948:	4603      	mov	r3, r0
 800894a:	085b      	lsrs	r3, r3, #1
 800894c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			uint16_t cy = square.height()/2;
 8008950:	f107 031c 	add.w	r3, r7, #28
 8008954:	4618      	mov	r0, r3
 8008956:	f7ff fbe3 	bl	8008120 <_ZNK9Rectangle6heightEv>
 800895a:	4603      	mov	r3, r0
 800895c:	085b      	lsrs	r3, r3, #1
 800895e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			uint16_t pos_x = cx - len/2 - 1;
 8008962:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008966:	085b      	lsrs	r3, r3, #1
 8008968:	b29b      	uxth	r3, r3
 800896a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	b29b      	uxth	r3, r3
 8008972:	3b01      	subs	r3, #1
 8008974:	87fb      	strh	r3, [r7, #62]	; 0x3e
			uint16_t pos_y = cy - len/2 - 1;
 8008976:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800897a:	085b      	lsrs	r3, r3, #1
 800897c:	b29b      	uxth	r3, r3
 800897e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	b29b      	uxth	r3, r3
 8008986:	3b01      	subs	r3, #1
 8008988:	87bb      	strh	r3, [r7, #60]	; 0x3c
			Rectangle indicatorRect(pos_x + square.X(), pos_y + square.Y(), len, len);
 800898a:	8ffc      	ldrh	r4, [r7, #62]	; 0x3e
 800898c:	f107 031c 	add.w	r3, r7, #28
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff fbad 	bl	80080f0 <_ZNK9Rectangle1XEv>
 8008996:	4603      	mov	r3, r0
 8008998:	18e5      	adds	r5, r4, r3
 800899a:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800899c:	f107 031c 	add.w	r3, r7, #28
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7ff fbb1 	bl	8008108 <_ZNK9Rectangle1YEv>
 80089a6:	4603      	mov	r3, r0
 80089a8:	18e2      	adds	r2, r4, r3
 80089aa:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80089ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80089b2:	f107 000c 	add.w	r0, r7, #12
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	460b      	mov	r3, r1
 80089ba:	4629      	mov	r1, r5
 80089bc:	f7f7 fc10 	bl	80001e0 <_ZN9RectangleC1Emmmm>
			ssd1306_DrawFillRect(indicatorRect);
 80089c0:	f107 030c 	add.w	r3, r7, #12
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 fcbf 	bl	8009348 <_Z20ssd1306_DrawFillRectRK9Rectangle>
		}

		//rect.setX(rect.X() - 5);
		ssd1306_DrawString(rect, _text, _font, align);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f103 021c 	add.w	r2, r3, #28
 80089d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80089da:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80089de:	f000 feae 	bl	800973e <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t>
	}
 80089e2:	bf00      	nop
 80089e4:	374c      	adds	r7, #76	; 0x4c
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089ea <_ZN4menu8CheckBox7onClickENS_5key_tE>:
	//-------------------------------------------
	bool CheckBox::onClick(const key_t button_id)
	{
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	460b      	mov	r3, r1
 80089f4:	70fb      	strb	r3, [r7, #3]
		if(button_id == BUTTON_SELECT)
 80089f6:	78fb      	ldrb	r3, [r7, #3]
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d10a      	bne.n	8008a12 <_ZN4menu8CheckBox7onClickENS_5key_tE+0x28>
		{
			checked = !checked;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a02:	f083 0301 	eor.w	r3, r3, #1
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			return true;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e000      	b.n	8008a14 <_ZN4menu8CheckBox7onClickENS_5key_tE+0x2a>
		}

		return false;
 8008a12:	2300      	movs	r3, #0
	}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <_ZN5PointC1Emm>:
		Point(uint32_t x, uint32_t y): _x(x), _y(y) {}
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	605a      	str	r2, [r3, #4]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <_ZNK5Point1xEv>:
		uint32_t x() const { return _x; }
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <_ZNK5Point1yEv>:
		uint32_t y() const { return _y; }
 8008a5e:	b480      	push	{r7}
 8008a60:	b083      	sub	sp, #12
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <_ZNK9Rectangle6bottomEv>:
		uint32_t bottom() const { return _y + _height; }
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <_ZNK9Rectangle3topEv>:
		uint32_t top() const { return _y; }
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <_ZN9Rectangle8setWidthEm>:
		void setWidth(uint32_t w) { _width = w; }
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	609a      	str	r2, [r3, #8]
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <_ZN9Rectangle9setHeightEm>:
		void setHeight(uint32_t h) { _height = h; }
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	60da      	str	r2, [r3, #12]
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <_ZNK9Rectangle7isValidEv>:
		bool isValid() const { return (_x >= 0 && _y >= 0 &&_width > 0 && _height > 0); }
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d005      	beq.n	8008b00 <_ZNK9Rectangle7isValidEv+0x1c>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <_ZNK9Rectangle7isValidEv+0x1c>
 8008afc:	2301      	movs	r3, #1
 8008afe:	e000      	b.n	8008b02 <_ZNK9Rectangle7isValidEv+0x1e>
 8008b00:	2300      	movs	r3, #0
 8008b02:	4618      	mov	r0, r3
 8008b04:	370c      	adds	r7, #12
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <_ZNK9Rectangle6centerEv>:
		Point center() const
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b082      	sub	sp, #8
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	6039      	str	r1, [r7, #0]
		{
			return Point(_width/2, _height/2);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	0859      	lsrs	r1, r3, #1
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	085b      	lsrs	r3, r3, #1
 8008b24:	461a      	mov	r2, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7ff ff7a 	bl	8008a20 <_ZN5PointC1Emm>
		};
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <_ZL5widthv>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 8008b34:	b480      	push	{r7}
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	2380      	movs	r3, #128	; 0x80
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <_ZL6heightv>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	2340      	movs	r3, #64	; 0x40
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <_Z16ssd1306_GetWidthv>:
//-----------------------------
uint16_t ssd1306_GetWidth(void)
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
    return SSD1306_WIDTH;
 8008b58:	2380      	movs	r3, #128	; 0x80
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <_Z17ssd1306_GetHeightv>:
//------------------------------
uint16_t ssd1306_GetHeight(void)
{
 8008b64:	b480      	push	{r7}
 8008b66:	af00      	add	r7, sp, #0
    return SSD1306_HEIGHT;
 8008b68:	2340      	movs	r3, #64	; 0x40
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <_Z16ssd1306_SetColor13ssd1306_color>:
{
	return SSD1306.Color;
}
//----------------------------------------
void ssd1306_SetColor(ssd1306_color color)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 8008b7e:	4a04      	ldr	r2, [pc, #16]	; (8008b90 <_Z16ssd1306_SetColor13ssd1306_color+0x1c>)
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	7153      	strb	r3, [r2, #5]
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	20002dec 	.word	0x20002dec

08008b94 <_Z12ssd1306_InitP19__I2C_HandleTypeDef>:
//	Initialize the oled screen
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	_hi2c = hi2c;
 8008b9c:	4a4c      	ldr	r2, [pc, #304]	; (8008cd0 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x13c>)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6013      	str	r3, [r2, #0]
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(_hi2c, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8008ba2:	4b4b      	ldr	r3, [pc, #300]	; (8008cd0 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x13c>)
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008baa:	2205      	movs	r2, #5
 8008bac:	2178      	movs	r1, #120	; 0x78
 8008bae:	f7f8 ff4f 	bl	8001a50 <HAL_I2C_IsDeviceReady>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	bf14      	ite	ne
 8008bb8:	2301      	movne	r3, #1
 8008bba:	2300      	moveq	r3, #0
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d004      	beq.n	8008bcc <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x38>
	{
		SSD1306.Initialized = 0;
 8008bc2:	4b44      	ldr	r3, [pc, #272]	; (8008cd4 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x140>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	e07c      	b.n	8008cc6 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x132>

	// Wait for the screen to boot
	//osDelay(100);

	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 8008bcc:	20ae      	movs	r0, #174	; 0xae
 8008bce:	f000 ff3d 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8008bd2:	20d5      	movs	r0, #213	; 0xd5
 8008bd4:	f000 ff3a 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8008bd8:	20f0      	movs	r0, #240	; 0xf0
 8008bda:	f000 ff37 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SETMULTIPLEX);
 8008bde:	20a8      	movs	r0, #168	; 0xa8
 8008be0:	f000 ff34 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(height() - 1);
 8008be4:	f7ff ffae 	bl	8008b44 <_ZL6heightv>
 8008be8:	4603      	mov	r3, r0
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	3b01      	subs	r3, #1
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 ff2b 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8008bf6:	20d3      	movs	r0, #211	; 0xd3
 8008bf8:	f000 ff28 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x00);
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	f000 ff25 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SETSTARTLINE);
 8008c02:	2040      	movs	r0, #64	; 0x40
 8008c04:	f000 ff22 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(CHARGEPUMP);
 8008c08:	208d      	movs	r0, #141	; 0x8d
 8008c0a:	f000 ff1f 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x14);
 8008c0e:	2014      	movs	r0, #20
 8008c10:	f000 ff1c 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(MEMORYMODE);
 8008c14:	2020      	movs	r0, #32
 8008c16:	f000 ff19 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x00);
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	f000 ff16 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SEGREMAP);
 8008c20:	20a0      	movs	r0, #160	; 0xa0
 8008c22:	f000 ff13 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(COMSCANINC);
 8008c26:	20c0      	movs	r0, #192	; 0xc0
 8008c28:	f000 ff10 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SETCOMPINS);
 8008c2c:	20da      	movs	r0, #218	; 0xda
 8008c2e:	f000 ff0d 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>

	if (display_geometry == GEOMETRY_128_64)
 8008c32:	4b29      	ldr	r3, [pc, #164]	; (8008cd8 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x144>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d103      	bne.n	8008c42 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0xae>
	{
	  ssd1306_WriteCommand(0x12);
 8008c3a:	2012      	movs	r0, #18
 8008c3c:	f000 ff06 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
 8008c40:	e006      	b.n	8008c50 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0xbc>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8008c42:	4b25      	ldr	r3, [pc, #148]	; (8008cd8 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x144>)
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d102      	bne.n	8008c50 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0xbc>
	{
	  ssd1306_WriteCommand(0x02);
 8008c4a:	2002      	movs	r0, #2
 8008c4c:	f000 fefe 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	}

	ssd1306_WriteCommand(SETCONTRAST);
 8008c50:	2081      	movs	r0, #129	; 0x81
 8008c52:	f000 fefb 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>

	if (display_geometry == GEOMETRY_128_64)
 8008c56:	4b20      	ldr	r3, [pc, #128]	; (8008cd8 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x144>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d103      	bne.n	8008c66 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0xd2>
	{
	  ssd1306_WriteCommand(0xCF);
 8008c5e:	20cf      	movs	r0, #207	; 0xcf
 8008c60:	f000 fef4 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
 8008c64:	e006      	b.n	8008c74 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0xe0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8008c66:	4b1c      	ldr	r3, [pc, #112]	; (8008cd8 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x144>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d102      	bne.n	8008c74 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0xe0>
	{
	  ssd1306_WriteCommand(0x8F);
 8008c6e:	208f      	movs	r0, #143	; 0x8f
 8008c70:	f000 feec 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	}

	ssd1306_WriteCommand(SETPRECHARGE);
 8008c74:	20d9      	movs	r0, #217	; 0xd9
 8008c76:	f000 fee9 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xF1);
 8008c7a:	20f1      	movs	r0, #241	; 0xf1
 8008c7c:	f000 fee6 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8008c80:	20db      	movs	r0, #219	; 0xdb
 8008c82:	f000 fee3 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8008c86:	2040      	movs	r0, #64	; 0x40
 8008c88:	f000 fee0 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8008c8c:	20a4      	movs	r0, #164	; 0xa4
 8008c8e:	f000 fedd 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8008c92:	20a6      	movs	r0, #166	; 0xa6
 8008c94:	f000 feda 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8008c98:	202e      	movs	r0, #46	; 0x2e
 8008c9a:	f000 fed7 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(DISPLAYON);
 8008c9e:	20af      	movs	r0, #175	; 0xaf
 8008ca0:	f000 fed4 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8008ca4:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x140>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8008caa:	4b0a      	ldr	r3, [pc, #40]	; (8008cd4 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x140>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 8008cb0:	4b08      	ldr	r3, [pc, #32]	; (8008cd4 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x140>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	715a      	strb	r2, [r3, #5]

	// Clear screen
	ssd1306_Clear();
 8008cb6:	f000 fe1f 	bl	80098f8 <_Z13ssd1306_Clearv>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8008cba:	f000 f80f 	bl	8008cdc <_Z20ssd1306_UpdateScreenv>

	SSD1306.Initialized = 1;
 8008cbe:	4b05      	ldr	r3, [pc, #20]	; (8008cd4 <_Z12ssd1306_InitP19__I2C_HandleTypeDef+0x140>)
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return 1;
 8008cc4:	2301      	movs	r3, #1
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20002df4 	.word	0x20002df4
 8008cd4:	20002dec 	.word	0x20002dec
 8008cd8:	200031f8 	.word	0x200031f8

08008cdc <_Z20ssd1306_UpdateScreenv>:
}
//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8008cdc:	b590      	push	{r4, r7, lr}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < 8; i++)
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	71fb      	strb	r3, [r7, #7]
 8008ce6:	79fb      	ldrb	r3, [r7, #7]
 8008ce8:	2b07      	cmp	r3, #7
 8008cea:	d81a      	bhi.n	8008d22 <_Z20ssd1306_UpdateScreenv+0x46>
	{
		ssd1306_WriteCommand(0xB0 + i);
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	3b50      	subs	r3, #80	; 0x50
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 feaa 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	f000 fea7 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8008cfe:	2010      	movs	r0, #16
 8008d00:	f000 fea4 	bl	8009a4c <_ZL20ssd1306_WriteCommandh>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8008d04:	79fb      	ldrb	r3, [r7, #7]
 8008d06:	01db      	lsls	r3, r3, #7
 8008d08:	4a08      	ldr	r2, [pc, #32]	; (8008d2c <_Z20ssd1306_UpdateScreenv+0x50>)
 8008d0a:	189c      	adds	r4, r3, r2
 8008d0c:	f7ff ff12 	bl	8008b34 <_ZL5widthv>
 8008d10:	4603      	mov	r3, r0
 8008d12:	4619      	mov	r1, r3
 8008d14:	4620      	mov	r0, r4
 8008d16:	f000 febd 	bl	8009a94 <_ZL17ssd1306_WriteDataPht>
	for (i = 0; i < 8; i++)
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	71fb      	strb	r3, [r7, #7]
 8008d20:	e7e1      	b.n	8008ce6 <_Z20ssd1306_UpdateScreenv+0xa>
	}
}
 8008d22:	bf00      	nop
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd90      	pop	{r4, r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20002df8 	.word	0x20002df8

08008d30 <_Z17ssd1306_DrawPixelhh>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 8008d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	460a      	mov	r2, r1
 8008d3a:	71fb      	strb	r3, [r7, #7]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	71bb      	strb	r3, [r7, #6]
	ssd1306_color color = SSD1306.Color;
 8008d40:	4b35      	ldr	r3, [pc, #212]	; (8008e18 <_Z17ssd1306_DrawPixelhh+0xe8>)
 8008d42:	795b      	ldrb	r3, [r3, #5]
 8008d44:	73fb      	strb	r3, [r7, #15]

	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8008d46:	79fc      	ldrb	r4, [r7, #7]
 8008d48:	f7ff ff04 	bl	8008b54 <_Z16ssd1306_GetWidthv>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	429c      	cmp	r4, r3
 8008d50:	da05      	bge.n	8008d5e <_Z17ssd1306_DrawPixelhh+0x2e>
 8008d52:	79bc      	ldrb	r4, [r7, #6]
 8008d54:	f7ff ff06 	bl	8008b64 <_Z17ssd1306_GetHeightv>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	429c      	cmp	r4, r3
 8008d5c:	db01      	blt.n	8008d62 <_Z17ssd1306_DrawPixelhh+0x32>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e000      	b.n	8008d64 <_Z17ssd1306_DrawPixelhh+0x34>
 8008d62:	2300      	movs	r3, #0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d153      	bne.n	8008e10 <_Z17ssd1306_DrawPixelhh+0xe0>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8008d68:	4b2b      	ldr	r3, [pc, #172]	; (8008e18 <_Z17ssd1306_DrawPixelhh+0xe8>)
 8008d6a:	791b      	ldrb	r3, [r3, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d006      	beq.n	8008d7e <_Z17ssd1306_DrawPixelhh+0x4e>
	{
		color = (ssd1306_color) !color;
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	bf0c      	ite	eq
 8008d76:	2301      	moveq	r3, #1
 8008d78:	2300      	movne	r3, #0
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	73fb      	strb	r3, [r7, #15]
	}

	// Draw in the right color
	if (color == White)
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d121      	bne.n	8008dc8 <_Z17ssd1306_DrawPixelhh+0x98>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8008d84:	79fc      	ldrb	r4, [r7, #7]
 8008d86:	79bb      	ldrb	r3, [r7, #6]
 8008d88:	08db      	lsrs	r3, r3, #3
 8008d8a:	b2dd      	uxtb	r5, r3
 8008d8c:	462e      	mov	r6, r5
 8008d8e:	f7ff fed1 	bl	8008b34 <_ZL5widthv>
 8008d92:	4603      	mov	r3, r0
 8008d94:	4618      	mov	r0, r3
 8008d96:	4603      	mov	r3, r0
 8008d98:	fb03 f306 	mul.w	r3, r3, r6
 8008d9c:	4423      	add	r3, r4
 8008d9e:	4a1f      	ldr	r2, [pc, #124]	; (8008e1c <_Z17ssd1306_DrawPixelhh+0xec>)
 8008da0:	5cd3      	ldrb	r3, [r2, r3]
 8008da2:	b25a      	sxtb	r2, r3
 8008da4:	79bb      	ldrb	r3, [r7, #6]
 8008da6:	f003 0307 	and.w	r3, r3, #7
 8008daa:	2101      	movs	r1, #1
 8008dac:	fa01 f303 	lsl.w	r3, r1, r3
 8008db0:	b25b      	sxtb	r3, r3
 8008db2:	4313      	orrs	r3, r2
 8008db4:	b25b      	sxtb	r3, r3
 8008db6:	b2d9      	uxtb	r1, r3
 8008db8:	79fa      	ldrb	r2, [r7, #7]
 8008dba:	462b      	mov	r3, r5
 8008dbc:	fb00 f303 	mul.w	r3, r0, r3
 8008dc0:	4413      	add	r3, r2
 8008dc2:	4a16      	ldr	r2, [pc, #88]	; (8008e1c <_Z17ssd1306_DrawPixelhh+0xec>)
 8008dc4:	54d1      	strb	r1, [r2, r3]
 8008dc6:	e024      	b.n	8008e12 <_Z17ssd1306_DrawPixelhh+0xe2>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8008dc8:	79fc      	ldrb	r4, [r7, #7]
 8008dca:	79bb      	ldrb	r3, [r7, #6]
 8008dcc:	08db      	lsrs	r3, r3, #3
 8008dce:	b2dd      	uxtb	r5, r3
 8008dd0:	462e      	mov	r6, r5
 8008dd2:	f7ff feaf 	bl	8008b34 <_ZL5widthv>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	4603      	mov	r3, r0
 8008ddc:	fb03 f306 	mul.w	r3, r3, r6
 8008de0:	4423      	add	r3, r4
 8008de2:	4a0e      	ldr	r2, [pc, #56]	; (8008e1c <_Z17ssd1306_DrawPixelhh+0xec>)
 8008de4:	5cd3      	ldrb	r3, [r2, r3]
 8008de6:	b25a      	sxtb	r2, r3
 8008de8:	79bb      	ldrb	r3, [r7, #6]
 8008dea:	f003 0307 	and.w	r3, r3, #7
 8008dee:	2101      	movs	r1, #1
 8008df0:	fa01 f303 	lsl.w	r3, r1, r3
 8008df4:	b25b      	sxtb	r3, r3
 8008df6:	43db      	mvns	r3, r3
 8008df8:	b25b      	sxtb	r3, r3
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	b25b      	sxtb	r3, r3
 8008dfe:	b2d9      	uxtb	r1, r3
 8008e00:	79fa      	ldrb	r2, [r7, #7]
 8008e02:	462b      	mov	r3, r5
 8008e04:	fb00 f303 	mul.w	r3, r0, r3
 8008e08:	4413      	add	r3, r2
 8008e0a:	4a04      	ldr	r2, [pc, #16]	; (8008e1c <_Z17ssd1306_DrawPixelhh+0xec>)
 8008e0c:	54d1      	strb	r1, [r2, r3]
 8008e0e:	e000      	b.n	8008e12 <_Z17ssd1306_DrawPixelhh+0xe2>
		return;
 8008e10:	bf00      	nop
	}
}
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e18:	20002dec 	.word	0x20002dec
 8008e1c:	20002df8 	.word	0x20002df8

08008e20 <_Z26ssd1306_DrawHorizontalLinesss>:
		}
	}
}
//-------------------------------------------------------------------
void ssd1306_DrawHorizontalLine(int16_t x, int16_t y, int16_t length)
{
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	80fb      	strh	r3, [r7, #6]
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	80bb      	strh	r3, [r7, #4]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	807b      	strh	r3, [r7, #2]
    if (y < 0 || y >= height()) { return; }
 8008e32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	db06      	blt.n	8008e48 <_Z26ssd1306_DrawHorizontalLinesss+0x28>
 8008e3a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8008e3e:	f7ff fe81 	bl	8008b44 <_ZL6heightv>
 8008e42:	4603      	mov	r3, r0
 8008e44:	429c      	cmp	r4, r3
 8008e46:	db01      	blt.n	8008e4c <_Z26ssd1306_DrawHorizontalLinesss+0x2c>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e000      	b.n	8008e4e <_Z26ssd1306_DrawHorizontalLinesss+0x2e>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f040 808f 	bne.w	8008f72 <_Z26ssd1306_DrawHorizontalLinesss+0x152>

    if (x < 0)
 8008e54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	da06      	bge.n	8008e6a <_Z26ssd1306_DrawHorizontalLinesss+0x4a>
    {
        length += x;
 8008e5c:	887a      	ldrh	r2, [r7, #2]
 8008e5e:	88fb      	ldrh	r3, [r7, #6]
 8008e60:	4413      	add	r3, r2
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	807b      	strh	r3, [r7, #2]
        x = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	80fb      	strh	r3, [r7, #6]
    }

    if ( (x + length) > width())
 8008e6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e72:	18d4      	adds	r4, r2, r3
 8008e74:	f7ff fe5e 	bl	8008b34 <_ZL5widthv>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	429c      	cmp	r4, r3
 8008e7c:	bfcc      	ite	gt
 8008e7e:	2301      	movgt	r3, #1
 8008e80:	2300      	movle	r3, #0
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d007      	beq.n	8008e98 <_Z26ssd1306_DrawHorizontalLinesss+0x78>
    {
        length = (width() - x);
 8008e88:	f7ff fe54 	bl	8008b34 <_ZL5widthv>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	461a      	mov	r2, r3
 8008e90:	88fb      	ldrh	r3, [r7, #6]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	807b      	strh	r3, [r7, #2]
    }

    if (length <= 0) { return; }
 8008e98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	dd6a      	ble.n	8008f76 <_Z26ssd1306_DrawHorizontalLinesss+0x156>

    uint8_t * bufferPtr = SSD1306_Buffer;
 8008ea0:	4b3a      	ldr	r3, [pc, #232]	; (8008f8c <_Z26ssd1306_DrawHorizontalLinesss+0x16c>)
 8008ea2:	60fb      	str	r3, [r7, #12]
    bufferPtr += (y >> 3) * width();
 8008ea4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008ea8:	10dc      	asrs	r4, r3, #3
 8008eaa:	f7ff fe43 	bl	8008b34 <_ZL5widthv>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	fb03 f304 	mul.w	r3, r3, r4
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4413      	add	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
    bufferPtr += x;
 8008ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]

    uint8_t drawBit = 1 << (y & 7);
 8008ec6:	88bb      	ldrh	r3, [r7, #4]
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	2201      	movs	r2, #1
 8008ece:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed2:	72fb      	strb	r3, [r7, #11]

    switch (SSD1306.Color)
 8008ed4:	4b2e      	ldr	r3, [pc, #184]	; (8008f90 <_Z26ssd1306_DrawHorizontalLinesss+0x170>)
 8008ed6:	795b      	ldrb	r3, [r3, #5]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d034      	beq.n	8008f46 <_Z26ssd1306_DrawHorizontalLinesss+0x126>
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	dc51      	bgt.n	8008f84 <_Z26ssd1306_DrawHorizontalLinesss+0x164>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d017      	beq.n	8008f14 <_Z26ssd1306_DrawHorizontalLinesss+0xf4>
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d14d      	bne.n	8008f84 <_Z26ssd1306_DrawHorizontalLinesss+0x164>
    {
        case White:
            while (length--)
 8008ee8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	3a01      	subs	r2, #1
 8008ef0:	b292      	uxth	r2, r2
 8008ef2:	807a      	strh	r2, [r7, #2]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	bf14      	ite	ne
 8008ef8:	2301      	movne	r3, #1
 8008efa:	2300      	moveq	r3, #0
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d03b      	beq.n	8008f7a <_Z26ssd1306_DrawHorizontalLinesss+0x15a>
            {
                *bufferPtr++ |= drawBit;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	60fa      	str	r2, [r7, #12]
 8008f08:	7819      	ldrb	r1, [r3, #0]
 8008f0a:	7afa      	ldrb	r2, [r7, #11]
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	b2d2      	uxtb	r2, r2
 8008f10:	701a      	strb	r2, [r3, #0]
            while (length--)
 8008f12:	e7e9      	b.n	8008ee8 <_Z26ssd1306_DrawHorizontalLinesss+0xc8>
            };
        break;

        case Black:
            drawBit = ~drawBit;
 8008f14:	7afb      	ldrb	r3, [r7, #11]
 8008f16:	43db      	mvns	r3, r3
 8008f18:	72fb      	strb	r3, [r7, #11]
            while (length--)
 8008f1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	3a01      	subs	r2, #1
 8008f22:	b292      	uxth	r2, r2
 8008f24:	807a      	strh	r2, [r7, #2]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bf14      	ite	ne
 8008f2a:	2301      	movne	r3, #1
 8008f2c:	2300      	moveq	r3, #0
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d024      	beq.n	8008f7e <_Z26ssd1306_DrawHorizontalLinesss+0x15e>
            {
                *bufferPtr++ &= drawBit;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	60fa      	str	r2, [r7, #12]
 8008f3a:	7819      	ldrb	r1, [r3, #0]
 8008f3c:	7afa      	ldrb	r2, [r7, #11]
 8008f3e:	400a      	ands	r2, r1
 8008f40:	b2d2      	uxtb	r2, r2
 8008f42:	701a      	strb	r2, [r3, #0]
            while (length--)
 8008f44:	e7e9      	b.n	8008f1a <_Z26ssd1306_DrawHorizontalLinesss+0xfa>
            };
        break;

        case Inverse:
            while (length--)
 8008f46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	3a01      	subs	r2, #1
 8008f4e:	b292      	uxth	r2, r2
 8008f50:	807a      	strh	r2, [r7, #2]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bf14      	ite	ne
 8008f56:	2301      	movne	r3, #1
 8008f58:	2300      	moveq	r3, #0
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d010      	beq.n	8008f82 <_Z26ssd1306_DrawHorizontalLinesss+0x162>
            {
                *bufferPtr++ ^= drawBit;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	60fa      	str	r2, [r7, #12]
 8008f66:	7819      	ldrb	r1, [r3, #0]
 8008f68:	7afa      	ldrb	r2, [r7, #11]
 8008f6a:	404a      	eors	r2, r1
 8008f6c:	b2d2      	uxtb	r2, r2
 8008f6e:	701a      	strb	r2, [r3, #0]
            while (length--)
 8008f70:	e7e9      	b.n	8008f46 <_Z26ssd1306_DrawHorizontalLinesss+0x126>
    if (y < 0 || y >= height()) { return; }
 8008f72:	bf00      	nop
 8008f74:	e006      	b.n	8008f84 <_Z26ssd1306_DrawHorizontalLinesss+0x164>
    if (length <= 0) { return; }
 8008f76:	bf00      	nop
 8008f78:	e004      	b.n	8008f84 <_Z26ssd1306_DrawHorizontalLinesss+0x164>
        break;
 8008f7a:	bf00      	nop
 8008f7c:	e002      	b.n	8008f84 <_Z26ssd1306_DrawHorizontalLinesss+0x164>
        break;
 8008f7e:	bf00      	nop
 8008f80:	e000      	b.n	8008f84 <_Z26ssd1306_DrawHorizontalLinesss+0x164>
            };
        break;
 8008f82:	bf00      	nop
    }
}
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd90      	pop	{r4, r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	20002df8 	.word	0x20002df8
 8008f90:	20002dec 	.word	0x20002dec

08008f94 <_Z24ssd1306_DrawVerticalLinesss>:
//-----------------------------------------------------------------
void ssd1306_DrawVerticalLine(int16_t x, int16_t y, int16_t length)
{
 8008f94:	b590      	push	{r4, r7, lr}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	80fb      	strh	r3, [r7, #6]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	80bb      	strh	r3, [r7, #4]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	807b      	strh	r3, [r7, #2]
    if (x < 0 || x >= width()) return;
 8008fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	db06      	blt.n	8008fbc <_Z24ssd1306_DrawVerticalLinesss+0x28>
 8008fae:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8008fb2:	f7ff fdbf 	bl	8008b34 <_ZL5widthv>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	429c      	cmp	r4, r3
 8008fba:	db01      	blt.n	8008fc0 <_Z24ssd1306_DrawVerticalLinesss+0x2c>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e000      	b.n	8008fc2 <_Z24ssd1306_DrawVerticalLinesss+0x2e>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f040 810f 	bne.w	80091e6 <_Z24ssd1306_DrawVerticalLinesss+0x252>

    if (y < 0)
 8008fc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	da06      	bge.n	8008fde <_Z24ssd1306_DrawVerticalLinesss+0x4a>
    {
        length += y;
 8008fd0:	887a      	ldrh	r2, [r7, #2]
 8008fd2:	88bb      	ldrh	r3, [r7, #4]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	807b      	strh	r3, [r7, #2]
        y = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	80bb      	strh	r3, [r7, #4]
    }

    if ( (y + length) > height())
 8008fde:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008fe2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008fe6:	18d4      	adds	r4, r2, r3
 8008fe8:	f7ff fdac 	bl	8008b44 <_ZL6heightv>
 8008fec:	4603      	mov	r3, r0
 8008fee:	429c      	cmp	r4, r3
 8008ff0:	bfcc      	ite	gt
 8008ff2:	2301      	movgt	r3, #1
 8008ff4:	2300      	movle	r3, #0
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d007      	beq.n	800900c <_Z24ssd1306_DrawVerticalLinesss+0x78>
    {
        length = (height() - y);
 8008ffc:	f7ff fda2 	bl	8008b44 <_ZL6heightv>
 8009000:	4603      	mov	r3, r0
 8009002:	461a      	mov	r2, r3
 8009004:	88bb      	ldrh	r3, [r7, #4]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	b29b      	uxth	r3, r3
 800900a:	807b      	strh	r3, [r7, #2]
    }

    if (length <= 0) return;
 800900c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f340 80ea 	ble.w	80091ea <_Z24ssd1306_DrawVerticalLinesss+0x256>


    uint8_t yOffset = y & 7;
 8009016:	88bb      	ldrh	r3, [r7, #4]
 8009018:	b2db      	uxtb	r3, r3
 800901a:	f003 0307 	and.w	r3, r3, #7
 800901e:	73fb      	strb	r3, [r7, #15]
    uint8_t drawBit;
    uint8_t *bufferPtr = SSD1306_Buffer;
 8009020:	4b75      	ldr	r3, [pc, #468]	; (80091f8 <_Z24ssd1306_DrawVerticalLinesss+0x264>)
 8009022:	613b      	str	r3, [r7, #16]

    bufferPtr += (y >> 3) * width();
 8009024:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009028:	10dc      	asrs	r4, r3, #3
 800902a:	f7ff fd83 	bl	8008b34 <_ZL5widthv>
 800902e:	4603      	mov	r3, r0
 8009030:	fb03 f304 	mul.w	r3, r3, r4
 8009034:	461a      	mov	r2, r3
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	4413      	add	r3, r2
 800903a:	613b      	str	r3, [r7, #16]
    bufferPtr += x;
 800903c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	4413      	add	r3, r2
 8009044:	613b      	str	r3, [r7, #16]

    if (yOffset)
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d056      	beq.n	80090fa <_Z24ssd1306_DrawVerticalLinesss+0x166>
    {
        yOffset = 8 - yOffset;
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	f1c3 0308 	rsb	r3, r3, #8
 8009052:	73fb      	strb	r3, [r7, #15]
        drawBit = ~(0xFF >> (yOffset));
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	22ff      	movs	r2, #255	; 0xff
 8009058:	fa42 f303 	asr.w	r3, r2, r3
 800905c:	b2db      	uxtb	r3, r3
 800905e:	43db      	mvns	r3, r3
 8009060:	75fb      	strb	r3, [r7, #23]

        if (length < yOffset)
 8009062:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	429a      	cmp	r2, r3
 800906a:	da0c      	bge.n	8009086 <_Z24ssd1306_DrawVerticalLinesss+0xf2>
        {
            drawBit &= (0xFF >> (yOffset - length));
 800906c:	7bfa      	ldrb	r2, [r7, #15]
 800906e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	22ff      	movs	r2, #255	; 0xff
 8009076:	fa42 f303 	asr.w	r3, r2, r3
 800907a:	b25a      	sxtb	r2, r3
 800907c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009080:	4013      	ands	r3, r2
 8009082:	b25b      	sxtb	r3, r3
 8009084:	75fb      	strb	r3, [r7, #23]
        }

        switch (SSD1306.Color)
 8009086:	4b5d      	ldr	r3, [pc, #372]	; (80091fc <_Z24ssd1306_DrawVerticalLinesss+0x268>)
 8009088:	795b      	ldrb	r3, [r3, #5]
 800908a:	2b02      	cmp	r3, #2
 800908c:	d01a      	beq.n	80090c4 <_Z24ssd1306_DrawVerticalLinesss+0x130>
 800908e:	2b02      	cmp	r3, #2
 8009090:	dc20      	bgt.n	80090d4 <_Z24ssd1306_DrawVerticalLinesss+0x140>
 8009092:	2b00      	cmp	r3, #0
 8009094:	d009      	beq.n	80090aa <_Z24ssd1306_DrawVerticalLinesss+0x116>
 8009096:	2b01      	cmp	r3, #1
 8009098:	d11c      	bne.n	80090d4 <_Z24ssd1306_DrawVerticalLinesss+0x140>
        {
              case White:   *bufferPtr |=  drawBit; break;
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	781a      	ldrb	r2, [r3, #0]
 800909e:	7dfb      	ldrb	r3, [r7, #23]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	701a      	strb	r2, [r3, #0]
 80090a8:	e014      	b.n	80090d4 <_Z24ssd1306_DrawVerticalLinesss+0x140>
              case Black:   *bufferPtr &= ~drawBit; break;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	b25a      	sxtb	r2, r3
 80090b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090b4:	43db      	mvns	r3, r3
 80090b6:	b25b      	sxtb	r3, r3
 80090b8:	4013      	ands	r3, r2
 80090ba:	b25b      	sxtb	r3, r3
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	701a      	strb	r2, [r3, #0]
 80090c2:	e007      	b.n	80090d4 <_Z24ssd1306_DrawVerticalLinesss+0x140>
              case Inverse: *bufferPtr ^=  drawBit; break;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	781a      	ldrb	r2, [r3, #0]
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
 80090ca:	4053      	eors	r3, r2
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	701a      	strb	r2, [r3, #0]
 80090d2:	bf00      	nop
        }

        if (length < yOffset) return;
 80090d4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	429a      	cmp	r2, r3
 80090dc:	f2c0 8087 	blt.w	80091ee <_Z24ssd1306_DrawVerticalLinesss+0x25a>

        length -= yOffset;
 80090e0:	887a      	ldrh	r2, [r7, #2]
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	807b      	strh	r3, [r7, #2]
        bufferPtr += width();
 80090ec:	f7ff fd22 	bl	8008b34 <_ZL5widthv>
 80090f0:	4603      	mov	r3, r0
 80090f2:	461a      	mov	r2, r3
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	4413      	add	r3, r2
 80090f8:	613b      	str	r3, [r7, #16]
    }

    if (length >= 8)
 80090fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80090fe:	2b07      	cmp	r3, #7
 8009100:	dd3d      	ble.n	800917e <_Z24ssd1306_DrawVerticalLinesss+0x1ea>
    {
        switch (SSD1306.Color)
 8009102:	4b3e      	ldr	r3, [pc, #248]	; (80091fc <_Z24ssd1306_DrawVerticalLinesss+0x268>)
 8009104:	795b      	ldrb	r3, [r3, #5]
 8009106:	2b01      	cmp	r3, #1
 8009108:	dc02      	bgt.n	8009110 <_Z24ssd1306_DrawVerticalLinesss+0x17c>
 800910a:	2b00      	cmp	r3, #0
 800910c:	da03      	bge.n	8009116 <_Z24ssd1306_DrawVerticalLinesss+0x182>
 800910e:	e036      	b.n	800917e <_Z24ssd1306_DrawVerticalLinesss+0x1ea>
 8009110:	2b02      	cmp	r3, #2
 8009112:	d01b      	beq.n	800914c <_Z24ssd1306_DrawVerticalLinesss+0x1b8>
 8009114:	e033      	b.n	800917e <_Z24ssd1306_DrawVerticalLinesss+0x1ea>
        {
            case White:
            case Black:
                drawBit = (SSD1306.Color == White) ? 0xFF : 0x00;
 8009116:	4b39      	ldr	r3, [pc, #228]	; (80091fc <_Z24ssd1306_DrawVerticalLinesss+0x268>)
 8009118:	795b      	ldrb	r3, [r3, #5]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d101      	bne.n	8009122 <_Z24ssd1306_DrawVerticalLinesss+0x18e>
 800911e:	23ff      	movs	r3, #255	; 0xff
 8009120:	e000      	b.n	8009124 <_Z24ssd1306_DrawVerticalLinesss+0x190>
 8009122:	2300      	movs	r3, #0
 8009124:	75fb      	strb	r3, [r7, #23]
                do
                {
                    *bufferPtr = drawBit;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	7dfa      	ldrb	r2, [r7, #23]
 800912a:	701a      	strb	r2, [r3, #0]
                    bufferPtr += width();
 800912c:	f7ff fd02 	bl	8008b34 <_ZL5widthv>
 8009130:	4603      	mov	r3, r0
 8009132:	461a      	mov	r2, r3
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	4413      	add	r3, r2
 8009138:	613b      	str	r3, [r7, #16]
                    length -= 8;
 800913a:	887b      	ldrh	r3, [r7, #2]
 800913c:	3b08      	subs	r3, #8
 800913e:	b29b      	uxth	r3, r3
 8009140:	807b      	strh	r3, [r7, #2]
                } while (length >= 8);
 8009142:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009146:	2b07      	cmp	r3, #7
 8009148:	dd16      	ble.n	8009178 <_Z24ssd1306_DrawVerticalLinesss+0x1e4>
                do
 800914a:	e7ec      	b.n	8009126 <_Z24ssd1306_DrawVerticalLinesss+0x192>
            break;

            case Inverse:
                do
                {
                    *bufferPtr = ~(*bufferPtr);
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	43db      	mvns	r3, r3
 8009152:	b2da      	uxtb	r2, r3
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	701a      	strb	r2, [r3, #0]
                    bufferPtr += width();
 8009158:	f7ff fcec 	bl	8008b34 <_ZL5widthv>
 800915c:	4603      	mov	r3, r0
 800915e:	461a      	mov	r2, r3
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	4413      	add	r3, r2
 8009164:	613b      	str	r3, [r7, #16]
                    length -= 8;
 8009166:	887b      	ldrh	r3, [r7, #2]
 8009168:	3b08      	subs	r3, #8
 800916a:	b29b      	uxth	r3, r3
 800916c:	807b      	strh	r3, [r7, #2]
                } while (length >= 8);
 800916e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009172:	2b07      	cmp	r3, #7
 8009174:	dd02      	ble.n	800917c <_Z24ssd1306_DrawVerticalLinesss+0x1e8>
                do
 8009176:	e7e9      	b.n	800914c <_Z24ssd1306_DrawVerticalLinesss+0x1b8>
            break;
 8009178:	bf00      	nop
 800917a:	e000      	b.n	800917e <_Z24ssd1306_DrawVerticalLinesss+0x1ea>
            break;
 800917c:	bf00      	nop
        }
    }

    if (length > 0)
 800917e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009182:	2b00      	cmp	r3, #0
 8009184:	dd34      	ble.n	80091f0 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
    {
        drawBit = (1 << (length & 7)) - 1;
 8009186:	887b      	ldrh	r3, [r7, #2]
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	2201      	movs	r2, #1
 800918e:	fa02 f303 	lsl.w	r3, r2, r3
 8009192:	b2db      	uxtb	r3, r3
 8009194:	3b01      	subs	r3, #1
 8009196:	75fb      	strb	r3, [r7, #23]
        switch (SSD1306.Color)
 8009198:	4b18      	ldr	r3, [pc, #96]	; (80091fc <_Z24ssd1306_DrawVerticalLinesss+0x268>)
 800919a:	795b      	ldrb	r3, [r3, #5]
 800919c:	2b02      	cmp	r3, #2
 800919e:	d01a      	beq.n	80091d6 <_Z24ssd1306_DrawVerticalLinesss+0x242>
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	dc25      	bgt.n	80091f0 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d009      	beq.n	80091bc <_Z24ssd1306_DrawVerticalLinesss+0x228>
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d121      	bne.n	80091f0 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
        {
            case White:   *bufferPtr |=  drawBit; break;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	781a      	ldrb	r2, [r3, #0]
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	b2da      	uxtb	r2, r3
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	701a      	strb	r2, [r3, #0]
 80091ba:	e019      	b.n	80091f0 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
            case Black:   *bufferPtr &= ~drawBit; break;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	b25a      	sxtb	r2, r3
 80091c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091c6:	43db      	mvns	r3, r3
 80091c8:	b25b      	sxtb	r3, r3
 80091ca:	4013      	ands	r3, r2
 80091cc:	b25b      	sxtb	r3, r3
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	701a      	strb	r2, [r3, #0]
 80091d4:	e00c      	b.n	80091f0 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
            case Inverse: *bufferPtr ^=  drawBit; break;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	781a      	ldrb	r2, [r3, #0]
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	4053      	eors	r3, r2
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	701a      	strb	r2, [r3, #0]
 80091e4:	e004      	b.n	80091f0 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
    if (x < 0 || x >= width()) return;
 80091e6:	bf00      	nop
 80091e8:	e002      	b.n	80091f0 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
    if (length <= 0) return;
 80091ea:	bf00      	nop
 80091ec:	e000      	b.n	80091f0 <_Z24ssd1306_DrawVerticalLinesss+0x25c>
        if (length < yOffset) return;
 80091ee:	bf00      	nop
        }
    }
}
 80091f0:	371c      	adds	r7, #28
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd90      	pop	{r4, r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20002df8 	.word	0x20002df8
 80091fc:	20002dec 	.word	0x20002dec

08009200 <_Z16ssd1306_DrawRectssss>:
//------------------------------------------------------------------------
void ssd1306_DrawRect(int16_t x, int16_t y, int16_t width, int16_t height)
{
 8009200:	b590      	push	{r4, r7, lr}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	4604      	mov	r4, r0
 8009208:	4608      	mov	r0, r1
 800920a:	4611      	mov	r1, r2
 800920c:	461a      	mov	r2, r3
 800920e:	4623      	mov	r3, r4
 8009210:	80fb      	strh	r3, [r7, #6]
 8009212:	4603      	mov	r3, r0
 8009214:	80bb      	strh	r3, [r7, #4]
 8009216:	460b      	mov	r3, r1
 8009218:	807b      	strh	r3, [r7, #2]
 800921a:	4613      	mov	r3, r2
 800921c:	803b      	strh	r3, [r7, #0]
	ssd1306_DrawHorizontalLine(x, y, width);
 800921e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009222:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800922a:	4618      	mov	r0, r3
 800922c:	f7ff fdf8 	bl	8008e20 <_Z26ssd1306_DrawHorizontalLinesss>
	ssd1306_DrawVerticalLine(x, y, height);
 8009230:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009234:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800923c:	4618      	mov	r0, r3
 800923e:	f7ff fea9 	bl	8008f94 <_Z24ssd1306_DrawVerticalLinesss>
	ssd1306_DrawVerticalLine(x + width - 1, y, height);
 8009242:	88fa      	ldrh	r2, [r7, #6]
 8009244:	887b      	ldrh	r3, [r7, #2]
 8009246:	4413      	add	r3, r2
 8009248:	b29b      	uxth	r3, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	b29b      	uxth	r3, r3
 800924e:	b21b      	sxth	r3, r3
 8009250:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009254:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff fe9b 	bl	8008f94 <_Z24ssd1306_DrawVerticalLinesss>
	ssd1306_DrawHorizontalLine(x, y + height - 1, width);
 800925e:	88ba      	ldrh	r2, [r7, #4]
 8009260:	883b      	ldrh	r3, [r7, #0]
 8009262:	4413      	add	r3, r2
 8009264:	b29b      	uxth	r3, r3
 8009266:	3b01      	subs	r3, #1
 8009268:	b29b      	uxth	r3, r3
 800926a:	b219      	sxth	r1, r3
 800926c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff fdd3 	bl	8008e20 <_Z26ssd1306_DrawHorizontalLinesss>
}
 800927a:	bf00      	nop
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	bd90      	pop	{r4, r7, pc}

08009282 <_Z16ssd1306_DrawRectRK9Rectangle>:
//-------------------------------------
void ssd1306_DrawRect(const Rectangle& rect)
{
 8009282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
	if(rect.isValid())
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff fc2a 	bl	8008ae4 <_ZNK9Rectangle7isValidEv>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d026      	beq.n	80092e4 <_Z16ssd1306_DrawRectRK9Rectangle+0x62>
	{
		ssd1306_SetCursor(rect.X(), rect.Y());
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7fe ff2a 	bl	80080f0 <_ZNK9Rectangle1XEv>
 800929c:	4603      	mov	r3, r0
 800929e:	b2dc      	uxtb	r4, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7fe ff31 	bl	8008108 <_ZNK9Rectangle1YEv>
 80092a6:	4603      	mov	r3, r0
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	4619      	mov	r1, r3
 80092ac:	4620      	mov	r0, r4
 80092ae:	f000 fb0b 	bl	80098c8 <_Z17ssd1306_SetCursorhh>
		ssd1306_DrawRect(rect.X(), rect.Y(), rect.width(), rect.height());
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7fe ff1c 	bl	80080f0 <_ZNK9Rectangle1XEv>
 80092b8:	4603      	mov	r3, r0
 80092ba:	b21c      	sxth	r4, r3
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7fe ff23 	bl	8008108 <_ZNK9Rectangle1YEv>
 80092c2:	4603      	mov	r3, r0
 80092c4:	b21d      	sxth	r5, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7fe ff36 	bl	8008138 <_ZNK9Rectangle5widthEv>
 80092cc:	4603      	mov	r3, r0
 80092ce:	b21e      	sxth	r6, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7fe ff25 	bl	8008120 <_ZNK9Rectangle6heightEv>
 80092d6:	4603      	mov	r3, r0
 80092d8:	b21b      	sxth	r3, r3
 80092da:	4632      	mov	r2, r6
 80092dc:	4629      	mov	r1, r5
 80092de:	4620      	mov	r0, r4
 80092e0:	f7ff ff8e 	bl	8009200 <_Z16ssd1306_DrawRectssss>
	}
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092ec <_Z20ssd1306_DrawFillRectssss>:
//------------------------------------------------------------------------------------
void ssd1306_DrawFillRect(int16_t xMove, int16_t yMove, int16_t width, int16_t height)
{
 80092ec:	b590      	push	{r4, r7, lr}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	4611      	mov	r1, r2
 80092f8:	461a      	mov	r2, r3
 80092fa:	4623      	mov	r3, r4
 80092fc:	80fb      	strh	r3, [r7, #6]
 80092fe:	4603      	mov	r3, r0
 8009300:	80bb      	strh	r3, [r7, #4]
 8009302:	460b      	mov	r3, r1
 8009304:	807b      	strh	r3, [r7, #2]
 8009306:	4613      	mov	r3, r2
 8009308:	803b      	strh	r3, [r7, #0]
    for (int16_t x = xMove; x < xMove + width; x++)
 800930a:	88fb      	ldrh	r3, [r7, #6]
 800930c:	81fb      	strh	r3, [r7, #14]
 800930e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009312:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8009316:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800931a:	440b      	add	r3, r1
 800931c:	429a      	cmp	r2, r3
 800931e:	da0f      	bge.n	8009340 <_Z20ssd1306_DrawFillRectssss+0x54>
    {
        ssd1306_DrawVerticalLine(x, yMove, height);
 8009320:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009324:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009328:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800932c:	4618      	mov	r0, r3
 800932e:	f7ff fe31 	bl	8008f94 <_Z24ssd1306_DrawVerticalLinesss>
    for (int16_t x = xMove; x < xMove + width; x++)
 8009332:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009336:	b29b      	uxth	r3, r3
 8009338:	3301      	adds	r3, #1
 800933a:	b29b      	uxth	r3, r3
 800933c:	81fb      	strh	r3, [r7, #14]
 800933e:	e7e6      	b.n	800930e <_Z20ssd1306_DrawFillRectssss+0x22>
    }
}
 8009340:	bf00      	nop
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	bd90      	pop	{r4, r7, pc}

08009348 <_Z20ssd1306_DrawFillRectRK9Rectangle>:
//-----------------------------------------
void ssd1306_DrawFillRect(const Rectangle& rect)
{
 8009348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	if(rect.isValid())
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff fbc7 	bl	8008ae4 <_ZNK9Rectangle7isValidEv>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d026      	beq.n	80093aa <_Z20ssd1306_DrawFillRectRK9Rectangle+0x62>
	{
		ssd1306_SetCursor(rect.X(), rect.Y());
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7fe fec7 	bl	80080f0 <_ZNK9Rectangle1XEv>
 8009362:	4603      	mov	r3, r0
 8009364:	b2dc      	uxtb	r4, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7fe fece 	bl	8008108 <_ZNK9Rectangle1YEv>
 800936c:	4603      	mov	r3, r0
 800936e:	b2db      	uxtb	r3, r3
 8009370:	4619      	mov	r1, r3
 8009372:	4620      	mov	r0, r4
 8009374:	f000 faa8 	bl	80098c8 <_Z17ssd1306_SetCursorhh>
		ssd1306_DrawFillRect(rect.X(), rect.Y(), rect.width(), rect.height());
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7fe feb9 	bl	80080f0 <_ZNK9Rectangle1XEv>
 800937e:	4603      	mov	r3, r0
 8009380:	b21c      	sxth	r4, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7fe fec0 	bl	8008108 <_ZNK9Rectangle1YEv>
 8009388:	4603      	mov	r3, r0
 800938a:	b21d      	sxth	r5, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7fe fed3 	bl	8008138 <_ZNK9Rectangle5widthEv>
 8009392:	4603      	mov	r3, r0
 8009394:	b21e      	sxth	r6, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7fe fec2 	bl	8008120 <_ZNK9Rectangle6heightEv>
 800939c:	4603      	mov	r3, r0
 800939e:	b21b      	sxth	r3, r3
 80093a0:	4632      	mov	r2, r6
 80093a2:	4629      	mov	r1, r5
 80093a4:	4620      	mov	r0, r4
 80093a6:	f7ff ffa1 	bl	80092ec <_Z20ssd1306_DrawFillRectssss>
	}
}
 80093aa:	bf00      	nop
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080093b4 <_Z16ssd1306_DrawCharcRK6font_t>:
		}
	}
}
//--------------------------------------------------
char ssd1306_DrawChar(char ch, const font_t& font)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	6039      	str	r1, [r7, #0]
 80093be:	71fb      	strb	r3, [r7, #7]
//		// Not enough space on current line
//		return 0;
//	}

	// Use the font to write
	uint32_t byteCountPos = (ch - 32) * (font.width*2 + 1);
 80093c0:	79fb      	ldrb	r3, [r7, #7]
 80093c2:	3b20      	subs	r3, #32
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	7812      	ldrb	r2, [r2, #0]
 80093c8:	0052      	lsls	r2, r2, #1
 80093ca:	3201      	adds	r2, #1
 80093cc:	fb02 f303 	mul.w	r3, r2, r3
 80093d0:	617b      	str	r3, [r7, #20]
	uint32_t byteCount    = font.data[byteCountPos];
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	005b      	lsls	r3, r3, #1
 80093da:	4413      	add	r3, r2
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	613b      	str	r3, [r7, #16]

	for (uint32_t i = 1; i < byteCount*2; i += 2)
 80093e0:	2301      	movs	r3, #1
 80093e2:	61fb      	str	r3, [r7, #28]
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	005b      	lsls	r3, r3, #1
 80093e8:	69fa      	ldr	r2, [r7, #28]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d279      	bcs.n	80094e2 <_Z16ssd1306_DrawCharcRK6font_t+0x12e>
	{
		uint32_t posByte = (ch - 32) * (font.width*2 + 1) + i;
 80093ee:	79fb      	ldrb	r3, [r7, #7]
 80093f0:	3b20      	subs	r3, #32
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	7812      	ldrb	r2, [r2, #0]
 80093f6:	0052      	lsls	r2, r2, #1
 80093f8:	3201      	adds	r2, #1
 80093fa:	fb02 f303 	mul.w	r3, r2, r3
 80093fe:	461a      	mov	r2, r3
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	4413      	add	r3, r2
 8009404:	60fb      	str	r3, [r7, #12]
		uint32_t byte =font.data[posByte];
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	4413      	add	r3, r2
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	60bb      	str	r3, [r7, #8]
		byte |= (font.data[(ch - 32) * (font.width*2 + 1) + i + 1]) << 8;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	79fb      	ldrb	r3, [r7, #7]
 800941a:	3b20      	subs	r3, #32
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	7809      	ldrb	r1, [r1, #0]
 8009420:	0049      	lsls	r1, r1, #1
 8009422:	3101      	adds	r1, #1
 8009424:	fb01 f303 	mul.w	r3, r1, r3
 8009428:	4619      	mov	r1, r3
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	440b      	add	r3, r1
 800942e:	3301      	adds	r3, #1
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	4413      	add	r3, r2
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	021b      	lsls	r3, r3, #8
 8009438:	461a      	mov	r2, r3
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	4313      	orrs	r3, r2
 800943e:	60bb      	str	r3, [r7, #8]

		for (uint32_t j = 0; j < font.height; j++)
 8009440:	2300      	movs	r3, #0
 8009442:	61bb      	str	r3, [r7, #24]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	785b      	ldrb	r3, [r3, #1]
 8009448:	461a      	mov	r2, r3
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	4293      	cmp	r3, r2
 800944e:	d244      	bcs.n	80094da <_Z16ssd1306_DrawCharcRK6font_t+0x126>
		{
			if ((byte >> j) & 0x0001)
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	fa22 f303 	lsr.w	r3, r2, r3
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	d012      	beq.n	8009486 <_Z16ssd1306_DrawCharcRK6font_t+0xd2>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + i/2, SSD1306.CurrentY + j);
 8009460:	4b27      	ldr	r3, [pc, #156]	; (8009500 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	b2da      	uxtb	r2, r3
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	085b      	lsrs	r3, r3, #1
 800946a:	b2db      	uxtb	r3, r3
 800946c:	4413      	add	r3, r2
 800946e:	b2d8      	uxtb	r0, r3
 8009470:	4b23      	ldr	r3, [pc, #140]	; (8009500 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 8009472:	885b      	ldrh	r3, [r3, #2]
 8009474:	b2da      	uxtb	r2, r3
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	b2db      	uxtb	r3, r3
 800947a:	4413      	add	r3, r2
 800947c:	b2db      	uxtb	r3, r3
 800947e:	4619      	mov	r1, r3
 8009480:	f7ff fc56 	bl	8008d30 <_Z17ssd1306_DrawPixelhh>
 8009484:	e025      	b.n	80094d2 <_Z16ssd1306_DrawCharcRK6font_t+0x11e>
			}
			else
			{
				SSD1306.Color = (ssd1306_color)!SSD1306.Color;
 8009486:	4b1e      	ldr	r3, [pc, #120]	; (8009500 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 8009488:	795b      	ldrb	r3, [r3, #5]
 800948a:	2b00      	cmp	r3, #0
 800948c:	bf0c      	ite	eq
 800948e:	2301      	moveq	r3, #1
 8009490:	2300      	movne	r3, #0
 8009492:	b2db      	uxtb	r3, r3
 8009494:	461a      	mov	r2, r3
 8009496:	4b1a      	ldr	r3, [pc, #104]	; (8009500 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 8009498:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + i/2, SSD1306.CurrentY + j);
 800949a:	4b19      	ldr	r3, [pc, #100]	; (8009500 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	085b      	lsrs	r3, r3, #1
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	4413      	add	r3, r2
 80094a8:	b2d8      	uxtb	r0, r3
 80094aa:	4b15      	ldr	r3, [pc, #84]	; (8009500 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 80094ac:	885b      	ldrh	r3, [r3, #2]
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	4413      	add	r3, r2
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	4619      	mov	r1, r3
 80094ba:	f7ff fc39 	bl	8008d30 <_Z17ssd1306_DrawPixelhh>
				SSD1306.Color = (ssd1306_color)!SSD1306.Color;
 80094be:	4b10      	ldr	r3, [pc, #64]	; (8009500 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 80094c0:	795b      	ldrb	r3, [r3, #5]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	bf0c      	ite	eq
 80094c6:	2301      	moveq	r3, #1
 80094c8:	2300      	movne	r3, #0
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	461a      	mov	r2, r3
 80094ce:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 80094d0:	715a      	strb	r2, [r3, #5]
		for (uint32_t j = 0; j < font.height; j++)
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	3301      	adds	r3, #1
 80094d6:	61bb      	str	r3, [r7, #24]
 80094d8:	e7b4      	b.n	8009444 <_Z16ssd1306_DrawCharcRK6font_t+0x90>
	for (uint32_t i = 1; i < byteCount*2; i += 2)
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	3302      	adds	r3, #2
 80094de:	61fb      	str	r3, [r7, #28]
 80094e0:	e780      	b.n	80093e4 <_Z16ssd1306_DrawCharcRK6font_t+0x30>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += byteCount + 2;
 80094e2:	4b07      	ldr	r3, [pc, #28]	; (8009500 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 80094e4:	881a      	ldrh	r2, [r3, #0]
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	4413      	add	r3, r2
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3302      	adds	r3, #2
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	4b03      	ldr	r3, [pc, #12]	; (8009500 <_Z16ssd1306_DrawCharcRK6font_t+0x14c>)
 80094f4:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 80094f6:	79fb      	ldrb	r3, [r7, #7]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3720      	adds	r7, #32
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20002dec 	.word	0x20002dec

08009504 <_Z20ssd1306_DrawUtf8ChartRK6font_t>:
//--------------------------------------------------------------
uint16_t ssd1306_DrawUtf8Char(uint16_t ch, const font_t& font)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b088      	sub	sp, #32
 8009508:	af00      	add	r7, sp, #0
 800950a:	4603      	mov	r3, r0
 800950c:	6039      	str	r1, [r7, #0]
 800950e:	80fb      	strh	r3, [r7, #6]
	uint8_t ch_pos;

	if(ch >= 0xd090 && ch < 0xd180)
 8009510:	88fb      	ldrh	r3, [r7, #6]
 8009512:	f24d 028f 	movw	r2, #53391	; 0xd08f
 8009516:	4293      	cmp	r3, r2
 8009518:	d909      	bls.n	800952e <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x2a>
 800951a:	88fb      	ldrh	r3, [r7, #6]
 800951c:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8009520:	4293      	cmp	r3, r2
 8009522:	d804      	bhi.n	800952e <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x2a>
		ch_pos = (ch - 0xd090) + (0x80 - (0x20 + 1));
 8009524:	88fb      	ldrh	r3, [r7, #6]
 8009526:	b2db      	uxtb	r3, r3
 8009528:	3b31      	subs	r3, #49	; 0x31
 800952a:	77fb      	strb	r3, [r7, #31]
 800952c:	e00d      	b.n	800954a <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x46>
	else if(ch >= 0xd180)
 800952e:	88fb      	ldrh	r3, [r7, #6]
 8009530:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8009534:	4293      	cmp	r3, r2
 8009536:	d904      	bls.n	8009542 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x3e>
		ch_pos = (ch - 0xd090) - (0x80 - (0x20 - 1));
 8009538:	88fb      	ldrh	r3, [r7, #6]
 800953a:	b2db      	uxtb	r3, r3
 800953c:	330f      	adds	r3, #15
 800953e:	77fb      	strb	r3, [r7, #31]
 8009540:	e003      	b.n	800954a <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x46>
	else
		ch_pos = ch - 32;
 8009542:	88fb      	ldrh	r3, [r7, #6]
 8009544:	b2db      	uxtb	r3, r3
 8009546:	3b20      	subs	r3, #32
 8009548:	77fb      	strb	r3, [r7, #31]

	// Use the font to write
	uint32_t byte_count = font.data[ch_pos * (font.width*2 + 1)];
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	7ffb      	ldrb	r3, [r7, #31]
 8009550:	6839      	ldr	r1, [r7, #0]
 8009552:	7809      	ldrb	r1, [r1, #0]
 8009554:	0049      	lsls	r1, r1, #1
 8009556:	3101      	adds	r1, #1
 8009558:	fb01 f303 	mul.w	r3, r1, r3
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	4413      	add	r3, r2
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	613b      	str	r3, [r7, #16]

	for (uint32_t i = 1; i < byte_count*2; i += 2)
 8009564:	2301      	movs	r3, #1
 8009566:	61bb      	str	r3, [r7, #24]
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	69ba      	ldr	r2, [r7, #24]
 800956e:	429a      	cmp	r2, r3
 8009570:	d275      	bcs.n	800965e <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x15a>
	{
		uint32_t byte = font.data[ch_pos * (font.width*2 + 1) + i];
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	7ffb      	ldrb	r3, [r7, #31]
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	7809      	ldrb	r1, [r1, #0]
 800957c:	0049      	lsls	r1, r1, #1
 800957e:	3101      	adds	r1, #1
 8009580:	fb01 f303 	mul.w	r3, r1, r3
 8009584:	4619      	mov	r1, r3
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	440b      	add	r3, r1
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	4413      	add	r3, r2
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	60fb      	str	r3, [r7, #12]
		byte |= (font.data[ch_pos * (font.width*2 + 1) + i + 1]) << 8;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	685a      	ldr	r2, [r3, #4]
 8009596:	7ffb      	ldrb	r3, [r7, #31]
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	7809      	ldrb	r1, [r1, #0]
 800959c:	0049      	lsls	r1, r1, #1
 800959e:	3101      	adds	r1, #1
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	4619      	mov	r1, r3
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	440b      	add	r3, r1
 80095aa:	3301      	adds	r3, #1
 80095ac:	005b      	lsls	r3, r3, #1
 80095ae:	4413      	add	r3, r2
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	021b      	lsls	r3, r3, #8
 80095b4:	461a      	mov	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	60fb      	str	r3, [r7, #12]

		for (uint32_t j = 0; j < font.height; j++)
 80095bc:	2300      	movs	r3, #0
 80095be:	617b      	str	r3, [r7, #20]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	785b      	ldrb	r3, [r3, #1]
 80095c4:	461a      	mov	r2, r3
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d244      	bcs.n	8009656 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x152>
		{
			if ((byte >> j) & 0x0001)
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	fa22 f303 	lsr.w	r3, r2, r3
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d012      	beq.n	8009602 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0xfe>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + i/2, SSD1306.CurrentY + j);
 80095dc:	4b27      	ldr	r3, [pc, #156]	; (800967c <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	085b      	lsrs	r3, r3, #1
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	4413      	add	r3, r2
 80095ea:	b2d8      	uxtb	r0, r3
 80095ec:	4b23      	ldr	r3, [pc, #140]	; (800967c <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 80095ee:	885b      	ldrh	r3, [r3, #2]
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	4413      	add	r3, r2
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	4619      	mov	r1, r3
 80095fc:	f7ff fb98 	bl	8008d30 <_Z17ssd1306_DrawPixelhh>
 8009600:	e025      	b.n	800964e <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x14a>
			}
			else
			{
				SSD1306.Color = (ssd1306_color)!SSD1306.Color;
 8009602:	4b1e      	ldr	r3, [pc, #120]	; (800967c <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 8009604:	795b      	ldrb	r3, [r3, #5]
 8009606:	2b00      	cmp	r3, #0
 8009608:	bf0c      	ite	eq
 800960a:	2301      	moveq	r3, #1
 800960c:	2300      	movne	r3, #0
 800960e:	b2db      	uxtb	r3, r3
 8009610:	461a      	mov	r2, r3
 8009612:	4b1a      	ldr	r3, [pc, #104]	; (800967c <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 8009614:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + i/2, SSD1306.CurrentY + j);
 8009616:	4b19      	ldr	r3, [pc, #100]	; (800967c <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	b2da      	uxtb	r2, r3
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	085b      	lsrs	r3, r3, #1
 8009620:	b2db      	uxtb	r3, r3
 8009622:	4413      	add	r3, r2
 8009624:	b2d8      	uxtb	r0, r3
 8009626:	4b15      	ldr	r3, [pc, #84]	; (800967c <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 8009628:	885b      	ldrh	r3, [r3, #2]
 800962a:	b2da      	uxtb	r2, r3
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	b2db      	uxtb	r3, r3
 8009630:	4413      	add	r3, r2
 8009632:	b2db      	uxtb	r3, r3
 8009634:	4619      	mov	r1, r3
 8009636:	f7ff fb7b 	bl	8008d30 <_Z17ssd1306_DrawPixelhh>
				SSD1306.Color = (ssd1306_color)!SSD1306.Color;
 800963a:	4b10      	ldr	r3, [pc, #64]	; (800967c <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 800963c:	795b      	ldrb	r3, [r3, #5]
 800963e:	2b00      	cmp	r3, #0
 8009640:	bf0c      	ite	eq
 8009642:	2301      	moveq	r3, #1
 8009644:	2300      	movne	r3, #0
 8009646:	b2db      	uxtb	r3, r3
 8009648:	461a      	mov	r2, r3
 800964a:	4b0c      	ldr	r3, [pc, #48]	; (800967c <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 800964c:	715a      	strb	r2, [r3, #5]
		for (uint32_t j = 0; j < font.height; j++)
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	3301      	adds	r3, #1
 8009652:	617b      	str	r3, [r7, #20]
 8009654:	e7b4      	b.n	80095c0 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0xbc>
	for (uint32_t i = 1; i < byte_count*2; i += 2)
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	3302      	adds	r3, #2
 800965a:	61bb      	str	r3, [r7, #24]
 800965c:	e784      	b.n	8009568 <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x64>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += byte_count + 2;
 800965e:	4b07      	ldr	r3, [pc, #28]	; (800967c <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 8009660:	881a      	ldrh	r2, [r3, #0]
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	b29b      	uxth	r3, r3
 8009666:	4413      	add	r3, r2
 8009668:	b29b      	uxth	r3, r3
 800966a:	3302      	adds	r3, #2
 800966c:	b29a      	uxth	r2, r3
 800966e:	4b03      	ldr	r3, [pc, #12]	; (800967c <_Z20ssd1306_DrawUtf8ChartRK6font_t+0x178>)
 8009670:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8009672:	88fb      	ldrh	r3, [r7, #6]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3720      	adds	r7, #32
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	20002dec 	.word	0x20002dec

08009680 <_Z18ssd1306_DrawStringPcRK6font_t>:
//
//  Write full string to screenbuffer
//
char ssd1306_DrawString(char* str, const font_t& font)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
	uint8_t len = strlen(str);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7f6 fda0 	bl	80001d0 <strlen>
 8009690:	4603      	mov	r3, r0
 8009692:	73bb      	strb	r3, [r7, #14]

	if(len > 0)
 8009694:	7bbb      	ldrb	r3, [r7, #14]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d04b      	beq.n	8009732 <_Z18ssd1306_DrawStringPcRK6font_t+0xb2>
	{
		uint8_t i = 0;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]

		while(i < len)
 800969e:	7bfa      	ldrb	r2, [r7, #15]
 80096a0:	7bbb      	ldrb	r3, [r7, #14]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d245      	bcs.n	8009732 <_Z18ssd1306_DrawStringPcRK6font_t+0xb2>
		{
			uint16_t ch1 = (*(str + i));
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	4413      	add	r3, r2
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	81bb      	strh	r3, [r7, #12]

			if(ch1 == 0xd0 || ch1 == 0xd1)
 80096b0:	89bb      	ldrh	r3, [r7, #12]
 80096b2:	2bd0      	cmp	r3, #208	; 0xd0
 80096b4:	d002      	beq.n	80096bc <_Z18ssd1306_DrawStringPcRK6font_t+0x3c>
 80096b6:	89bb      	ldrh	r3, [r7, #12]
 80096b8:	2bd1      	cmp	r3, #209	; 0xd1
 80096ba:	d123      	bne.n	8009704 <_Z18ssd1306_DrawStringPcRK6font_t+0x84>
			{
				uint16_t ch2 = *(str + i + 1);
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
 80096be:	3301      	adds	r3, #1
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	4413      	add	r3, r2
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	817b      	strh	r3, [r7, #10]
				uint16_t s = ((ch1 << 8) | ch2);
 80096c8:	89bb      	ldrh	r3, [r7, #12]
 80096ca:	021b      	lsls	r3, r3, #8
 80096cc:	b21a      	sxth	r2, r3
 80096ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	b21b      	sxth	r3, r3
 80096d6:	813b      	strh	r3, [r7, #8]

				if(ssd1306_DrawUtf8Char(s, font) != s)
 80096d8:	893b      	ldrh	r3, [r7, #8]
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	4618      	mov	r0, r3
 80096de:	f7ff ff11 	bl	8009504 <_Z20ssd1306_DrawUtf8ChartRK6font_t>
 80096e2:	4603      	mov	r3, r0
 80096e4:	461a      	mov	r2, r3
 80096e6:	893b      	ldrh	r3, [r7, #8]
 80096e8:	4293      	cmp	r3, r2
 80096ea:	bf14      	ite	ne
 80096ec:	2301      	movne	r3, #1
 80096ee:	2300      	moveq	r3, #0
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <_Z18ssd1306_DrawStringPcRK6font_t+0x7c>
				{
					// Char could not be written
					return *str;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	e01c      	b.n	8009736 <_Z18ssd1306_DrawStringPcRK6font_t+0xb6>
				}

				i += 2;
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	3302      	adds	r3, #2
 8009700:	73fb      	strb	r3, [r7, #15]
 8009702:	e015      	b.n	8009730 <_Z18ssd1306_DrawStringPcRK6font_t+0xb0>
			}
			else
			{
				if(ssd1306_DrawChar(ch1, font) != ch1)
 8009704:	89bb      	ldrh	r3, [r7, #12]
 8009706:	b2db      	uxtb	r3, r3
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff fe52 	bl	80093b4 <_Z16ssd1306_DrawCharcRK6font_t>
 8009710:	4603      	mov	r3, r0
 8009712:	461a      	mov	r2, r3
 8009714:	89bb      	ldrh	r3, [r7, #12]
 8009716:	429a      	cmp	r2, r3
 8009718:	bf14      	ite	ne
 800971a:	2301      	movne	r3, #1
 800971c:	2300      	moveq	r3, #0
 800971e:	b2db      	uxtb	r3, r3
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <_Z18ssd1306_DrawStringPcRK6font_t+0xaa>
				{
					// Char could not be written
					return *str;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	e005      	b.n	8009736 <_Z18ssd1306_DrawStringPcRK6font_t+0xb6>
				}

				i++;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	3301      	adds	r3, #1
 800972e:	73fb      	strb	r3, [r7, #15]
		while(i < len)
 8009730:	e7b5      	b.n	800969e <_Z18ssd1306_DrawStringPcRK6font_t+0x1e>
			}
		}
	}

	// Everything ok
	return *str;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	781b      	ldrb	r3, [r3, #0]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t>:
//-------------------------------------------------------------------------------------------------------
char ssd1306_DrawString(const Rectangle& rect, char* str, const font_t& font, const alignment_t align)
{
 800973e:	b590      	push	{r4, r7, lr}
 8009740:	b095      	sub	sp, #84	; 0x54
 8009742:	af00      	add	r7, sp, #0
 8009744:	60f8      	str	r0, [r7, #12]
 8009746:	60b9      	str	r1, [r7, #8]
 8009748:	607a      	str	r2, [r7, #4]
 800974a:	70fb      	strb	r3, [r7, #3]
	Rectangle rect_str = ssd1306_BoundString(str, font);
 800974c:	f107 0314 	add.w	r3, r7, #20
 8009750:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	68b9      	ldr	r1, [r7, #8]
 8009758:	4618      	mov	r0, r3
 800975a:	f000 f8d9 	bl	8009910 <_Z19ssd1306_BoundStringPKcRK6font_tf>
	char ch = '\0';
 800975e:	2300      	movs	r3, #0
 8009760:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(rect.isValid() && rect_str.isValid())
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f7ff f9bd 	bl	8008ae4 <_ZNK9Rectangle7isValidEv>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d009      	beq.n	8009784 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0x46>
 8009770:	f107 0314 	add.w	r3, r7, #20
 8009774:	4618      	mov	r0, r3
 8009776:	f7ff f9b5 	bl	8008ae4 <_ZNK9Rectangle7isValidEv>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d001      	beq.n	8009784 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0x46>
 8009780:	2301      	movs	r3, #1
 8009782:	e000      	b.n	8009786 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0x48>
 8009784:	2300      	movs	r3, #0
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 8098 	beq.w	80098bc <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0x17e>
	{
		uint32_t pos_x = rect.X();
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f7fe fcaf 	bl	80080f0 <_ZNK9Rectangle1XEv>
 8009792:	64b8      	str	r0, [r7, #72]	; 0x48
		uint32_t pos_y = rect.Y();
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f7fe fcb7 	bl	8008108 <_ZNK9Rectangle1YEv>
 800979a:	6478      	str	r0, [r7, #68]	; 0x44

		if(align & ALIGN_LEFT)
 800979c:	78fb      	ldrb	r3, [r7, #3]
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d003      	beq.n	80097ae <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0x70>
		{
			pos_x += 2;
 80097a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097a8:	3302      	adds	r3, #2
 80097aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80097ac:	e035      	b.n	800981a <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0xdc>
		}
		else if(align & ALIGN_RIGHT)
 80097ae:	78fb      	ldrb	r3, [r7, #3]
 80097b0:	f003 0302 	and.w	r3, r3, #2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00d      	beq.n	80097d4 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0x96>
		{
			pos_x = rect.right() - rect_str.width() - 2;
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f7fe fc8a 	bl	80080d2 <_ZNK9Rectangle5rightEv>
 80097be:	4604      	mov	r4, r0
 80097c0:	f107 0314 	add.w	r3, r7, #20
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fe fcb7 	bl	8008138 <_ZNK9Rectangle5widthEv>
 80097ca:	4603      	mov	r3, r0
 80097cc:	1ae3      	subs	r3, r4, r3
 80097ce:	3b02      	subs	r3, #2
 80097d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80097d2:	e022      	b.n	800981a <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0xdc>
		}
		else if(align & ALIGN_HCENTER)
 80097d4:	78fb      	ldrb	r3, [r7, #3]
 80097d6:	f003 0310 	and.w	r3, r3, #16
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d01d      	beq.n	800981a <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0xdc>
		{
			pos_x += rect.center().x() - rect_str.center().x();
 80097de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097e2:	68f9      	ldr	r1, [r7, #12]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7ff f992 	bl	8008b0e <_ZNK9Rectangle6centerEv>
 80097ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7ff f929 	bl	8008a46 <_ZNK5Point1xEv>
 80097f4:	4604      	mov	r4, r0
 80097f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097fa:	f107 0214 	add.w	r2, r7, #20
 80097fe:	4611      	mov	r1, r2
 8009800:	4618      	mov	r0, r3
 8009802:	f7ff f984 	bl	8008b0e <_ZNK9Rectangle6centerEv>
 8009806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff f91b 	bl	8008a46 <_ZNK5Point1xEv>
 8009810:	4603      	mov	r3, r0
 8009812:	1ae3      	subs	r3, r4, r3
 8009814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009816:	4413      	add	r3, r2
 8009818:	64bb      	str	r3, [r7, #72]	; 0x48
		}

		if(align & ALIGN_TOP)
 800981a:	78fb      	ldrb	r3, [r7, #3]
 800981c:	f003 0304 	and.w	r3, r3, #4
 8009820:	2b00      	cmp	r3, #0
 8009822:	d006      	beq.n	8009832 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0xf4>
		{
			pos_y = rect.top() + 2;
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f7ff f935 	bl	8008a94 <_ZNK9Rectangle3topEv>
 800982a:	4603      	mov	r3, r0
 800982c:	3302      	adds	r3, #2
 800982e:	647b      	str	r3, [r7, #68]	; 0x44
 8009830:	e035      	b.n	800989e <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0x160>
		}
		else if(align & ALIGN_BOTTOM)
 8009832:	78fb      	ldrb	r3, [r7, #3]
 8009834:	f003 0308 	and.w	r3, r3, #8
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00d      	beq.n	8009858 <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0x11a>
		{
			pos_y = rect.bottom() - rect_str.height() - 2;
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f7ff f91a 	bl	8008a76 <_ZNK9Rectangle6bottomEv>
 8009842:	4604      	mov	r4, r0
 8009844:	f107 0314 	add.w	r3, r7, #20
 8009848:	4618      	mov	r0, r3
 800984a:	f7fe fc69 	bl	8008120 <_ZNK9Rectangle6heightEv>
 800984e:	4603      	mov	r3, r0
 8009850:	1ae3      	subs	r3, r4, r3
 8009852:	3b02      	subs	r3, #2
 8009854:	647b      	str	r3, [r7, #68]	; 0x44
 8009856:	e022      	b.n	800989e <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0x160>
		}
		else if(align & ALIGN_VCENTER)
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	f003 0320 	and.w	r3, r3, #32
 800985e:	2b00      	cmp	r3, #0
 8009860:	d01d      	beq.n	800989e <_Z18ssd1306_DrawStringRK9RectanglePcRK6font_t11alignment_t+0x160>
		{
			pos_y += rect.center().y() - rect_str.center().y();
 8009862:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009866:	68f9      	ldr	r1, [r7, #12]
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff f950 	bl	8008b0e <_ZNK9Rectangle6centerEv>
 800986e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009872:	4618      	mov	r0, r3
 8009874:	f7ff f8f3 	bl	8008a5e <_ZNK5Point1yEv>
 8009878:	4604      	mov	r4, r0
 800987a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800987e:	f107 0214 	add.w	r2, r7, #20
 8009882:	4611      	mov	r1, r2
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff f942 	bl	8008b0e <_ZNK9Rectangle6centerEv>
 800988a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff f8e5 	bl	8008a5e <_ZNK5Point1yEv>
 8009894:	4603      	mov	r3, r0
 8009896:	1ae3      	subs	r3, r4, r3
 8009898:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800989a:	4413      	add	r3, r2
 800989c:	647b      	str	r3, [r7, #68]	; 0x44
		}

		ssd1306_SetCursor(pos_x, pos_y);
 800989e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098a4:	b2d2      	uxtb	r2, r2
 80098a6:	4611      	mov	r1, r2
 80098a8:	4618      	mov	r0, r3
 80098aa:	f000 f80d 	bl	80098c8 <_Z17ssd1306_SetCursorhh>
		ch = ssd1306_DrawString(str, font);
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	68b8      	ldr	r0, [r7, #8]
 80098b2:	f7ff fee5 	bl	8009680 <_Z18ssd1306_DrawStringPcRK6font_t>
 80098b6:	4603      	mov	r3, r0
 80098b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}

	return ch;
 80098bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3754      	adds	r7, #84	; 0x54
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd90      	pop	{r4, r7, pc}

080098c8 <_Z17ssd1306_SetCursorhh>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	460a      	mov	r2, r1
 80098d2:	71fb      	strb	r3, [r7, #7]
 80098d4:	4613      	mov	r3, r2
 80098d6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80098d8:	79fb      	ldrb	r3, [r7, #7]
 80098da:	b29a      	uxth	r2, r3
 80098dc:	4b05      	ldr	r3, [pc, #20]	; (80098f4 <_Z17ssd1306_SetCursorhh+0x2c>)
 80098de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80098e0:	79bb      	ldrb	r3, [r7, #6]
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	4b03      	ldr	r3, [pc, #12]	; (80098f4 <_Z17ssd1306_SetCursorhh+0x2c>)
 80098e6:	805a      	strh	r2, [r3, #2]
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	20002dec 	.word	0x20002dec

080098f8 <_Z13ssd1306_Clearv>:
	ssd1306_WriteCommand(SEGREMAP);
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}
//------------------
void ssd1306_Clear()
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 80098fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009900:	2100      	movs	r1, #0
 8009902:	4802      	ldr	r0, [pc, #8]	; (800990c <_Z13ssd1306_Clearv+0x14>)
 8009904:	f000 f928 	bl	8009b58 <memset>
}
 8009908:	bf00      	nop
 800990a:	bd80      	pop	{r7, pc}
 800990c:	20002df8 	.word	0x20002df8

08009910 <_Z19ssd1306_BoundStringPKcRK6font_tf>:
		ssd1306_SetColor(Inverse);
	}
}
//-------------------------------------------------------------------------------
Rectangle ssd1306_BoundString(const char *str, const font_t& font, float factor)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	ed87 0a00 	vstr	s0, [r7]
	Rectangle rect;
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f7fe fbbf 	bl	80080a4 <_ZN9RectangleC1Ev>
	uint8_t len = strlen(str);
 8009926:	68b8      	ldr	r0, [r7, #8]
 8009928:	f7f6 fc52 	bl	80001d0 <strlen>
 800992c:	4603      	mov	r3, r0
 800992e:	753b      	strb	r3, [r7, #20]
	uint8_t ch_count = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	77fb      	strb	r3, [r7, #31]

	if(len > 0)
 8009934:	7d3b      	ldrb	r3, [r7, #20]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 8082 	beq.w	8009a40 <_Z19ssd1306_BoundStringPKcRK6font_tf+0x130>
	{
		uint8_t i = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	77bb      	strb	r3, [r7, #30]
		uint32_t w = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	61bb      	str	r3, [r7, #24]

		while(i < len)
 8009944:	7fba      	ldrb	r2, [r7, #30]
 8009946:	7d3b      	ldrb	r3, [r7, #20]
 8009948:	429a      	cmp	r2, r3
 800994a:	d24e      	bcs.n	80099ea <_Z19ssd1306_BoundStringPKcRK6font_tf+0xda>
		{
			uint16_t ch = (*(str + i));
 800994c:	7fbb      	ldrb	r3, [r7, #30]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	4413      	add	r3, r2
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	82fb      	strh	r3, [r7, #22]

			if(ch == 0xd0 || ch == 0xd1)
 8009956:	8afb      	ldrh	r3, [r7, #22]
 8009958:	2bd0      	cmp	r3, #208	; 0xd0
 800995a:	d002      	beq.n	8009962 <_Z19ssd1306_BoundStringPKcRK6font_tf+0x52>
 800995c:	8afb      	ldrh	r3, [r7, #22]
 800995e:	2bd1      	cmp	r3, #209	; 0xd1
 8009960:	d10f      	bne.n	8009982 <_Z19ssd1306_BoundStringPKcRK6font_tf+0x72>
			{
				ch = (ch << 8) | *(str + i + 1);
 8009962:	8afb      	ldrh	r3, [r7, #22]
 8009964:	021b      	lsls	r3, r3, #8
 8009966:	b21a      	sxth	r2, r3
 8009968:	7fbb      	ldrb	r3, [r7, #30]
 800996a:	3301      	adds	r3, #1
 800996c:	68b9      	ldr	r1, [r7, #8]
 800996e:	440b      	add	r3, r1
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	b21b      	sxth	r3, r3
 8009974:	4313      	orrs	r3, r2
 8009976:	b21b      	sxth	r3, r3
 8009978:	82fb      	strh	r3, [r7, #22]
				i += 2;
 800997a:	7fbb      	ldrb	r3, [r7, #30]
 800997c:	3302      	adds	r3, #2
 800997e:	77bb      	strb	r3, [r7, #30]
 8009980:	e002      	b.n	8009988 <_Z19ssd1306_BoundStringPKcRK6font_tf+0x78>
			}
			else
			{
				i++;
 8009982:	7fbb      	ldrb	r3, [r7, #30]
 8009984:	3301      	adds	r3, #1
 8009986:	77bb      	strb	r3, [r7, #30]
			}

			uint8_t ch_pos;

			if(ch >= 0xd090 && ch < 0xd180)
 8009988:	8afb      	ldrh	r3, [r7, #22]
 800998a:	f24d 028f 	movw	r2, #53391	; 0xd08f
 800998e:	4293      	cmp	r3, r2
 8009990:	d909      	bls.n	80099a6 <_Z19ssd1306_BoundStringPKcRK6font_tf+0x96>
 8009992:	8afb      	ldrh	r3, [r7, #22]
 8009994:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8009998:	4293      	cmp	r3, r2
 800999a:	d804      	bhi.n	80099a6 <_Z19ssd1306_BoundStringPKcRK6font_tf+0x96>
				ch_pos = (ch - 0xd090) + (0x80 - (0x20 + 1));
 800999c:	8afb      	ldrh	r3, [r7, #22]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	3b31      	subs	r3, #49	; 0x31
 80099a2:	757b      	strb	r3, [r7, #21]
 80099a4:	e00d      	b.n	80099c2 <_Z19ssd1306_BoundStringPKcRK6font_tf+0xb2>
			else if(ch >= 0xd180)
 80099a6:	8afb      	ldrh	r3, [r7, #22]
 80099a8:	f24d 127f 	movw	r2, #53631	; 0xd17f
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d904      	bls.n	80099ba <_Z19ssd1306_BoundStringPKcRK6font_tf+0xaa>
				ch_pos = (ch - 0xd090) - (0x80 - (0x20 - 1));
 80099b0:	8afb      	ldrh	r3, [r7, #22]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	330f      	adds	r3, #15
 80099b6:	757b      	strb	r3, [r7, #21]
 80099b8:	e003      	b.n	80099c2 <_Z19ssd1306_BoundStringPKcRK6font_tf+0xb2>
			else
				ch_pos = ch - 32;
 80099ba:	8afb      	ldrh	r3, [r7, #22]
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	3b20      	subs	r3, #32
 80099c0:	757b      	strb	r3, [r7, #21]

			w += font.data[ch_pos * (font.width*2 + 1)];
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685a      	ldr	r2, [r3, #4]
 80099c6:	7d7b      	ldrb	r3, [r7, #21]
 80099c8:	6879      	ldr	r1, [r7, #4]
 80099ca:	7809      	ldrb	r1, [r1, #0]
 80099cc:	0049      	lsls	r1, r1, #1
 80099ce:	3101      	adds	r1, #1
 80099d0:	fb01 f303 	mul.w	r3, r1, r3
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	4413      	add	r3, r2
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	461a      	mov	r2, r3
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	4413      	add	r3, r2
 80099e0:	61bb      	str	r3, [r7, #24]
			ch_count++;
 80099e2:	7ffb      	ldrb	r3, [r7, #31]
 80099e4:	3301      	adds	r3, #1
 80099e6:	77fb      	strb	r3, [r7, #31]
		while(i < len)
 80099e8:	e7ac      	b.n	8009944 <_Z19ssd1306_BoundStringPKcRK6font_tf+0x34>
		}

		if(ch_count > 1)
 80099ea:	7ffb      	ldrb	r3, [r7, #31]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d906      	bls.n	80099fe <_Z19ssd1306_BoundStringPKcRK6font_tf+0xee>
			w += 2*(ch_count - 1);
 80099f0:	7ffb      	ldrb	r3, [r7, #31]
 80099f2:	3b01      	subs	r3, #1
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	461a      	mov	r2, r3
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	4413      	add	r3, r2
 80099fc:	61bb      	str	r3, [r7, #24]

		rect.setWidth(w*factor);
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	ee07 3a90 	vmov	s15, r3
 8009a04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a08:	edd7 7a00 	vldr	s15, [r7]
 8009a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a14:	ee17 1a90 	vmov	r1, s15
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f7ff f847 	bl	8008aac <_ZN9Rectangle8setWidthEm>
		rect.setHeight(font.height*factor);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	785b      	ldrb	r3, [r3, #1]
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a2a:	edd7 7a00 	vldr	s15, [r7]
 8009a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a36:	ee17 1a90 	vmov	r1, s15
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f7ff f844 	bl	8008ac8 <_ZN9Rectangle9setHeightEm>
	}

	return rect;
 8009a40:	bf00      	nop
}
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	3720      	adds	r7, #32
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
	...

08009a4c <_ZL20ssd1306_WriteCommandh>:
///
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	4603      	mov	r3, r0
 8009a54:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(_hi2c) != HAL_I2C_STATE_READY);
 8009a56:	4b0e      	ldr	r3, [pc, #56]	; (8009a90 <_ZL20ssd1306_WriteCommandh+0x44>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7f8 f977 	bl	8001d4e <HAL_I2C_GetState>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b20      	cmp	r3, #32
 8009a64:	bf14      	ite	ne
 8009a66:	2301      	movne	r3, #1
 8009a68:	2300      	moveq	r3, #0
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d000      	beq.n	8009a72 <_ZL20ssd1306_WriteCommandh+0x26>
 8009a70:	e7f1      	b.n	8009a56 <_ZL20ssd1306_WriteCommandh+0xa>
	HAL_I2C_Mem_Write_DMA(_hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8009a72:	4b07      	ldr	r3, [pc, #28]	; (8009a90 <_ZL20ssd1306_WriteCommandh+0x44>)
 8009a74:	6818      	ldr	r0, [r3, #0]
 8009a76:	2301      	movs	r3, #1
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	1dfb      	adds	r3, r7, #7
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	2301      	movs	r3, #1
 8009a80:	2200      	movs	r2, #0
 8009a82:	2178      	movs	r1, #120	; 0x78
 8009a84:	f7f7 feee 	bl	8001864 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(_hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
#endif
}
 8009a88:	bf00      	nop
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	20002df4 	.word	0x20002df4

08009a94 <_ZL17ssd1306_WriteDataPht>:

static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af02      	add	r7, sp, #8
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(_hi2c) != HAL_I2C_STATE_READY);
 8009aa0:	4b0e      	ldr	r3, [pc, #56]	; (8009adc <_ZL17ssd1306_WriteDataPht+0x48>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7f8 f952 	bl	8001d4e <HAL_I2C_GetState>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b20      	cmp	r3, #32
 8009aae:	bf14      	ite	ne
 8009ab0:	2301      	movne	r3, #1
 8009ab2:	2300      	moveq	r3, #0
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d000      	beq.n	8009abc <_ZL17ssd1306_WriteDataPht+0x28>
 8009aba:	e7f1      	b.n	8009aa0 <_ZL17ssd1306_WriteDataPht+0xc>
	HAL_I2C_Mem_Write_DMA(_hi2c, SSD1306_I2C_ADDR, 0x40, 1, data, size);
 8009abc:	4b07      	ldr	r3, [pc, #28]	; (8009adc <_ZL17ssd1306_WriteDataPht+0x48>)
 8009abe:	6818      	ldr	r0, [r3, #0]
 8009ac0:	887b      	ldrh	r3, [r7, #2]
 8009ac2:	9301      	str	r3, [sp, #4]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	2301      	movs	r3, #1
 8009aca:	2240      	movs	r2, #64	; 0x40
 8009acc:	2178      	movs	r1, #120	; 0x78
 8009ace:	f7f7 fec9 	bl	8001864 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(_hi2c, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
#endif
}
 8009ad2:	bf00      	nop
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	20002df4 	.word	0x20002df4

08009ae0 <HAL_I2C_MemTxCpltCallback>:

#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == _hi2c->Instance)
	{
		//TODO:
	}
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <__libc_init_array>:
 8009af4:	b570      	push	{r4, r5, r6, lr}
 8009af6:	4d0d      	ldr	r5, [pc, #52]	; (8009b2c <__libc_init_array+0x38>)
 8009af8:	4c0d      	ldr	r4, [pc, #52]	; (8009b30 <__libc_init_array+0x3c>)
 8009afa:	1b64      	subs	r4, r4, r5
 8009afc:	10a4      	asrs	r4, r4, #2
 8009afe:	2600      	movs	r6, #0
 8009b00:	42a6      	cmp	r6, r4
 8009b02:	d109      	bne.n	8009b18 <__libc_init_array+0x24>
 8009b04:	4d0b      	ldr	r5, [pc, #44]	; (8009b34 <__libc_init_array+0x40>)
 8009b06:	4c0c      	ldr	r4, [pc, #48]	; (8009b38 <__libc_init_array+0x44>)
 8009b08:	f000 f836 	bl	8009b78 <_init>
 8009b0c:	1b64      	subs	r4, r4, r5
 8009b0e:	10a4      	asrs	r4, r4, #2
 8009b10:	2600      	movs	r6, #0
 8009b12:	42a6      	cmp	r6, r4
 8009b14:	d105      	bne.n	8009b22 <__libc_init_array+0x2e>
 8009b16:	bd70      	pop	{r4, r5, r6, pc}
 8009b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b1c:	4798      	blx	r3
 8009b1e:	3601      	adds	r6, #1
 8009b20:	e7ee      	b.n	8009b00 <__libc_init_array+0xc>
 8009b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b26:	4798      	blx	r3
 8009b28:	3601      	adds	r6, #1
 8009b2a:	e7f2      	b.n	8009b12 <__libc_init_array+0x1e>
 8009b2c:	0800c638 	.word	0x0800c638
 8009b30:	0800c638 	.word	0x0800c638
 8009b34:	0800c638 	.word	0x0800c638
 8009b38:	0800c63c 	.word	0x0800c63c

08009b3c <memcpy>:
 8009b3c:	440a      	add	r2, r1
 8009b3e:	4291      	cmp	r1, r2
 8009b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b44:	d100      	bne.n	8009b48 <memcpy+0xc>
 8009b46:	4770      	bx	lr
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b52:	4291      	cmp	r1, r2
 8009b54:	d1f9      	bne.n	8009b4a <memcpy+0xe>
 8009b56:	bd10      	pop	{r4, pc}

08009b58 <memset>:
 8009b58:	4402      	add	r2, r0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d100      	bne.n	8009b62 <memset+0xa>
 8009b60:	4770      	bx	lr
 8009b62:	f803 1b01 	strb.w	r1, [r3], #1
 8009b66:	e7f9      	b.n	8009b5c <memset+0x4>

08009b68 <strcpy>:
 8009b68:	4603      	mov	r3, r0
 8009b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b6e:	f803 2b01 	strb.w	r2, [r3], #1
 8009b72:	2a00      	cmp	r2, #0
 8009b74:	d1f9      	bne.n	8009b6a <strcpy+0x2>
 8009b76:	4770      	bx	lr

08009b78 <_init>:
 8009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7a:	bf00      	nop
 8009b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7e:	bc08      	pop	{r3}
 8009b80:	469e      	mov	lr, r3
 8009b82:	4770      	bx	lr

08009b84 <_fini>:
 8009b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b86:	bf00      	nop
 8009b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b8a:	bc08      	pop	{r3}
 8009b8c:	469e      	mov	lr, r3
 8009b8e:	4770      	bx	lr
